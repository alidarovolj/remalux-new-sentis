using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;

/// <summary>
/// –ú–µ–Ω–µ–¥–∂–µ—Ä —Ü–≤–µ—Ç–æ–≤ –∫—Ä–∞—Å–∫–∏ –¥–ª—è AR Wall Painting System
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±–æ—Ä–æ–º —Ü–≤–µ—Ç–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∫ AR –ø–ª–æ—Å–∫–æ—Å—Ç—è–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
/// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ –∫—Ä–∞—Å–∫–∏
/// </summary>
public class ARWallPaintColorManager : MonoBehaviour
{
      [Header("–¶–≤–µ—Ç–∞ –ö—Ä–∞—Å–∫–∏")]
      [SerializeField] private Color currentPaintColor = new Color(0.8f, 0.4f, 0.2f, 0.6f);
      [SerializeField] private float blendFactor = 0.7f;

      [Header("–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¶–≤–µ—Ç–∞")]
      [SerializeField]
      private Color[] presetColors = {
        new Color(0.8f, 0.4f, 0.2f, 0.6f), // –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π
        new Color(0.2f, 0.6f, 0.9f, 0.6f), // –°–∏–Ω–∏–π
        new Color(0.9f, 0.2f, 0.3f, 0.6f), // –ö—Ä–∞—Å–Ω—ã–π
        new Color(0.3f, 0.8f, 0.3f, 0.6f), // –ó–µ–ª–µ–Ω—ã–π
        new Color(0.9f, 0.8f, 0.2f, 0.6f), // –ñ–µ–ª—Ç—ã–π
        new Color(0.7f, 0.3f, 0.8f, 0.6f), // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        new Color(0.9f, 0.5f, 0.1f, 0.6f), // –û—Ä–∞–Ω–∂–µ–≤—ã–π
        new Color(0.2f, 0.2f, 0.2f, 0.6f), // –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
    };

      [Header("UI –≠–ª–µ–º–µ–Ω—Ç—ã")]
      [SerializeField] private Button[] colorButtons;
      [SerializeField] private Slider transparencySlider;
      [SerializeField] private Image currentColorPreview;
      [SerializeField] private Text colorInfoText;

      [Header("–°–≤—è–∑–∞–Ω–Ω—ã–µ –°–∏—Å—Ç–µ–º—ã")]
      [SerializeField] private ARManagerInitializer2 arManagerInitializer;

      // –°–æ–±—ã—Ç–∏—è
      public System.Action<Color, float> OnColorChanged;

      private void Start()
      {
            InitializeColorManager();
            SetupUI();

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–º ARManagerInitializer2 –µ—Å–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
            if (arManagerInitializer == null)
            {
                  arManagerInitializer = FindObjectOfType<ARManagerInitializer2>();
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç
            ApplyColorToAllPlanes();
      }

      private void InitializeColorManager()
      {
            Debug.Log("[ARWallPaintColorManager] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞–º–∏ –∫—Ä–∞—Å–∫–∏");

            // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ü–≤–µ—Ç–∞
            if (presetColors.Length == 0)
            {
                  presetColors = new Color[] { currentPaintColor };
            }
      }

      private void SetupUI()
      {
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ü–≤–µ—Ç–æ–≤
            for (int i = 0; i < colorButtons.Length && i < presetColors.Length; i++)
            {
                  var buttonIndex = i; // –ó–∞–º—ã–∫–∞–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
                  var button = colorButtons[i];
                  var color = presetColors[i];

                  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
                  var buttonImage = button.GetComponent<Image>();
                  if (buttonImage != null)
                  {
                        buttonImage.color = new Color(color.r, color.g, color.b, 1.0f); // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è UI
                  }

                  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è
                  button.onClick.AddListener(() => SelectColor(buttonIndex));
            }

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            if (transparencySlider != null)
            {
                  transparencySlider.value = blendFactor;
                  transparencySlider.onValueChanged.AddListener(OnTransparencyChanged);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Ü–≤–µ—Ç–∞
            UpdateColorPreview();
      }

      public void SelectColor(int colorIndex)
      {
            if (colorIndex >= 0 && colorIndex < presetColors.Length)
            {
                  currentPaintColor = presetColors[colorIndex];
                  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                  currentPaintColor.a = blendFactor;

                  UpdateColorPreview();
                  ApplyColorToAllPlanes();

                  Debug.Log($"[ARWallPaintColorManager] üé® –í—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç: {currentPaintColor} (–∏–Ω–¥–µ–∫—Å {colorIndex})");
            }
      }

      public void OnTransparencyChanged(float newTransparency)
      {
            blendFactor = newTransparency;
            currentPaintColor.a = blendFactor;

            UpdateColorPreview();
            ApplyColorToAllPlanes();

            Debug.Log($"[ARWallPaintColorManager] üîß –ò–∑–º–µ–Ω–µ–Ω–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: {blendFactor:F2}");
      }

      private void UpdateColorPreview()
      {
            if (currentColorPreview != null)
            {
                  currentColorPreview.color = new Color(currentPaintColor.r, currentPaintColor.g, currentPaintColor.b, 1.0f);
            }

            if (colorInfoText != null)
            {
                  colorInfoText.text = $"RGB: {(int)(currentPaintColor.r * 255)}, {(int)(currentPaintColor.g * 255)}, {(int)(currentPaintColor.b * 255)}\n–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: {(blendFactor * 100):F0}%";
            }
      }

      private void ApplyColorToAllPlanes()
      {
            if (arManagerInitializer == null) return;

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            var generatedPlanes = GetGeneratedPlanes();
            int updatedCount = 0;

            foreach (GameObject plane in generatedPlanes)
            {
                  if (plane == null) continue;

                  MeshRenderer renderer = plane.GetComponent<MeshRenderer>();
                  if (renderer != null && renderer.material != null)
                  {
                        Material material = renderer.material;

                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–∞—Å–∫–∏
                        if (material.HasProperty("_PaintColor"))
                        {
                              material.SetColor("_PaintColor", currentPaintColor);
                        }

                        if (material.HasProperty("_BlendFactor"))
                        {
                              material.SetFloat("_BlendFactor", blendFactor);
                        }

                        updatedCount++;
                  }
            }

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∞
            OnColorChanged?.Invoke(currentPaintColor, blendFactor);

            if (updatedCount > 0)
            {
                  Debug.Log($"[ARWallPaintColorManager] üé® –¶–≤–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ {updatedCount} –ø–ª–æ—Å–∫–æ—Å—Ç—è–º");
            }
      }

      private List<GameObject> GetGeneratedPlanes()
      {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –ø–æ–ª—é generatedPlanes
            var field = typeof(ARManagerInitializer2).GetField("generatedPlanes",
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

            if (field != null && arManagerInitializer != null)
            {
                  return (List<GameObject>)field.GetValue(arManagerInitializer);
            }

            return new List<GameObject>();
      }

      // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      public void SetColor(Color newColor)
      {
            currentPaintColor = newColor;
            UpdateColorPreview();
            ApplyColorToAllPlanes();
      }

      public void SetTransparency(float newTransparency)
      {
            blendFactor = Mathf.Clamp01(newTransparency);
            currentPaintColor.a = blendFactor;

            if (transparencySlider != null)
            {
                  transparencySlider.value = blendFactor;
            }

            UpdateColorPreview();
            ApplyColorToAllPlanes();
      }

      public Color GetCurrentColor()
      {
            return currentPaintColor;
      }

      public float GetCurrentTransparency()
      {
            return blendFactor;
      }

      // Context Menu –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      [ContextMenu("Apply Red Paint")]
      public void ApplyRedPaint()
      {
            SetColor(new Color(0.9f, 0.2f, 0.2f, blendFactor));
      }

      [ContextMenu("Apply Blue Paint")]
      public void ApplyBluePaint()
      {
            SetColor(new Color(0.2f, 0.4f, 0.9f, blendFactor));
      }

      [ContextMenu("Apply Green Paint")]
      public void ApplyGreenPaint()
      {
            SetColor(new Color(0.2f, 0.8f, 0.3f, blendFactor));
      }

      [ContextMenu("Increase Transparency")]
      public void IncreaseTransparency()
      {
            SetTransparency(blendFactor + 0.1f);
      }

      [ContextMenu("Decrease Transparency")]
      public void DecreaseTransparency()
      {
            SetTransparency(blendFactor - 0.1f);
      }
}