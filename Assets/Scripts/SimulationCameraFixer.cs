using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SimulationCamera, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –µ–≥–æ –ø–æ –∏–º–µ–Ω–∏ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏
/// </summary>
[DefaultExecutionOrder(-500)] // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–Ω—å—à–µ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
public class SimulationCameraFixer : MonoBehaviour
{
    private int fixCount = 0;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è cullingMask –≤ –∏–º–µ–Ω–∞ —Å–ª–æ–µ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    private static string FormatCullingMask(int mask)
    {
        if (mask == -1) return "Everything (-1)";
        if (mask == 0) return "Nothing (0)";
        
        List<string> layers = new List<string>();
        for (int i = 0; i < 32; i++)
        {
            int layerBit = 1 << i;
            if ((mask & layerBit) != 0)
            {
                string layerName = LayerMask.LayerToName(i);
                if (!string.IsNullOrEmpty(layerName))
                {
                    layers.Add(layerName);
                }
                else
                {
                    layers.Add($"Layer{i}");
                }
            }
        }
        
        return $"{mask} [{string.Join(", ", layers)}]";
    }
    
    private void Awake()
    {
        Debug.Log("[SimulationCameraFixer] üî• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–∫—Å–µ—Ä–∞ –¥–ª—è SimulationCamera...");
        
        // –°—Ä–∞–∑—É –∏—â–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º SimulationCamera
        bool foundSimulationCamera = FindAndFixSimulationCamera();
        
        if (foundSimulationCamera)
        {
            Debug.Log("[SimulationCameraFixer] ‚úÖ SimulationCamera –Ω–∞–π–¥–µ–Ω–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ");
        }
        else
        {
            Debug.Log("[SimulationCameraFixer] ‚ö†Ô∏è SimulationCamera –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø–æ–∑–∂–µ");
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        StartCoroutine(ContinuouslyFixSimulationCamera());
    }

    private IEnumerator ContinuouslyFixSimulationCamera()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—â–µ –≤ –Ω–∞—á–∞–ª–µ (–ø–µ—Ä–≤—ã–µ 5 —Å–µ–∫—É–Ω–¥)
        for (int i = 0; i < 5; i++)
        {
            yield return new WaitForSeconds(1f);
            FindAndFixSimulationCamera();
        }
        
        // –ü–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–µ
        while (true)
        {
            yield return new WaitForSeconds(10f);
            FindAndFixSimulationCamera();
        }
    }
    
    private bool FindAndFixSimulationCamera()
    {
        bool found = false;
        bool shouldLog = Time.frameCount % 200 == 0 || Time.frameCount < 10;
        
        // –ò—â–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º Camera –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏
        Camera[] allCameras = FindObjectsOfType<Camera>(true); // true = –≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        
        foreach (Camera camera in allCameras)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∏–º–µ–Ω–∏ "Simulation"
            if (camera.name.Contains("Simulation"))
            {
                found = true;
                
                // –ï—Å–ª–∏ cullingMask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Everything (-1)
                if (camera.cullingMask != -1)
                {
                    int oldCullingMask = camera.cullingMask;
                    string oldMaskFormatted = FormatCullingMask(oldCullingMask);
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Everything (-1)
                    camera.cullingMask = -1;
                    fixCount++;
                    
                    Debug.LogWarning($"[SimulationCameraFixer] üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω Culling Mask —É {camera.name} (–±—ã–ª {oldMaskFormatted}, —Å—Ç–∞–ª Everything (-1)). –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {fixCount}");
                }
                else if (shouldLog)
                {
                    Debug.Log($"[SimulationCameraFixer] ‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ {camera.name} - cullingMask —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Everything (-1)");
                }
                
                // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º Far Clip Plane
                if (camera.farClipPlane < 100f)
                {
                    float oldFarClip = camera.farClipPlane;
                    camera.farClipPlane = 1000f;
                    Debug.LogWarning($"[SimulationCameraFixer] üîß –¢–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω Far Clip Plane —É {camera.name} (–±—ã–ª {oldFarClip}, —Å—Ç–∞–ª 1000)");
                }
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É Camera, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∏–º–µ–Ω–∏ –æ–±—ä–µ–∫—Ç–∞
        if (!found)
        {
            GameObject simCameraObj = GameObject.Find("SimulationCamera");
            if (simCameraObj != null)
            {
                Camera simCamera = simCameraObj.GetComponent<Camera>();
                if (simCamera != null)
                {
                    found = true;
                    
                    // –ï—Å–ª–∏ cullingMask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Everything (-1)
                    if (simCamera.cullingMask != -1)
                    {
                        int oldCullingMask = simCamera.cullingMask;
                        string oldMaskFormatted = FormatCullingMask(oldCullingMask);
                        
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Everything (-1)
                        simCamera.cullingMask = -1;
                        fixCount++;
                        
                        Debug.LogWarning($"[SimulationCameraFixer] üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω Culling Mask —É SimulationCamera, –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–æ –∏–º–µ–Ω–∏ (–±—ã–ª {oldMaskFormatted}, —Å—Ç–∞–ª Everything (-1)). –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {fixCount}");
                    }
                    else if (shouldLog)
                    {
                        Debug.Log("[SimulationCameraFixer] ‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ SimulationCamera (–Ω–∞–π–¥–µ–Ω–∞ –ø–æ –∏–º–µ–Ω–∏) - cullingMask —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Everything (-1)");
                    }
                }
                else
                {
                    Debug.LogWarning("[SimulationCameraFixer] ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç SimulationCamera, –Ω–æ –Ω–∞ –Ω–µ–º –Ω–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Camera!");
                }
            }
        }
        
        // –¢–∞–∫–∂–µ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ GetComponentsInChildren —Å –∫–æ—Ä–Ω—è —Å—Ü–µ–Ω—ã
        if (!found)
        {
            Camera[] sceneCameras = FindObjectsOfType<Camera>(true);
            foreach (Camera camera in sceneCameras)
            {
                if (camera.name.Contains("Simulation") || camera.gameObject.name.Contains("Simulation"))
                {
                    found = true;
                    
                    // –ï—Å–ª–∏ cullingMask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Everything (-1)
                    if (camera.cullingMask != -1)
                    {
                        int oldCullingMask = camera.cullingMask;
                        string oldMaskFormatted = FormatCullingMask(oldCullingMask);
                        
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Everything (-1)
                        camera.cullingMask = -1;
                        fixCount++;
                        
                        Debug.LogWarning($"[SimulationCameraFixer] üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω Culling Mask —É –∫–∞–º–µ—Ä—ã, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π: {camera.name} (–±—ã–ª {oldMaskFormatted}, —Å—Ç–∞–ª Everything (-1)). –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {fixCount}");
                    }
                }
            }
        }
        
        return found;
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    public void ForceFixSimulationCamera()
    {
        Debug.Log("[SimulationCameraFixer] üîÑ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SimulationCamera");
        bool found = FindAndFixSimulationCamera();
        
        if (!found)
        {
            Debug.LogWarning("[SimulationCameraFixer] ‚ö†Ô∏è SimulationCamera –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
        }
    }
} 