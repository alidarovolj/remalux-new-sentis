using UnityEngine;
using UnityEngine.UI;
using UnityEngine.XR.ARFoundation;
using Unity.XR.CoreUtils;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Collections;

/// <summary>
/// –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞
/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
/// - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ (–ø–æ—Ä–æ–≥–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –º–∞—Å–∫–∏)
/// - –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ AR-–ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
/// - –ë–ª–æ–∫–∏—Ä–æ–≤–∫—É UI (Raycast Target)
/// </summary>
public class CriticalFixesValidator : MonoBehaviour
{
      [Header("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")]
      [SerializeField] private WallSegmentation wallSegmentation;
      [SerializeField] private ARManagerInitializer2 arManagerInitializer;
      [SerializeField] private RawImage[] debugRawImages;

      [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")]
      [SerializeField] private bool enablePeriodicValidation = true;
      [SerializeField] private float validationInterval = 5f; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

      private float lastValidationTime = 0f;
      private int validationCount = 0;

      void Start()
      {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if (wallSegmentation == null)
                  wallSegmentation = FindObjectOfType<WallSegmentation>();

            if (arManagerInitializer == null)
                  arManagerInitializer = FindObjectOfType<ARManagerInitializer2>();

            // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö RawImage –≤ —Å—Ü–µ–Ω–µ
            if (debugRawImages == null || debugRawImages.Length == 0)
                  debugRawImages = FindObjectsOfType<RawImage>();

            // –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            ValidateAllFixes();

            Debug.Log("[CriticalFixesValidator] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.");
      }

      void Update()
      {
            if (enablePeriodicValidation && Time.time - lastValidationTime >= validationInterval)
            {
                  ValidateAllFixes();
                  lastValidationTime = Time.time;
            }
      }

      public void ValidateAllFixes()
      {
            validationCount++;
            Debug.Log($"[CriticalFixesValidator] === –í–ê–õ–ò–î–ê–¶–ò–Ø #{validationCount} ===");

            ValidateSegmentationSettings();
            ValidateARPlanesDuplication();
            ValidateUIRaycastBlocking();
            ValidateAdaptiveResolution();

            Debug.Log($"[CriticalFixesValidator] === –í–ê–õ–ò–î–ê–¶–ò–Ø #{validationCount} –ó–ê–í–ï–†–®–ï–ù–ê ===");
      }

      private void ValidateSegmentationSettings()
      {
            Debug.Log("[CriticalFixesValidator] üîç –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò:");

            if (wallSegmentation == null)
            {
                  Debug.LogError("[CriticalFixesValidator] ‚ùå WallSegmentation –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                  return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
            var wallConfidenceField = typeof(WallSegmentation).GetField("wallConfidence",
                BindingFlags.NonPublic | BindingFlags.Instance);
            var segmentationConfidenceThresholdField = typeof(WallSegmentation).GetField("segmentationConfidenceThreshold",
                BindingFlags.Public | BindingFlags.Instance);
            var applyMaskSmoothingField = typeof(WallSegmentation).GetField("applyMaskSmoothing",
                BindingFlags.Public | BindingFlags.Instance);
            var maskBlurSizeField = typeof(WallSegmentation).GetField("maskBlurSize",
                BindingFlags.Public | BindingFlags.Instance);

            if (wallConfidenceField != null)
            {
                  float wallConfidence = (float)wallConfidenceField.GetValue(wallSegmentation);
                  if (wallConfidence >= 0.1f && wallConfidence <= 0.25f)
                        Debug.Log($"[CriticalFixesValidator] ‚úÖ wallConfidence: {wallConfidence:F3} (–ò–°–ü–†–ê–í–õ–ï–ù–û)");
                  else
                        Debug.LogWarning($"[CriticalFixesValidator] ‚ö†Ô∏è wallConfidence: {wallConfidence:F3} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 0.1-0.25)");
            }

            if (segmentationConfidenceThresholdField != null)
            {
                  float threshold = (float)segmentationConfidenceThresholdField.GetValue(wallSegmentation);
                  if (threshold >= 0.1f && threshold <= 0.25f)
                        Debug.Log($"[CriticalFixesValidator] ‚úÖ segmentationConfidenceThreshold: {threshold:F3} (–ò–°–ü–†–ê–í–õ–ï–ù–û)");
                  else
                        Debug.LogWarning($"[CriticalFixesValidator] ‚ö†Ô∏è segmentationConfidenceThreshold: {threshold:F3} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 0.1-0.25)");
            }

            if (applyMaskSmoothingField != null)
            {
                  bool smoothing = (bool)applyMaskSmoothingField.GetValue(wallSegmentation);
                  if (smoothing)
                        Debug.Log("[CriticalFixesValidator] ‚úÖ applyMaskSmoothing: –í–ö–õ–Æ–ß–ï–ù–û (–ò–°–ü–†–ê–í–õ–ï–ù–û)");
                  else
                        Debug.LogWarning("[CriticalFixesValidator] ‚ö†Ô∏è applyMaskSmoothing: –û–¢–ö–õ–Æ–ß–ï–ù–û (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å)");
            }

            if (maskBlurSizeField != null)
            {
                  int blurSize = (int)maskBlurSizeField.GetValue(wallSegmentation);
                  if (blurSize >= 3 && blurSize <= 6)
                        Debug.Log($"[CriticalFixesValidator] ‚úÖ maskBlurSize: {blurSize} (–ò–°–ü–†–ê–í–õ–ï–ù–û)");
                  else
                        Debug.LogWarning($"[CriticalFixesValidator] ‚ö†Ô∏è maskBlurSize: {blurSize} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3-6)");
            }
      }

      private void ValidateARPlanesDuplication()
      {
            Debug.Log("[CriticalFixesValidator] üîç –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø AR-–ü–õ–û–°–ö–û–°–¢–ï–ô:");

            if (arManagerInitializer == null)
            {
                  Debug.LogError("[CriticalFixesValidator] ‚ùå ARManagerInitializer2 –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                  return;
            }

            // –ò—â–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å –∏–º–µ–Ω–µ–º MyARPlane_Debug
            GameObject[] allPlanes = GameObject.FindObjectsOfType<GameObject>()
                .Where(go => go.name.StartsWith("MyARPlane_Debug"))
                .ToArray();

            Debug.Log($"[CriticalFixesValidator] –ù–∞–π–¥–µ–Ω–æ AR-–ø–ª–æ—Å–∫–æ—Å—Ç–µ–π —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º 'MyARPlane_Debug': {allPlanes.Length}");

            if (allPlanes.Length <= 5)
            {
                  Debug.Log("[CriticalFixesValidator] ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –≤ –Ω–æ—Ä–º–µ (‚â§5)");
            }
            else if (allPlanes.Length <= 10)
            {
                  Debug.LogWarning($"[CriticalFixesValidator] ‚ö†Ô∏è –ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π ({allPlanes.Length}), –≤–æ–∑–º–æ–∂–Ω—ã –¥—É–±–ª–∏");
            }
            else
            {
                  Debug.LogError($"[CriticalFixesValidator] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π ({allPlanes.Length}), –≤–µ—Ä–æ—è—Ç–Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º");
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—á–µ–Ω—å –±–ª–∏–∑–∫–∏—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
            var duplicateGroups = new List<List<GameObject>>();
            var processed = new HashSet<GameObject>();

            foreach (var plane in allPlanes)
            {
                  if (processed.Contains(plane)) continue;

                  var group = new List<GameObject> { plane };
                  processed.Add(plane);

                  foreach (var otherPlane in allPlanes)
                  {
                        if (otherPlane == plane || processed.Contains(otherPlane)) continue;

                        float distance = Vector3.Distance(plane.transform.position, otherPlane.transform.position);
                        if (distance < 0.4f) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ—Ä–æ–≥, —á—Ç–æ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                        {
                              group.Add(otherPlane);
                              processed.Add(otherPlane);
                        }
                  }

                  if (group.Count > 1)
                  {
                        duplicateGroups.Add(group);
                  }
            }

            if (duplicateGroups.Count == 0)
            {
                  Debug.Log("[CriticalFixesValidator] ‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ");
            }
            else
            {
                  Debug.LogWarning($"[CriticalFixesValidator] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {duplicateGroups.Count} –≥—Ä—É–ø–ø –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π:");
                  foreach (var group in duplicateGroups)
                  {
                        string names = string.Join(", ", group.Select(p => p.name));
                        Debug.LogWarning($"[CriticalFixesValidator]   –ì—Ä—É–ø–ø–∞ –¥—É–±–ª–µ–π: {names}");
                  }
            }
      }

      private void ValidateUIRaycastBlocking()
      {
            Debug.Log("[CriticalFixesValidator] üîç –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ò–†–û–í–ö–ò UI:");

            int totalRawImages = 0;
            int blockingRawImages = 0;

            foreach (var rawImage in debugRawImages)
            {
                  if (rawImage == null) continue;

                  totalRawImages++;

                  if (rawImage.raycastTarget)
                  {
                        blockingRawImages++;
                        Debug.LogWarning($"[CriticalFixesValidator] ‚ö†Ô∏è RawImage '{rawImage.gameObject.name}' –∏–º–µ–µ—Ç raycastTarget = true (–º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Å–∞–Ω–∏—è)");
                  }
            }

            if (blockingRawImages == 0)
            {
                  Debug.Log($"[CriticalFixesValidator] ‚úÖ –í—Å–µ RawImage ({totalRawImages}) –∏–º–µ—é—Ç raycastTarget = false (–ò–°–ü–†–ê–í–õ–ï–ù–û)");
            }
            else
            {
                  Debug.LogWarning($"[CriticalFixesValidator] ‚ö†Ô∏è {blockingRawImages} –∏–∑ {totalRawImages} RawImage –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Å–∞–Ω–∏—è");
            }
      }

      private void ValidateAdaptiveResolution()
      {
            Debug.Log("[CriticalFixesValidator] üîç –ü–†–û–í–ï–†–ö–ê –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –†–ê–ó–†–ï–®–ï–ù–ò–Ø –ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:");

            if (wallSegmentation == null)
            {
                  Debug.LogError("[CriticalFixesValidator] ‚ùå WallSegmentation –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è!");
                  return;
            }

            try
            {
                  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                  float avgProcessingTime = wallSegmentation.GetAverageProcessingTimeMs();
                  Vector2Int currentResolution = wallSegmentation.GetCurrentResolution();
                  float qualityScore = wallSegmentation.GetLastQualityScore();

                  Debug.Log($"[CriticalFixesValidator] –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:");
                  Debug.Log($"[CriticalFixesValidator]   üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {avgProcessingTime:F1}ms");
                  Debug.Log($"[CriticalFixesValidator]   üñºÔ∏è –¢–µ–∫—É—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {currentResolution.x}x{currentResolution.y}");
                  Debug.Log($"[CriticalFixesValidator]   ‚≠ê –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–∞—Å–∫–∏: {qualityScore:F2}");

                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                  if (avgProcessingTime < 16f)
                  {
                        Debug.Log("[CriticalFixesValidator] ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (< 16ms)");
                  }
                  else if (avgProcessingTime < 33f)
                  {
                        Debug.Log("[CriticalFixesValidator] ‚úÖ –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (< 33ms)");
                  }
                  else if (avgProcessingTime < 50f)
                  {
                        Debug.LogWarning("[CriticalFixesValidator] ‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (33-50ms)");
                  }
                  else
                  {
                        Debug.LogWarning("[CriticalFixesValidator] ‚ö†Ô∏è –ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (> 50ms) - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è");
                  }

                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                  if (currentResolution.x >= 768)
                  {
                        Debug.Log("[CriticalFixesValidator] ‚úÖ –í—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (768+px) - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ");
                  }
                  else if (currentResolution.x >= 512)
                  {
                        Debug.Log("[CriticalFixesValidator] ‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (512+px) - —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ");
                  }
                  else if (currentResolution.x >= 384)
                  {
                        Debug.LogWarning("[CriticalFixesValidator] ‚ö†Ô∏è –ù–∏–∑–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (384+px) - –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–∞");
                  }
                  else
                  {
                        Debug.LogWarning("[CriticalFixesValidator] ‚ö†Ô∏è –û—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (< 384px) - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º");
                  }

                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Å–∫–∏
                  if (qualityScore > 0.8f)
                  {
                        Debug.Log("[CriticalFixesValidator] ‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Å–∫–∏ (> 0.8)");
                  }
                  else if (qualityScore > 0.6f)
                  {
                        Debug.Log("[CriticalFixesValidator] ‚úÖ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Å–∫–∏ (> 0.6)");
                  }
                  else if (qualityScore > 0.4f)
                  {
                        Debug.LogWarning("[CriticalFixesValidator] ‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Å–∫–∏ (0.4-0.6)");
                  }
                  else if (qualityScore > 0)
                  {
                        Debug.LogWarning("[CriticalFixesValidator] ‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Å–∫–∏ (< 0.4)");
                  }
                  else
                  {
                        Debug.Log("[CriticalFixesValidator] ‚ÑπÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ –º–∞—Å–∫–∏ –µ—â–µ –Ω–µ –æ—Ü–µ–Ω–µ–Ω–æ");
                  }
            }
            catch (System.Exception e)
            {
                  Debug.LogError($"[CriticalFixesValidator] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {e.Message}");
            }
      }

      [ContextMenu("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è")]
      public void ForceValidation()
      {
            ValidateAllFixes();
      }

      [ContextMenu("–ò—Å–ø—Ä–∞–≤–∏—Ç—å –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ RawImage")]
      public void FixBlockingRawImages()
      {
            int fixedCount = 0;
            foreach (var rawImage in debugRawImages)
            {
                  if (rawImage != null && rawImage.raycastTarget)
                  {
                        rawImage.raycastTarget = false;
                        Debug.Log($"[CriticalFixesValidator] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω raycastTarget –¥–ª—è {rawImage.gameObject.name}");
                        fixedCount++;
                  }
            }
            Debug.Log($"[CriticalFixesValidator] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixedCount} –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö RawImage");
      }

      [ContextMenu("–í–∫–ª—é—á–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ")]
      public void EnableAdaptiveResolution()
      {
            if (wallSegmentation != null)
            {
                  wallSegmentation.SetAdaptiveResolution(true);
                  Debug.Log("[CriticalFixesValidator] ‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ");
            }
            else
            {
                  Debug.LogError("[CriticalFixesValidator] ‚ùå WallSegmentation –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
      }

      [ContextMenu("–û—Ç–∫–ª—é—á–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ")]
      public void DisableAdaptiveResolution()
      {
            if (wallSegmentation != null)
            {
                  wallSegmentation.SetAdaptiveResolution(false);
                  Debug.Log("[CriticalFixesValidator] ‚ö†Ô∏è –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ");
            }
            else
            {
                  Debug.LogError("[CriticalFixesValidator] ‚ùå WallSegmentation –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
      }

      [ContextMenu("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (768px)")]
      public void SetHighQuality()
      {
            if (wallSegmentation != null)
            {
                  wallSegmentation.SetFixedResolution(768, 768);
                  Debug.Log("[CriticalFixesValidator] üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (768x768)");
            }
            else
            {
                  Debug.LogError("[CriticalFixesValidator] ‚ùå WallSegmentation –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
      }

      [ContextMenu("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (512px)")]
      public void SetStandardQuality()
      {
            if (wallSegmentation != null)
            {
                  wallSegmentation.SetFixedResolution(512, 512);
                  Debug.Log("[CriticalFixesValidator] ‚öñÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (512x512)");
            }
            else
            {
                  Debug.LogError("[CriticalFixesValidator] ‚ùå WallSegmentation –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
      }

      [ContextMenu("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º (384px)")]
      public void SetPerformanceMode()
      {
            if (wallSegmentation != null)
            {
                  wallSegmentation.SetFixedResolution(384, 384);
                  Debug.Log("[CriticalFixesValidator] ‚ö° –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º (384x384)");
            }
            else
            {
                  Debug.LogError("[CriticalFixesValidator] ‚ùå WallSegmentation –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
      }

      // ================================
      // –ü–†–ò–û–†–ò–¢–ï–¢ 2: –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ –∫—Ä–∞—Å–∫–∏
      // ================================

      [ContextMenu("Priority 2: Validate Realistic Paint System")]
      public void ValidateRealisticPaintSystem()
      {
            Debug.Log("=== –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–û–ô –ü–û–ö–†–ê–°–ö–ò ===");

            bool hasWallPaintShader = CheckWallPaintShader();
            bool hasPaintMaterials = CheckPaintMaterials();
            bool hasColorManager = CheckColorManager();
            bool hasProperMaterialSetup = CheckMaterialParameters();

            bool allPriority2Checks = hasWallPaintShader && hasPaintMaterials && hasColorManager && hasProperMaterialSetup;

            if (allPriority2Checks)
            {
                  Debug.Log("‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢ 2 –í–´–ü–û–õ–ù–ï–ù: –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –ø–æ–∫—Ä–∞—Å–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞!");
            }
            else
            {
                  Debug.LogWarning("‚ö†Ô∏è –ü–†–ò–û–†–ò–¢–ï–¢ 2 –ù–ï –ó–ê–í–ï–†–®–ï–ù: –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
            }
      }

      private bool CheckWallPaintShader()
      {
            Shader wallPaintShader = Shader.Find("Custom/WallPaint");
            if (wallPaintShader != null)
            {
                  Debug.Log("‚úÖ –®–µ–π–¥–µ—Ä Custom/WallPaint –Ω–∞–π–¥–µ–Ω");
                  return true;
            }
            else
            {
                  Debug.LogError("‚ùå –®–µ–π–¥–µ—Ä Custom/WallPaint –Ω–µ –Ω–∞–π–¥–µ–Ω! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –∫—Ä–∞—Å–∫–∏");
                  return false;
            }
      }

      private bool CheckPaintMaterials()
      {
            var arManager = FindObjectOfType<ARManagerInitializer2>();
            if (arManager != null)
            {
                  Material vertMaterial = arManager.VerticalPlaneMaterial;
                  if (vertMaterial != null)
                  {
                        if (vertMaterial.shader.name == "Custom/WallPaint")
                        {
                              Debug.Log($"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à–µ–π–¥–µ—Ä: {vertMaterial.shader.name}");

                              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                              bool hasColorProp = vertMaterial.HasProperty("_PaintColor");
                              bool hasBlendProp = vertMaterial.HasProperty("_BlendFactor");
                              bool hasMaskProp = vertMaterial.HasProperty("_SegmentationMask");

                              Debug.Log($"  - _PaintColor: {(hasColorProp ? "‚úÖ" : "‚ùå")}");
                              Debug.Log($"  - _BlendFactor: {(hasBlendProp ? "‚úÖ" : "‚ùå")}");
                              Debug.Log($"  - _SegmentationMask: {(hasMaskProp ? "‚úÖ" : "‚ùå")}");

                              return hasColorProp && hasBlendProp && hasMaskProp;
                        }
                        else
                        {
                              Debug.LogWarning($"‚ö†Ô∏è –ú–∞—Ç–µ—Ä–∏–∞–ª –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à–µ–π–¥–µ—Ä: {vertMaterial.shader.name}");
                              return false;
                        }
                  }
                  else
                  {
                        Debug.LogWarning("‚ö†Ô∏è –ú–∞—Ç–µ—Ä–∏–∞–ª –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ ARManagerInitializer2");
                        return false;
                  }
            }
            else
            {
                  Debug.LogError("‚ùå ARManagerInitializer2 –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                  return false;
            }
      }

      private bool CheckColorManager()
      {
            var colorManager = FindObjectOfType<ARWallPaintColorManager>();
            if (colorManager != null)
            {
                  Debug.Log("‚úÖ ARWallPaintColorManager –Ω–∞–π–¥–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω");

                  Color currentColor = colorManager.GetCurrentColor();
                  float transparency = colorManager.GetCurrentTransparency();

                  Debug.Log($"  - –¢–µ–∫—É—â–∏–π —Ü–≤–µ—Ç: RGB({currentColor.r:F2}, {currentColor.g:F2}, {currentColor.b:F2})");
                  Debug.Log($"  - –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: {transparency:F2} ({transparency * 100:F0}%)");

                  return true;
            }
            else
            {
                  Debug.LogWarning("‚ö†Ô∏è ARWallPaintColorManager –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
                  return false;
            }
      }

      private bool CheckMaterialParameters()
      {
            var arManager = FindObjectOfType<ARManagerInitializer2>();
            if (arManager == null) return false;

            // –ü–æ–ª—É—á–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
            var generatedPlanesField = typeof(ARManagerInitializer2).GetField("generatedPlanes",
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

            if (generatedPlanesField != null)
            {
                  var generatedPlanes = (List<GameObject>)generatedPlanesField.GetValue(arManager);

                  if (generatedPlanes != null && generatedPlanes.Count > 0)
                  {
                        int properlyConfiguredPlanes = 0;

                        foreach (var plane in generatedPlanes)
                        {
                              if (plane == null) continue;

                              var renderer = plane.GetComponent<MeshRenderer>();
                              if (renderer != null && renderer.material != null)
                              {
                                    var material = renderer.material;

                                    if (material.shader.name == "Custom/WallPaint")
                                    {
                                          bool hasValidPaintColor = material.HasProperty("_PaintColor");
                                          bool hasValidBlendFactor = material.HasProperty("_BlendFactor");
                                          bool hasUseMaskKeyword = material.IsKeywordEnabled("USE_MASK");
                                          bool hasARSpaceKeyword = material.IsKeywordEnabled("USE_AR_WORLD_SPACE");

                                          if (hasValidPaintColor && hasValidBlendFactor && hasUseMaskKeyword && hasARSpaceKeyword)
                                          {
                                                properlyConfiguredPlanes++;
                                          }
                                    }
                              }
                        }

                        Debug.Log($"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π: {properlyConfiguredPlanes}/{generatedPlanes.Count}");
                        return properlyConfiguredPlanes > 0;
                  }
                  else
                  {
                        Debug.Log("‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏");
                        return true; // –°—á–∏—Ç–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º –µ—Å–ª–∏ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –µ—â–µ –Ω–µ—Ç
                  }
            }

            return false;
      }

      [ContextMenu("Priority 2: Apply Test Colors")]
      public void ApplyTestColors()
      {
            var colorManager = FindObjectOfType<ARWallPaintColorManager>();
            if (colorManager != null)
            {
                  Debug.Log("[CriticalFixesValidator] –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ü–≤–µ—Ç–∞...");

                  StartCoroutine(ColorTestSequence(colorManager));
            }
            else
            {
                  Debug.LogWarning("ARWallPaintColorManager –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤");
            }
      }

      private System.Collections.IEnumerator ColorTestSequence(ARWallPaintColorManager colorManager)
      {
            Color[] testColors = {
                  new Color(0.9f, 0.2f, 0.2f, 0.7f), // –ö—Ä–∞—Å–Ω—ã–π
                  new Color(0.2f, 0.7f, 0.3f, 0.7f), // –ó–µ–ª–µ–Ω—ã–π
                  new Color(0.2f, 0.4f, 0.9f, 0.7f), // –°–∏–Ω–∏–π
                  new Color(0.9f, 0.7f, 0.2f, 0.7f), // –ñ–µ–ª—Ç—ã–π
            };

            string[] colorNames = { "–ö—Ä–∞—Å–Ω—ã–π", "–ó–µ–ª–µ–Ω—ã–π", "–°–∏–Ω–∏–π", "–ñ–µ–ª—Ç—ã–π" };

            for (int i = 0; i < testColors.Length; i++)
            {
                  Debug.Log($"üé® –ü—Ä–∏–º–µ–Ω—è–µ–º {colorNames[i]} —Ü–≤–µ—Ç...");
                  colorManager.SetColor(testColors[i]);
                  yield return new WaitForSeconds(1.5f);
            }

            Debug.Log("üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
      }

      [ContextMenu("Priority 2: Test Transparency")]
      public void TestTransparency()
      {
            var colorManager = FindObjectOfType<ARWallPaintColorManager>();
            if (colorManager != null)
            {
                  StartCoroutine(TransparencyTestSequence(colorManager));
            }
      }

      private System.Collections.IEnumerator TransparencyTestSequence(ARWallPaintColorManager colorManager)
      {
            float[] transparencyLevels = { 0.3f, 0.6f, 0.9f, 0.6f };
            string[] transparencyNames = { "30%", "60%", "90%", "60%" };

            for (int i = 0; i < transparencyLevels.Length; i++)
            {
                  Debug.Log($"üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å {transparencyNames[i]}...");
                  colorManager.SetTransparency(transparencyLevels[i]);
                  yield return new WaitForSeconds(1.0f);
            }

            Debug.Log("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
      }

      [ContextMenu("Priority 2: Force Update All Materials")]
      public void ForceUpdateAllMaterials()
      {
            var arManager = FindObjectOfType<ARManagerInitializer2>();
            if (arManager == null)
            {
                  Debug.LogError("ARManagerInitializer2 –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                  return;
            }

            // –ü–æ–ª—É—á–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
            var generatedPlanesField = typeof(ARManagerInitializer2).GetField("generatedPlanes",
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

            if (generatedPlanesField != null)
            {
                  var generatedPlanes = (List<GameObject>)generatedPlanesField.GetValue(arManager);

                  if (generatedPlanes != null)
                  {
                        int updatedCount = 0;

                        foreach (var plane in generatedPlanes)
                        {
                              if (plane == null) continue;

                              var renderer = plane.GetComponent<MeshRenderer>();
                              if (renderer != null && renderer.material != null)
                              {
                                    var material = renderer.material;

                                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –ø–æ–∫—Ä–∞—Å–∫–∏
                                    if (material.shader.name == "Custom/WallPaint")
                                    {
                                          material.EnableKeyword("USE_MASK");
                                          material.EnableKeyword("USE_AR_WORLD_SPACE");

                                          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                                          if (material.HasProperty("_PaintColor"))
                                          {
                                                material.SetColor("_PaintColor", new Color(0.8f, 0.4f, 0.2f, 0.7f));
                                          }
                                          if (material.HasProperty("_BlendFactor"))
                                          {
                                                material.SetFloat("_BlendFactor", 0.7f);
                                          }

                                          updatedCount++;
                                    }
                              }
                        }

                        Debug.Log($"üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {updatedCount}");
                  }
            }
      }

      [ContextMenu("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Ä–µ–π–∫–∞—Å—Ç–∏–Ω–≥–∞")]
      public void DiagnoseRaycastIssues()
      {
            Debug.Log("[CriticalFixesValidator] === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –†–ï–ô–ö–ê–°–¢–ò–ù–ì–ê ===");

            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–ª–∞–π–¥–µ—Ä–æ–≤ –≤ —Å—Ü–µ–Ω–µ
            Collider[] allColliders = FindObjectsOfType<Collider>();
            Debug.Log($"[CriticalFixesValidator] –í—Å–µ–≥–æ –∫–æ–ª–ª–∞–π–¥–µ—Ä–æ–≤ –≤ —Å—Ü–µ–Ω–µ: {allColliders.Length}");

            int enabledColliders = 0;
            foreach (var collider in allColliders)
            {
                  if (collider.enabled && collider.gameObject.activeInHierarchy)
                  {
                        enabledColliders++;
                        Debug.Log($"[CriticalFixesValidator] –ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–ª–ª–∞–π–¥–µ—Ä: {collider.name} ({collider.GetType().Name}) –Ω–∞ —Å–ª–æ–µ {LayerMask.LayerToName(collider.gameObject.layer)}");
                  }
            }

            Debug.Log($"[CriticalFixesValidator] –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–ª–ª–∞–π–¥–µ—Ä–æ–≤: {enabledColliders}");

            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–π–∫–∞—Å—Ç–∏–Ω–≥–∞ –≤ ARManagerInitializer2
            var arManager = FindObjectOfType<ARManagerInitializer2>();
            if (arManager != null)
            {
                  // –ü–æ–ª—É—á–∞–µ–º LayerMask —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
                  var hitLayerMaskField = typeof(ARManagerInitializer2).GetField("hitLayerMask", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                  if (hitLayerMaskField != null)
                  {
                        var layerMask = (LayerMask)hitLayerMaskField.GetValue(arManager);
                        Debug.Log($"[CriticalFixesValidator] hitLayerMask –≤ ARManagerInitializer2: {layerMask.value} ({layerMask})");
                  }
            }

            // 3. –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–π–∫–∞—Å—Ç
            Camera mainCamera = Camera.main;
            if (mainCamera != null)
            {
                  Vector3 rayOrigin = mainCamera.transform.position;
                  Vector3 rayDirection = mainCamera.transform.forward;

                  Debug.Log($"[CriticalFixesValidator] –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–π–∫–∞—Å—Ç –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã: {rayOrigin} –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: {rayDirection}");

                  RaycastHit hit;
                  if (Physics.Raycast(rayOrigin, rayDirection, out hit, 100f, -1))
                  {
                        Debug.Log($"[CriticalFixesValidator] ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–π–∫–∞—Å—Ç –ü–û–ü–ê–õ –≤ {hit.collider.name} –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ {hit.distance:F2}–º");
                  }
                  else
                  {
                        Debug.LogWarning($"[CriticalFixesValidator] ‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–π–∫–∞—Å—Ç –ü–†–û–ú–ê–•");
                  }
            }

            // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ä–µ–¥—É
            GameObject simulationEnv = GameObject.Find("Basic Simulation Environment") ??
                                       GameObject.Find("Simulation Environment") ??
                                       GameObject.Find("Simulation Environment (Auto-Created)");

            if (simulationEnv != null)
            {
                  var envColliders = simulationEnv.GetComponentsInChildren<Collider>();
                  Debug.Log($"[CriticalFixesValidator] –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ä–µ–¥–∞ '{simulationEnv.name}' –∏–º–µ–µ—Ç {envColliders.Length} –∫–æ–ª–ª–∞–π–¥–µ—Ä–æ–≤");
            }
            else
            {
                  Debug.LogWarning("[CriticalFixesValidator] –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ä–µ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            }

            Debug.Log("[CriticalFixesValidator] === –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===");
      }

      [ContextMenu("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ä–µ–¥—É")]
      public void ForceCreateSimulationEnvironment()
      {
            Debug.Log("[CriticalFixesValidator] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ä–µ–¥—ã...");

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ä–µ–¥—ã
            GameObject[] oldEnvs = {
                  GameObject.Find("Basic Simulation Environment"),
                  GameObject.Find("Simulation Environment"),
                  GameObject.Find("Simulation Environment (Auto-Created)")
            };

            foreach (var env in oldEnvs)
            {
                  if (env != null)
                  {
                        Debug.Log($"[CriticalFixesValidator] –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—É—é —Å—Ä–µ–¥—É: {env.name}");
                        DestroyImmediate(env);
                  }
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ä–µ–¥—É
            var sceneHelper = FindObjectOfType<SceneSetupHelper>();
            if (sceneHelper == null)
            {
                  var helperGO = new GameObject("SceneSetupHelper");
                  sceneHelper = helperGO.AddComponent<SceneSetupHelper>();
            }

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
            var environmentCreatedField = typeof(SceneSetupHelper).GetField("environmentCreated", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static);
            if (environmentCreatedField != null)
            {
                  environmentCreatedField.SetValue(null, false);
            }

            // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–µ–¥—ã
            var setupMethod = typeof(SceneSetupHelper).GetMethod("SetupEnvironment", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            if (setupMethod != null)
            {
                  setupMethod.Invoke(sceneHelper, null);
                  Debug.Log("[CriticalFixesValidator] ‚úÖ –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ä–µ–¥–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–∞");
            }
      }
}