using UnityEngine;
using System.Collections;
using System.IO;
using Unity.Sentis;
using UnityEngine.XR.ARFoundation;
using Unity.XR.CoreUtils;

/// <summary>
/// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º –Ω–∞ iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
/// </summary>
public class iOSDiagnostics : MonoBehaviour
{
      [Header("–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
      [Tooltip("–ó–∞–ø—É—Å–∫–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ")]
      public bool runOnStart = true;

      [Tooltip("–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)")]
      public float diagnosticInterval = 10f;

      private void Start()
      {
            if (runOnStart)
            {
                  StartCoroutine(RunDiagnostics());

                  if (diagnosticInterval > 0)
                  {
                        StartCoroutine(PeriodicDiagnostics());
                  }
            }
      }

      /// <summary>
      /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
      /// </summary>
      [ContextMenu("–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É")]
      public void RunDiagnosticsManual()
      {
            StartCoroutine(RunDiagnostics());
      }

      /// <summary>
      /// –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      /// </summary>
      private IEnumerator RunDiagnostics()
      {
            Debug.Log("=== ü©∫ –ó–ê–ü–£–°–ö iOS –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===");

            // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            CheckPlatform();

            // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–µ–π–¥–µ—Ä–æ–≤
            CheckShaders();

            // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ ML –º–æ–¥–µ–ª–µ–π
            CheckMLModels();

            // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ AR —Å–∏—Å—Ç–µ–º—ã
            yield return StartCoroutine(CheckARSystem());

            // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
            CheckMemory();

            // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å—Ü–µ–Ω—ã
            CheckSceneComponents();

            Debug.Log("=== ‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===");
      }

      /// <summary>
      /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      /// </summary>
      private void CheckPlatform()
      {
            Debug.Log("üì± –ü–†–û–í–ï–†–ö–ê –ü–õ–ê–¢–§–û–†–ú–´:");
            Debug.Log($"  ‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {Application.platform}");
            Debug.Log($"  ‚Ä¢ iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {Application.platform == RuntimePlatform.IPhonePlayer}");
            Debug.Log($"  ‚Ä¢ –ú–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {SystemInfo.deviceModel}");
            Debug.Log($"  ‚Ä¢ –û–°: {SystemInfo.operatingSystem}");
            Debug.Log($"  ‚Ä¢ GPU: {SystemInfo.graphicsDeviceName}");
            Debug.Log($"  ‚Ä¢ –ü–∞–º—è—Ç—å GPU: {SystemInfo.graphicsMemorySize}MB");
            Debug.Log($"  ‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å: {SystemInfo.systemMemorySize}MB");
      }

      /// <summary>
      /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —à–µ–π–¥–µ—Ä–æ–≤
      /// </summary>
      private void CheckShaders()
      {
            Debug.Log("üé® –ü–†–û–í–ï–†–ö–ê –®–ï–ô–î–ï–†–û–í:");

            string[] requiredShaders = new string[]
            {
            "Custom/WallPaint",
            "Universal Render Pipeline/Lit",
            "Universal Render Pipeline/Unlit",
            "Unlit/Transparent",
            "Unlit/Color",
            "Sprites/Default",
            "Hidden/InternalErrorShader"
            };

            foreach (string shaderName in requiredShaders)
            {
                  Shader shader = Shader.Find(shaderName);
                  bool found = shader != null;
                  string status = found ? "‚úÖ" : "‚ùå";
                  Debug.Log($"  {status} {shaderName}: {(found ? "–ù–∞–π–¥–µ–Ω" : "–ù–ï –ù–ê–ô–î–ï–ù")}");
            }
      }

      /// <summary>
      /// –ü—Ä–æ–≤–µ—Ä–∫–∞ ML –º–æ–¥–µ–ª–µ–π
      /// </summary>
      private void CheckMLModels()
      {
            Debug.Log("ü§ñ –ü–†–û–í–ï–†–ö–ê ML –ú–û–î–ï–õ–ï–ô:");

            string streamingAssetsPath = Application.streamingAssetsPath;
            Debug.Log($"  ‚Ä¢ StreamingAssets –ø—É—Ç—å: {streamingAssetsPath}");

            string[] modelFiles = new string[]
            {
            "segformer-model.sentis",
            "model.sentis",
            "model.onnx"
            };

            foreach (string modelFile in modelFiles)
            {
                  string fullPath = Path.Combine(streamingAssetsPath, modelFile);
                  bool exists = File.Exists(fullPath);
                  string status = exists ? "‚úÖ" : "‚ùå";

                  if (exists)
                  {
                        try
                        {
                              FileInfo fileInfo = new FileInfo(fullPath);
                              Debug.Log($"  {status} {modelFile}: –ù–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä {fileInfo.Length / 1024 / 1024}MB");
                        }
                        catch (System.Exception e)
                        {
                              Debug.Log($"  ‚ö†Ô∏è {modelFile}: –ù–∞–π–¥–µ–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {e.Message}");
                        }
                  }
                  else
                  {
                        Debug.Log($"  {status} {modelFile}: –ù–ï –ù–ê–ô–î–ï–ù");
                  }
            }
      }

      /// <summary>
      /// –ü—Ä–æ–≤–µ—Ä–∫–∞ AR —Å–∏—Å—Ç–µ–º—ã
      /// </summary>
      private IEnumerator CheckARSystem()
      {
            Debug.Log("üì° –ü–†–û–í–ï–†–ö–ê AR –°–ò–°–¢–ï–ú–´:");

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ AR –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            ARSession arSession = FindObjectOfType<ARSession>();
            XROrigin sessionOrigin = FindObjectOfType<XROrigin>();
            ARCameraManager arCameraManager = FindObjectOfType<ARCameraManager>();
            ARPlaneManager arPlaneManager = FindObjectOfType<ARPlaneManager>();

            Debug.Log($"  ‚Ä¢ ARSession: {(arSession != null ? "‚úÖ –ù–∞–π–¥–µ–Ω" : "‚ùå –ù–ï –ù–ê–ô–î–ï–ù")}");
            Debug.Log($"  ‚Ä¢ ARSessionOrigin: {(sessionOrigin != null ? "‚úÖ –ù–∞–π–¥–µ–Ω" : "‚ùå –ù–ï –ù–ê–ô–î–ï–ù")}");
            Debug.Log($"  ‚Ä¢ ARCameraManager: {(arCameraManager != null ? "‚úÖ –ù–∞–π–¥–µ–Ω" : "‚ùå –ù–ï –ù–ê–ô–î–ï–ù")}");
            Debug.Log($"  ‚Ä¢ ARPlaneManager: {(arPlaneManager != null ? "‚úÖ –ù–∞–π–¥–µ–Ω" : "‚ùå –ù–ï –ù–ê–ô–î–ï–ù")}");

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è AR —Å–µ—Å—Å–∏–∏
            if (arSession != null)
            {
                  Debug.Log($"  ‚Ä¢ AR Session —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {ARSession.state}");

                  // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                  yield return new WaitForSeconds(2f);

                  Debug.Log($"  ‚Ä¢ AR Session —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è): {ARSession.state}");
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–º–µ—Ä—ã
            if (arCameraManager != null)
            {
                  Debug.Log($"  ‚Ä¢ AR Camera enabled: {arCameraManager.enabled}");
                  Debug.Log($"  ‚Ä¢ AR Camera currentConfiguration: {arCameraManager.currentConfiguration}");
            }
      }

      /// <summary>
      /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
      /// </summary>
      private void CheckMemory()
      {
            Debug.Log("üíæ –ü–†–û–í–ï–†–ö–ê –ü–ê–ú–Ø–¢–ò:");

            long totalMemory = System.GC.GetTotalMemory(false);
            float totalMemoryMB = totalMemory / 1024f / 1024f;

            Debug.Log($"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ GC: {totalMemoryMB:F1}MB");
            Debug.Log($"  ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å: {SystemInfo.systemMemorySize}MB");
            Debug.Log($"  ‚Ä¢ –í–∏–¥–µ–æ–ø–∞–º—è—Ç—å: {SystemInfo.graphicsMemorySize}MB");

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
            long memoryBefore = System.GC.GetTotalMemory(false);
            System.GC.Collect();
            long memoryAfter = System.GC.GetTotalMemory(true);
            float freedMB = (memoryBefore - memoryAfter) / 1024f / 1024f;

            Debug.Log($"  ‚Ä¢ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ —Å–±–æ—Ä–∫–æ–π –º—É—Å–æ—Ä–∞: {freedMB:F1}MB");
      }

      /// <summary>
      /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å—Ü–µ–Ω—ã
      /// </summary>
      private void CheckSceneComponents()
      {
            Debug.Log("üß© –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –°–¶–ï–ù–´:");

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ WallSegmentation
            WallSegmentation wallSegmentation = FindObjectOfType<WallSegmentation>();
            if (wallSegmentation != null)
            {
                  Debug.Log($"  ‚úÖ WallSegmentation –Ω–∞–π–¥–µ–Ω");
                  Debug.Log($"    ‚Ä¢ –ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {wallSegmentation.IsModelInitialized}");
                  Debug.Log($"    ‚Ä¢ –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏: {wallSegmentation.modelPath}");
                  Debug.Log($"    ‚Ä¢ –ë—ç–∫–µ–Ω–¥: {wallSegmentation.selectedBackend}");
            }
            else
            {
                  Debug.Log($"  ‚ùå WallSegmentation –ù–ï –ù–ê–ô–î–ï–ù");
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ ARWallPaintingSystem
            ARWallPaintingSystem wallPaintingSystem = FindObjectOfType<ARWallPaintingSystem>();
            Debug.Log($"  ‚Ä¢ ARWallPaintingSystem: {(wallPaintingSystem != null ? "‚úÖ –ù–∞–π–¥–µ–Ω" : "‚ùå –ù–ï –ù–ê–ô–î–ï–ù")}");

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ ARManagerInitializer2
            ARManagerInitializer2 arManagerInitializer = FindObjectOfType<ARManagerInitializer2>();
            Debug.Log($"  ‚Ä¢ ARManagerInitializer2: {(arManagerInitializer != null ? "‚úÖ –ù–∞–π–¥–µ–Ω" : "‚ùå –ù–ï –ù–ê–ô–î–ï–ù")}");

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–º–µ—Ä
            Camera[] cameras = FindObjectsOfType<Camera>();
            Debug.Log($"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–µ—Ä –≤ —Å—Ü–µ–Ω–µ: {cameras.Length}");

            foreach (Camera cam in cameras)
            {
                  Debug.Log($"    - {cam.name}: cullingMask={cam.cullingMask}, enabled={cam.enabled}");
            }
      }

      /// <summary>
      /// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
      /// </summary>
      private IEnumerator PeriodicDiagnostics()
      {
            yield return new WaitForSeconds(diagnosticInterval);

            while (true)
            {
                  Debug.Log("üîÑ –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê:");

                  // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                  CheckMemory();

                  WallSegmentation wallSegmentation = FindObjectOfType<WallSegmentation>();
                  if (wallSegmentation != null)
                  {
                        Debug.Log($"  ‚Ä¢ WallSegmentation –º–æ–¥–µ–ª—å: {(wallSegmentation.IsModelInitialized ? "‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞" : "‚ùå –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")}");
                  }

                  Debug.Log($"  ‚Ä¢ AR Session: {ARSession.state}");

                  yield return new WaitForSeconds(diagnosticInterval);
            }
      }

      /// <summary>
      /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
      /// </summary>
      [ContextMenu("–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞")]
      public void TestMaterialCreation()
      {
            Debug.Log("üß™ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ú–ê–¢–ï–†–ò–ê–õ–ê:");

            string[] shaderNames = new string[]
            {
            "Custom/WallPaint",
            "Universal Render Pipeline/Lit",
            "Universal Render Pipeline/Unlit",
            "Unlit/Transparent"
            };

            foreach (string shaderName in shaderNames)
            {
                  try
                  {
                        Shader shader = Shader.Find(shaderName);
                        if (shader != null)
                        {
                              Material testMaterial = new Material(shader);
                              Debug.Log($"  ‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å —à–µ–π–¥–µ—Ä–æ–º: {shaderName}");

                              // –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
                              if (testMaterial.HasProperty("_Color"))
                                    testMaterial.SetColor("_Color", Color.red);
                              if (testMaterial.HasProperty("_BaseColor"))
                                    testMaterial.SetColor("_BaseColor", Color.red);
                              if (testMaterial.HasProperty("_PaintColor"))
                                    testMaterial.SetColor("_PaintColor", Color.red);

                              DestroyImmediate(testMaterial);
                        }
                        else
                        {
                              Debug.Log($"  ‚ùå –®–µ–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {shaderName}");
                        }
                  }
                  catch (System.Exception e)
                  {
                        Debug.LogError($"  üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å —à–µ–π–¥–µ—Ä–æ–º {shaderName}: {e.Message}");
                  }
            }
      }
}