using UnityEngine;
using UnityEngine.XR.ARFoundation;
using Unity.XR.CoreUtils;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.XR.ARSubsystems;
using UnityEngine.Rendering.Universal;
using System;

/// <summary>
/// –ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ARManagerInitializer –≤ —Å—Ü–µ–Ω—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
/// –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç—è–º–∏ AR –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
/// </summary>
[DefaultExecutionOrder(-10)]
public class ARManagerInitializer2 : MonoBehaviour
{
    // –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    public static ARManagerInitializer2 Instance { get; private set; }

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
    private static int planeInstanceCounter = 0;

    // –°—Å—ã–ª–∫–∏ –Ω–∞ AR –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    [Header("AR –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")]
    public ARSessionManager sessionManager;
    public ARPlaneManager planeManager;
    public XROrigin xrOrigin;
    [SerializeField] private ARPlaneConfigurator planeConfigurator; // Added reference to ARPlaneConfigurator

    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")]
    [Tooltip("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –≤–º–µ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –º–∞—Å–∫–∏")]
    public bool useDetectedPlanes = false;

    [Tooltip("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (–≤ –º–µ—Ç—Ä–∞—Ö)")]
    [SerializeField] private float minPlaneSizeInMeters = 0.1f;

    [Tooltip("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö (—à–∏—Ä–∏–Ω–∞ –ò –≤—ã—Å–æ—Ç–∞) –¥–ª—è –µ—ë —É—á–µ—Ç–∞")]
    [SerializeField] private int minPixelsDimensionForArea = 2; // –±—ã–ª–æ minAreaSize

    [Tooltip("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –æ–±–ª–∞—Å—Ç–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö –¥–ª—è –µ—ë —É—á–µ—Ç–∞")]
    [SerializeField] private int minAreaSizeInPixels = 10; // –ù–æ–≤–æ–µ –ø–æ–ª–µ, —Ä–∞–Ω—å—à–µ –±—ã–ª–æ minAreaSize = 2*2=4 –∏–ª–∏ 50

    [Tooltip("–ü–æ—Ä–æ–≥ –∑–Ω–∞—á–µ–Ω–∏—è –∫—Ä–∞—Å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (0-255) –¥–ª—è –ø–∏–∫—Å–µ–ª—è, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å –µ–≥–æ —á–∞—Å—Ç—å—é –æ–±–ª–∞—Å—Ç–∏ —Å—Ç–µ–Ω—ã –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–≤—è–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π.")]
    [Range(0, 255)] public byte wallAreaRedChannelThreshold = 30;

    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –†–µ–π–∫–∞—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –ü–ª–æ—Å–∫–æ—Å—Ç–µ–π")]
    [Tooltip("–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–π–∫–∞—Å—Ç–∏–Ω–≥–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–π.")]
    [SerializeField] private bool enableDetailedRaycastLogging = true; // –í–†–ï–ú–ï–ù–ù–û –í–ö–õ–Æ–ß–ï–ù–û –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    [Tooltip("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–π–∫–∞—Å—Ç–æ–≤ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π")]
    [SerializeField] private float maxRayDistance = 10.0f; // –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    [Tooltip("–ú–∞—Å–∫–∞ —Å–ª–æ–µ–≤ –¥–ª—è —Ä–µ–π–∫–∞—Å—Ç–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Default, SimulatedEnvironment, Wall)")]
    [SerializeField] private LayerMask hitLayerMask = (1 << 0) | (1 << 8) | (1 << 30) | (1 << 31); // Default + SimulatedEnvironment + XR Simulation + Layer31 (LivingRoom)
    [Tooltip("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω—ã–º (–º). –ü–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è '–≤–Ω—É—Ç—Ä—å' –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.")]
    [SerializeField] private float minHitDistanceThreshold = 0.1f;
    [Tooltip("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏ —Å—Ç–µ–Ω—ã –æ—Ç –∏–¥–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö). –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å—Ç–µ–Ω–æ–π.")]
    [SerializeField] private float maxWallNormalAngleDeviation = 15f;
    [Tooltip("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —É–≥–æ–ª –Ω–æ—Ä–º–∞–ª–∏ –ø–æ–ª–∞/–ø–æ—Ç–æ–ª–∫–∞ –∫ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö), —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π. –ù–∞–ø—Ä–∏–º–µ—Ä, 15 –≥—Ä–∞–¥—É—Å–æ–≤ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Å –Ω–∞–∫–ª–æ–Ω–æ–º –¥–æ 15 –≥—Ä–∞–¥—É—Å–æ–≤ –æ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø–æ–ª–æ–º/–ø–æ—Ç–æ–ª–∫–æ–º.")]
    [SerializeField] private float minFloorNormalAngleWithVertical = 75f; // 90¬∞ –º–∏–Ω—É—Å –¥–æ–ø—É—Å—Ç–∏–º—ã–π –Ω–∞–∫–ª–æ–Ω –ø–æ–ª–∞
    [Tooltip("–°–ª–æ–π, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏")]
    [SerializeField] private string planesLayerName = "ARPlanes"; // –°–ª–æ–π –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
    [Tooltip("–ò–º–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Ä–µ–π–∫–∞—Å—Ç–∏–Ω–≥–µ (—Ä–∞–∑–¥–µ–ª–µ–Ω—ã –∑–∞–ø—è—Ç—ã–º–∏)")]
    [SerializeField] private string ignoreObjectNames = ""; // –û–±—ä–µ–∫—Ç—ã –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è

    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π")]
    [SerializeField] private bool usePersistentPlanes = true; // Whether to use the persistent plane system
    [SerializeField] private bool highlightPersistentPlanes = true; // Whether to highlight persistent planes with different color
    [SerializeField] private Color persistentPlaneColor = new Color(0.0f, 0.8f, 0.2f, 0.7f); // Default color for persistent planes

    // Dictionary to track which of our generated planes are persistent
    private Dictionary<GameObject, bool> persistentGeneratedPlanes = new Dictionary<GameObject, bool>();

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
    private Dictionary<GameObject, float> planeCreationTimes = new Dictionary<GameObject, float>();
    private Dictionary<GameObject, float> planeLastVisitedTime = new Dictionary<GameObject, float>();

    [Tooltip("–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π")]
    [SerializeField] private Material verticalPlaneMaterial; // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å private

    [Tooltip("–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π")]
    [SerializeField] private Material horizontalPlaneMaterial; // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å private

    [Header("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –õ—É—á–µ–π")]
    [Tooltip("–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ª—É—á–µ–π. –ï—Å–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ª—É—á–µ–π LineRenderer'–æ–º –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞.")]
    [SerializeField] private Material debugRayMaterial;
    private MaterialPropertyBlock debugRayMaterialPropertyBlock;

    // –ü–æ–ª–µ –¥–ª—è RawImage –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑–≤–Ω–µ
    private UnityEngine.UI.RawImage –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–ú–∞—Å–∫–∏UI;

    // –¢–µ–∫—É—â–∞—è –º–∞—Å–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    private RenderTexture currentSegmentationMask;
    private bool maskUpdated = false;
    private List<GameObject> generatedPlanes = new List<GameObject>();

    // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
    private int lastPlaneCount = 0;

    // –°—á–µ—Ç—á–∏–∫ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
    private int frameCounter = 0;

    // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    private bool hadValidSegmentationResult = false;
    private float lastSuccessfulSegmentationTime = 0f;
    private float segmentationTimeoutSeconds = 10f; // –¢–∞–π–º-–∞—É—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "–ø–æ—Ç–µ—Ä–∏" —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏

    // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è InstanceID TrackablesParent –∏–∑ Start()
    private int trackablesParentInstanceID_FromStart = 0;

    [Header("üîç Debug Settings")]
    [SerializeField] private bool enableWallAreaDetectionLogging = true;
    [SerializeField] private bool enableSceneObjectsDiagnostics = true; // –ù–û–í–û–ï: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ü–µ–Ω—ã –∏ –∫–æ–ª–ª–∞–π–¥–µ—Ä–æ–≤

    // [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)] // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–¢–¨ –∏–ª–∏ –£–î–ê–õ–ò–¢–¨
    // private static void Initialize()
    // {
    //     GameObject initializer = new GameObject("AR Manager Initializer 2");
    //     ARManagerInitializer2 component = initializer.AddComponent<ARManagerInitializer2>();
    //     component.useDetectedPlanes = false;
    //     DontDestroyOnLoad(initializer);
    //     Debug.Log("[ARManagerInitializer2] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    // }

    private void Awake()
    {
        // Debug.Log("[ARManagerInitializer2] Awake() called.");
        if (Instance == null)
        {
            Instance = this;
            // Debug.Log("[ARManagerInitializer2] Instance set.");
            if (transform.parent == null) // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–±—ä–µ–∫—Ç –∫–æ—Ä–Ω–µ–≤–æ–π –ø–µ—Ä–µ–¥ DontDestroyOnLoad
            {
                // Debug.Log("[ARManagerInitializer2] Making it DontDestroyOnLoad as it's a root object.");
                DontDestroyOnLoad(gameObject);
            }
            else
            {
                // Debug.LogWarning("[ARManagerInitializer2] Instance is not a root object, not setting DontDestroyOnLoad. This might be an issue if it's destroyed on scene changes.");
            }
            enableDetailedRaycastLogging = true; // –í–ö–õ–Æ–ß–ï–ù–û –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
        }
        else if (Instance != this)
        {
            // Debug.LogWarning("[ARManagerInitializer2] Another instance already exists. Destroying this one.");
            Destroy(gameObject);
            return;
        }

        if (debugRayMaterial != null)
        {
            debugRayMaterialPropertyBlock = new MaterialPropertyBlock();
        }
        
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ü–µ–Ω—ã –∏ –∫–æ–ª–ª–∞–π–¥–µ—Ä–æ–≤
        if (enableSceneObjectsDiagnostics)
        {
            DiagnoseSceneObjects();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ —Å–ª—É—á–∞–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤
            StartCoroutine(DelayedColliderCheck());
        }
        
        // Debug.Log($"[ARManagerInitializer2] Awake complete. Instance ID: {this.GetInstanceID()}, Name: {this.gameObject.name}");

        // Find ARPlaneConfigurator if not assigned
        if (planeConfigurator == null)
        {
            planeConfigurator = FindObjectOfType<ARPlaneConfigurator>();
        }
    }

    private void Start()
    {
        // Debug.Log("[ARManagerInitializer2] Start() called.");

        FindARComponents();

        // Ensure we have reference to ARPlaneConfigurator
        if (planeConfigurator == null)
        {
            planeConfigurator = FindObjectOfType<ARPlaneConfigurator>();
            if (planeConfigurator == null && usePersistentPlanes)
            {
                Debug.LogWarning("[ARManagerInitializer2] ARPlaneConfigurator not found but usePersistentPlanes=true. Persistence won't work correctly.");
            }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        InitializePersistentPlanesSystem();

        SubscribeToWallSegmentation();

        // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª—é—á–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ARPlaneManager, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        if (planeManager != null && useDetectedPlanes)
        {
            // Debug.LogWarning("[ARManagerInitializer2] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª—é—á–∏—Ç—å ARPlaneManager.");
            // planeManager.enabled = false;
            // if (!planeManager.enabled)
            // {
            //     Debug.Log("[ARManagerInitializer2] ARPlaneManager —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.");
            // }
            // else
            // {
            //     Debug.LogWarning("[ARManagerInitializer2] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å ARPlaneManager.");
            // }
        }
        else if (planeManager == null && useDetectedPlanes)
        {
            // Debug.LogWarning("[ARManagerInitializer2] planeManager –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω, –Ω–æ useDetectedPlanes=true. –ù–µ—á–µ–≥–æ –æ—Ç–∫–ª—é—á–∞—Ç—å.");
        }


        // Debug.Log($"[ARManagerInitializer2] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: useDetectedPlanes={useDetectedPlanes}");

        if (xrOrigin != null && xrOrigin.TrackablesParent != null)
        {
            trackablesParentInstanceID_FromStart = xrOrigin.TrackablesParent.GetInstanceID();
            // Debug.Log($"[ARManagerInitializer2-Start] TrackablesParent is: {xrOrigin.TrackablesParent.name}, ID: {trackablesParentInstanceID_FromStart}, Path: {GetGameObjectPath(xrOrigin.TrackablesParent)}");
        }
        else
        {
            Debug.LogError("[ARManagerInitializer2-Start] XROrigin or XROrigin.TrackablesParent is not assigned!");
        }
        // CreateBasicPlaneInFrontOfUser();
    }

    public void –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–ú–∞—Å–∫–∏UI(UnityEngine.UI.RawImage rawImage–î–ª—è–£—Å—Ç–∞–Ω–æ–≤–∫–∏)
    {
        if (rawImage–î–ª—è–£—Å—Ç–∞–Ω–æ–≤–∫–∏ != null)
        {
            –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–ú–∞—Å–∫–∏UI = rawImage–î–ª—è–£—Å—Ç–∞–Ω–æ–≤–∫–∏;
            // Debug.Log("[ARManagerInitializer2] –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω RawImage –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Å–∫–∏ —á–µ—Ä–µ–∑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–ú–∞—Å–∫–∏UI.");
            if (currentSegmentationMask != null && –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–ú–∞—Å–∫–∏UI.texture == null)
            {
                // Debug.Log("[ARManagerInitializer2] –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –º–∞—Å–∫–∏ –∫ –Ω–æ–≤–æ–º—É RawImage.");
                –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–ú–∞—Å–∫–∏UI.texture = currentSegmentationMask;
                –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–ú–∞—Å–∫–∏UI.gameObject.SetActive(true);
            }
        }
        else
        {
            // Debug.LogWarning("[ARManagerInitializer2] –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å null RawImage –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Å–∫–∏.");
        }
    }

    private void Update()
    {
        frameCounter++;

        if (maskUpdated)
        {
            ProcessSegmentationMask();
            maskUpdated = false;
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        UpdateGestureInput();

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º–∏
        if (usePersistentPlanes && frameCounter % 30 == 0) // –£–≤–µ–ª–∏—á–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∫–∞–∂–¥—ã–µ ~0.5 —Å–µ–∫)
        {
            MakeStablePlanesPersistent();
        }

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ (–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥)
        if (usePersistentPlanes && frameCounter % 300 == 0)
        {
            CleanupProblematicPersistentPlanes();
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç—Ä–µ–∫–∞–±–ª–∞–º XROrigin)
        // UpdatePlanePositions(); // –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ, —Ç.–∫. –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ TrackablesParent

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è "–∑–∞–≤–∏—Å–ª–∞"
        if (hadValidSegmentationResult && Time.time - lastSuccessfulSegmentationTime > segmentationTimeoutSeconds)
        {
            // Debug.LogWarning($"[ARManagerInitializer2] –ù–µ—Ç —É—Å–ø–µ—à–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –±–æ–ª–µ–µ {segmentationTimeoutSeconds} —Å–µ–∫—É–Ω–¥. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ.");
            // ResetAllPlanes(); // –û—á–∏—â–∞–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –µ—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞
            hadValidSegmentationResult = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å–±—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
            // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ —Å–∞–º WallSegmentation
        }


        // –û—Ç–ª–∞–¥–∫–∞: –í—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏–π
        // if (frameCounter % 120 == 0) // –ö–∞–∂–¥—ã–µ 120 –∫–∞–¥—Ä–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–∑ –≤ 2 —Å–µ–∫—É–Ω–¥—ã)
        // {
        //     if (generatedPlanes != null)
        //     {
        //          Debug.Log($"[ARManagerInitializer2] üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π: {generatedPlanes.Count}");
        //          for (int i = 0; i < generatedPlanes.Count; i++)
        //          {
        //              if (generatedPlanes[i] != null)
        //              {
        //                  Debug.Log($"[ARManagerInitializer2-DebugPlanePos] Plane {i} (ID: {generatedPlanes[i].GetInstanceID()}) world position: {generatedPlanes[i].transform.position:F2}, rotation: {generatedPlanes[i].transform.eulerAngles:F2}, parent: {(generatedPlanes[i].transform.parent != null ? generatedPlanes[i].transform.parent.name : "null")}");
        //              }
        //          }
        //     }

        //     if (xrOrigin != null && xrOrigin.TrackablesParent != null)
        //     {
        //         // Debug.Log($"[ARManagerInitializer2-TrackableCheck-Update] –ü—Ä–æ–≤–µ—Ä–∫–∞ TrackablesParent: {GetGameObjectPath(xrOrigin.TrackablesParent)} (ID: {xrOrigin.TrackablesParent.GetInstanceID()}). –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {xrOrigin.TrackablesParent.childCount}");
        //         for (int i = 0; i < xrOrigin.TrackablesParent.childCount; i++)
        //         {
        //             Transform child = xrOrigin.TrackablesParent.GetChild(i);
        //             bool isOurPlane = false;
        //             foreach (var plane in generatedPlanes)
        //             {
        //                 if (plane != null && plane.transform == child)
        //                 {
        //                     isOurPlane = true;
        //                     break;
        //                 }
        //             }
        //             // if (child.name.StartsWith("MyARPlane_Debug_")) {
        //             //     Debug.Log($"[ARManagerInitializer2-TrackableCheck-Update] Child of Trackables: {child.name}, ID: {child.GetInstanceID()}, Path: {GetGameObjectPath(child)}");
        //             //     if (!isOurPlane) Debug.LogWarning($"[ARManagerInitializer2-TrackableCheck-Update] –í–ù–ò–ú–ê–ù–ò–ï! –ù–∞–π–¥–µ–Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç—å '{child.name}' (ID: {child.GetInstanceID()}) –ø–æ–¥ TrackablesParent ({GetGameObjectPath(xrOrigin.TrackablesParent)}) –Ω–æ –µ–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ generatedPlanes!");
        //             // }
        //         }
        //     }
        //     else
        //     {
        //         // Debug.LogError("[ARManagerInitializer2-Update] XROrigin or TrackablesParent is null in Update.");
        //     }
        // }
    }


    // –ü–æ–∏—Å–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Å—Ü–µ–Ω–µ
    private void FindARComponents()
    {
        if (sessionManager == null)
        {
            // Debug.Log("[ARManagerInitializer2] –ü–æ–ª–µ sessionManager –±—ã–ª–æ null. –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ ARSessionManager –≤ —Å—Ü–µ–Ω–µ (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã)...");
            sessionManager = FindObjectOfType<ARSessionManager>(true); // –ò—â–µ–º –≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
            if (sessionManager != null)
            {
                // Debug.Log($"[ARManagerInitializer2] ‚úÖ ARSessionManager —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω: {sessionManager.gameObject.name} (ID: {sessionManager.gameObject.GetInstanceID()}), –∞–∫—Ç–∏–≤–µ–Ω: {sessionManager.gameObject.activeInHierarchy}");
            }
            else
            {
                Debug.LogError("[ARManagerInitializer2] ‚ùå ARSessionManager –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ü–µ–Ω–µ!");
            }
        }
        // else
        // {
        // Debug.Log($"[ARManagerInitializer2] –ü–æ–ª–µ sessionManager —É–∂–µ –±—ã–ª–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ: {sessionManager.gameObject.name} (ID: {sessionManager.gameObject.GetInstanceID()}), –∞–∫—Ç–∏–≤–µ–Ω: {sessionManager.gameObject.activeInHierarchy}");
        // }

        if (xrOrigin == null)
        {
            // Debug.Log("[ARManagerInitializer2] –ü–æ–ª–µ xrOrigin –±—ã–ª–æ null. –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ XROrigin –≤ —Å—Ü–µ–Ω–µ (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã)...");
            xrOrigin = FindObjectOfType<XROrigin>(true);
            if (xrOrigin != null)
            {
                // Debug.Log($"[ARManagerInitializer2] ‚úÖ XROrigin —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω: {xrOrigin.gameObject.name} (ID: {xrOrigin.gameObject.GetInstanceID()}), –∞–∫—Ç–∏–≤–µ–Ω: {xrOrigin.gameObject.activeInHierarchy}");
            }
            else
            {
                Debug.LogError("[ARManagerInitializer2] ‚ùå XROrigin –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ü–µ–Ω–µ!");
            }
        }

        if (planeManager == null && xrOrigin != null)
        {
            // Debug.Log("[ARManagerInitializer2] –ü–æ–ª–µ planeManager –±—ã–ª–æ null. –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ ARPlaneManager –Ω–∞ XROrigin...");
            planeManager = xrOrigin.GetComponent<ARPlaneManager>();
            if (planeManager != null)
            {
                // Debug.Log($"[ARManagerInitializer2] ‚úÖ ARPlaneManager —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω –Ω–∞ XROrigin: {planeManager.gameObject.name} (ID: {planeManager.gameObject.GetInstanceID()}), –∞–∫—Ç–∏–≤–µ–Ω: {planeManager.gameObject.activeInHierarchy}, enabled: {planeManager.enabled}");
                // planeManager.planesChanged += OnPlanesChanged; // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
                // Debug.Log("[ARManagerInitializer2] –ü–æ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ —Å–æ–±—ã—Ç–∏—è planesChanged");
            }
            else
            {
                // Debug.LogWarning("[ARManagerInitializer2] ARPlaneManager –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ XROrigin. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.");
            }
        }
        InitializeMaterials();
    }

    private void InitializeMaterials()
    {
        if (verticalPlaneMaterial == null)
        {
            // Debug.LogWarning("[ARManagerInitializer2] –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π (verticalPlaneMaterial) –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.");
            verticalPlaneMaterial = new Material(Shader.Find("Universal Render Pipeline/Lit"));
            verticalPlaneMaterial.color = new Color(1.0f, 0.5f, 0.0f, 0.5f); // –û—Ä–∞–Ω–∂–µ–≤—ã–π –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
            // Debug.Log("[ARManagerInitializer2] –°–æ–∑–¥–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π");
        }
        else
        {
            // Debug.Log("[ARManagerInitializer2] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π.");
        }

        if (horizontalPlaneMaterial == null)
        {
            // Debug.LogWarning("[ARManagerInitializer2] –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π (horizontalPlaneMaterial) –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.");
            horizontalPlaneMaterial = new Material(Shader.Find("Universal Render Pipeline/Lit"));
            horizontalPlaneMaterial.color = new Color(0.0f, 1.0f, 0.5f, 0.5f); // –ó–µ–ª–µ–Ω—ã–π –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
            // Debug.Log("[ARManagerInitializer2] –°–æ–∑–¥–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π");
        }
        else
        {
            // Debug.Log("[ARManagerInitializer2] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π.");
        }
    }


    private void SubscribeToWallSegmentation()
    {
        // Debug.Log("[ARManagerInitializer2] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è WallSegmentation...");
        WallSegmentation wallSegmentationInstance = FindObjectOfType<WallSegmentation>();
        if (wallSegmentationInstance != null)
        {
            // Debug.Log($"[ARManagerInitializer2] –ù–∞–π–¥–µ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä WallSegmentation: {wallSegmentationInstance.gameObject.name}. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ OnSegmentationMaskUpdated.");
            wallSegmentationInstance.OnSegmentationMaskUpdated -= OnSegmentationMaskUpdated; // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            wallSegmentationInstance.OnSegmentationMaskUpdated += OnSegmentationMaskUpdated; // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
            // Debug.Log("[ARManagerInitializer2] ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è OnSegmentationMaskUpdated –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞");
        }
        else
        {
            Debug.LogError("[ARManagerInitializer2] ‚ùå –≠–∫–∑–µ–º–ø–ª—è—Ä WallSegmentation –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ü–µ–Ω–µ. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Å–∫–∏.");
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
            StartCoroutine(RetrySubscriptionAfterDelay(1.0f));
        }
    }

    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
    private IEnumerator RetrySubscriptionAfterDelay(float delay)
    {
        yield return new WaitForSeconds(delay);
        SubscribeToWallSegmentation();
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
    private void OnPlanesChanged(ARPlanesChangedEventArgs args)
    {
        foreach (ARPlane plane in args.added)
        {
            ConfigurePlane(plane);
        }

        foreach (ARPlane plane in args.updated)
        {
            UpdatePlane(plane);
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
    private void ConfigurePlane(ARPlane plane)
    {
        if (plane == null) return;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏ —ç—Ç–æ –ø–ª–æ—Å–∫–æ—Å—Ç—å
        bool isVertical = plane.alignment == PlaneAlignment.Vertical;

        // –ù–∞–∑–Ω–∞—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        MeshRenderer renderer = plane.GetComponent<MeshRenderer>();
        if (renderer != null)
        {
            // –í—ã–±–∏—Ä–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            Material material = isVertical ? verticalPlaneMaterial : horizontalPlaneMaterial;

            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            renderer.material = new Material(material);

            // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –º–∞—Å–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ —ç—Ç–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–µ
            if (isVertical && currentSegmentationMask != null)
            {
                renderer.material.SetTexture("_SegmentationMask", currentSegmentationMask);
                renderer.material.EnableKeyword("USE_MASK");
            }

            // Debug.Log($"[ARManagerInitializer2] –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å: {plane.trackableId}, —Ç–∏–ø: {(isVertical ? "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è" : "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è")}");
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
    private void UpdatePlane(ARPlane plane)
    {
        if (plane == null) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –µ—Å–ª–∏ —ç—Ç–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å
        if (plane.alignment == PlaneAlignment.Vertical)
        {
            MeshRenderer renderer = plane.GetComponent<MeshRenderer>();
            if (renderer != null && renderer.material != null && currentSegmentationMask != null)
            {
                renderer.material.SetTexture("_SegmentationMask", currentSegmentationMask);
                renderer.material.EnableKeyword("USE_MASK");
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    private void OnSegmentationMaskUpdated(RenderTexture mask)
    {
        if (mask == null)
        {
            // Debug.LogWarning("[ARManagerInitializer2] –ü–æ–ª—É—á–µ–Ω–∞ null –º–∞—Å–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.");
            return;
        }

        // Debug.Log($"[ARManagerInitializer2] –ú–∞—Å–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {mask.width}x{mask.height}");
        currentSegmentationMask = mask;
        maskUpdated = true;
        hadValidSegmentationResult = true;
        lastSuccessfulSegmentationTime = Time.time;

        if (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–ú–∞—Å–∫–∏UI != null)
        {
            –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–ú–∞—Å–∫–∏UI.texture = currentSegmentationMask;
            –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–ú–∞—Å–∫–∏UI.gameObject.SetActive(true); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ RawImage –∞–∫—Ç–∏–≤–µ–Ω
            // Debug.Log("[ARManagerInitializer2] –¢–µ–∫—Å—Ç—É—Ä–∞ RawImage –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –º–∞—Å–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.");
        }
        else
        {
            // Debug.LogWarning("[ARManagerInitializer2] –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–ú–∞—Å–∫–∏UI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –Ω–µ–∫—É–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—å –º–∞—Å–∫—É.");
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
    private void ProcessSegmentationMask()
    {
        if (currentSegmentationMask == null)
        {
            // Debug.LogWarning("[ARManagerInitializer2] –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ null –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.");
            return;
        }

        // Debug.Log($"[ARManagerInitializer2] –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ {currentSegmentationMask.width}x{currentSegmentationMask.height}");

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RenderTexture –≤ Texture2D –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∏–∫—Å–µ–ª–µ–π
        // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –¥–µ–ª–∞—Ç—å –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä.
        // –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞–Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º–æ–π.
        Texture2D maskTexture = RenderTextureToTexture2D(currentSegmentationMask);

        if (maskTexture != null)
        {
            CreatePlanesFromMask(maskTexture);
            Destroy(maskTexture); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å Texture2D
        }
        else
        {
            // Debug.LogError("[ARManagerInitializer2] –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å RenderTexture –≤ Texture2D.");
        }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ RenderTexture –≤ Texture2D –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    private Texture2D RenderTextureToTexture2D(RenderTexture renderTexture)
    {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É
        Texture2D texture = new Texture2D(renderTexture.width, renderTexture.height, TextureFormat.RGBA32, false);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π RenderTexture
        RenderTexture currentRT = RenderTexture.active;

        try
        {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º renderTexture –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
            RenderTexture.active = renderTexture;

            // –°—á–∏—Ç—ã–≤–∞–µ–º –ø–∏–∫—Å–µ–ª–∏ –∏–∑ RenderTexture –≤ Texture2D
            texture.ReadPixels(new Rect(0, 0, renderTexture.width, renderTexture.height), 0, 0);
            texture.Apply();
        }
        catch (System.Exception e)
        {
            Debug.LogError($"[ARManagerInitializer2] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ RenderTexture –≤ Texture2D: {e.Message}");
            Destroy(texture);
            return null;
        }
        finally
        {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π RenderTexture
            RenderTexture.active = currentRT;
        }

        return texture;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    private void CreatePlanesFromMask(Texture2D maskTexture)
    {
        // Debug.Log($"[ARManagerInitializer2-CreatePlanesFromMask] –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –∏–∑ –º–∞—Å–∫–∏. –†–∞–∑–º–µ—Ä—ã –º–∞—Å–∫–∏: {maskTexture.width}x{maskTexture.height}");
        Color32[] textureData = maskTexture.GetPixels32();
        // Debug.Log($"[ARManagerInitializer2-CreatePlanesFromMask] –ü–æ–ª—É—á–µ–Ω–æ {textureData.Length} –ø–∏–∫—Å–µ–ª–µ–π –∏–∑ –º–∞—Å–∫–∏.");

        // if (textureData.Length == 0)
        // {
        //     Debug.LogWarning("[ARManagerInitializer2-CreatePlanesFromMask] –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –ø—É—Å—Ç—ã. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–ª–æ—Å–∫–æ—Å—Ç–∏.");
        //     return;
        // }

        // int activePixelCount = 0;
        // for (int i = 0; i < textureData.Length; i++)
        // {
        //     if (textureData[i].r > 10) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ "–∞–∫—Ç–∏–≤–Ω—ã—Ö" –ø–∏–∫—Å–µ–ª–µ–π
        //     {
        //         activePixelCount++;
        //     }
        // }
        // Debug.Log($"[ARManagerInitializer2-CreatePlanesFromMask] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π (r > 10) –≤ –º–∞—Å–∫–µ: {activePixelCount} –∏–∑ {textureData.Length}");


        List<Rect> wallAreas = FindWallAreas(textureData, maskTexture.width, maskTexture.height, wallAreaRedChannelThreshold);
        // Debug.Log($"[ARManagerInitializer2-CreatePlanesFromMask] –ù–∞–π–¥–µ–Ω–æ –æ–±–ª–∞—Å—Ç–µ–π (wallAreas.Count): {wallAreas.Count}");

        // –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è "–ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö" (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö) –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –≤ —ç—Ç–æ–º –∫–∞–¥—Ä–µ
        Dictionary<GameObject, bool> visitedPlanes = new Dictionary<GameObject, bool>();

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö (–∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö)
        // Debug.Log($"[ARManagerInitializer2-CreatePlanesFromMask] –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π ({generatedPlanes.Count}) –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö.");
        // CleanupOldPlanes(visitedPlanes); // –¢–µ–ø–µ—Ä—å –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ UpdateOrCreatePlaneForWallArea

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–ª–∞—Å—Ç–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É (–ø–ª–æ—â–∞–¥–∏), —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ
        // –≠—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –º—ã –æ–±–Ω–æ–≤–ª—è–µ–º/—Å–æ–∑–¥–∞–µ–º –¥–ª—è –≤—Å–µ—Ö, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–ª–∏ –ª–∏–º–∏—Ç–æ–≤
        var significantAreas = wallAreas
            .OrderByDescending(area => area.width * area.height)
            .ToList();

        // Debug.Log($"[ARManagerInitializer2-CreatePlanesFromMask] –ü–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {significantAreas.Count} –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è.");

        int planesCreatedThisFrame = 0;
        // float normalizedMinPlaneSize = minPlaneSizeInMeters * minPlaneSizeInMeters; // –ü–ª–æ—â–∞–¥—å –≤ –º–µ—Ç—Ä–∞—Ö
        float normalizedMinPlaneSize = (minPlaneSizeInMeters / (Camera.main.orthographic ? Camera.main.orthographicSize * 2f : Mathf.Tan(Camera.main.fieldOfView * Mathf.Deg2Rad / 2f) * 2f * 2f)); // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –º–µ—Ç—Ä–æ–≤ –≤ "–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä" –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ FOV
        normalizedMinPlaneSize *= normalizedMinPlaneSize; // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–ª–æ—â–∞–¥–∏

        foreach (Rect area in significantAreas)
        {
            float normalizedAreaSize = (area.width / (float)maskTexture.width) * (area.height / (float)maskTexture.height);
            // Debug.Log($"[ARManagerInitializer2-CreatePlanesFromMask] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–ª–∞—Å—Ç–∏: x={area.xMin}, y={area.yMin}, w={area.width}, h={area.height}, normSize={normalizedAreaSize:F4}");

            // if (normalizedAreaSize >= normalizedMinPlaneSize) // –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
            if (area.width * area.height >= minAreaSizeInPixels) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ–±–ª–∞—Å—Ç–µ–π
            {
                // –í–º–µ—Å—Ç–æ CreatePlaneForWallArea –≤—ã–∑—ã–≤–∞–µ–º UpdateOrCreatePlaneForWallArea
                if (UpdateOrCreatePlaneForWallArea(area, maskTexture.width, maskTexture.height, visitedPlanes))
                {
                    planesCreatedThisFrame++;
                }
                // Debug.Log($"[ARManagerInitializer2-CreatePlanesFromMask] ‚úÖ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ normSize={normalizedAreaSize:F4}. –°–æ–∑–¥–∞–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ —ç—Ç–æ–º –∫–∞–¥—Ä–µ: {planesCreatedThisFrame}. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞: {generatedPlanes.Count}");
            }
            else
            {
                // Debug.Log($"[ARManagerInitializer2-CreatePlanesFromMask] –û–±–ª–∞—Å—Ç—å (normSize={normalizedAreaSize:F4}) —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è >= {minAreaSizeInPixels} –ø–∏–∫—Å. –ø–ª–æ—â–∞–¥—å). –ü–ª–æ—Å–∫–æ—Å—Ç—å –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.");
            }
        }

        // –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ "–ø–æ—Å–µ—â–µ–Ω—ã" (—Ç.–µ. –¥–ª—è –Ω–∏—Ö –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ–¥—Ö–æ–¥—è—â–µ–π –æ–±–ª–∞—Å—Ç–∏ –≤ –Ω–æ–≤–æ–π –º–∞—Å–∫–µ)
        CleanupOldPlanes(visitedPlanes);

        // Debug.Log($"[ARManagerInitializer2-CreatePlanesFromMask] ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–æ–≤–ª–µ–Ω–æ/–°–æ–∑–¥–∞–Ω–æ {planesCreatedThisFrame} –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –∏–∑ {significantAreas.Count} —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π. –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π: {generatedPlanes.Count}");

        lastPlaneCount = generatedPlanes.Count;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω–∞—á–∏–Ω–∞—è —Å –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–∏–∫—Å–µ–ª—è
    private Rect FindConnectedArea(Color32[] pixels, int width, int height, int startX, int startY, bool[,] visited, byte threshold)
    {
        Debug.Log($"[ARManagerInitializer2-FindConnectedArea] IN START: StartX={startX}, StartY={startY}, Threshold={threshold}, PixelValue.R={pixels[startY * width + startX].r}, Visited={visited[startX, startY]}");

        if (startX < 0 || startX >= width || startY < 0 || startY >= height || visited[startX, startY] || pixels[startY * width + startX].r < threshold)
        {
            // Debug.LogWarning($"[ARManagerInitializer2-FindConnectedArea] INVALID START PARAMS or ALREADY VISITED/BELOW THRESHOLD. Returning Rect.zero. Visited={visited[startX, startY]}, Pixel.R={pixels[startY * width + startX].r}");
            return Rect.zero;
        }

        // –ì—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏
        int minX = startX;
        int maxX = startX;
        int minY = startY;
        int maxY = startY;

        Queue<Vector2Int> queue = new Queue<Vector2Int>();
        queue.Enqueue(new Vector2Int(startX, startY));
        visited[startX, startY] = true;
        // Debug.Log($"[ARManagerInitializer2-FindConnectedArea] Enqueued initial: ({startX},{startY}), visited set to true. Queue count: {queue.Count}");

        // –í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ (4 —Å–æ—Å–µ–¥–∞)
        Vector2Int[] directions = new Vector2Int[]
        {
            new Vector2Int(1, 0),  // –≤–ø—Ä–∞–≤–æ
            new Vector2Int(-1, 0), // –≤–ª–µ–≤–æ
            new Vector2Int(0, 1),  // –≤–Ω–∏–∑
            new Vector2Int(0, -1)  // –≤–≤–µ—Ä—Ö
        };

        // –ê–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ö–æ–¥–∞ –≤ —à–∏—Ä–∏–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        while (queue.Count > 0)
        {
            Vector2Int current = queue.Dequeue();
            // Debug.Log($"[ARManagerInitializer2-FindConnectedArea] Dequeued: ({current.x},{current.y}). Pixel.R={pixels[current.y * width + current.x].r}. Queue count: {queue.Count}");

            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏
            bool boundsChanged = false;
            if (current.x < minX) { minX = current.x; boundsChanged = true; }
            if (current.x > maxX) { maxX = current.x; boundsChanged = true; }
            if (current.y < minY) { minY = current.y; boundsChanged = true; }
            if (current.y > maxY) { maxY = current.y; boundsChanged = true; }

            if (boundsChanged)
            {
                // Debug.Log($"[ARManagerInitializer2-FindConnectedArea] Bounds updated: minX={minX}, maxX={maxX}, minY={minY}, maxY={maxY}");
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–µ–π
            foreach (Vector2Int dir in directions)
            {
                int newX = current.x + dir.x;
                int newY = current.y + dir.y;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–µ–∫—Å—Ç—É—Ä—ã
                if (newX >= 0 && newX < width && newY >= 0 && newY < height)
                {
                    // –ï—Å–ª–∏ –ø–∏–∫—Å–µ–ª—å –Ω–µ –ø–æ—Å–µ—â–µ–Ω –∏ —ç—Ç–æ —á–∞—Å—Ç—å —Å—Ç–µ–Ω—ã
                    if (!visited[newX, newY] && pixels[newY * width + newX].r >= threshold) // –ò–ó–ú–ï–ù–ï–ù–û: > –Ω–∞ >=
                    {
                        visited[newX, newY] = true;
                        queue.Enqueue(new Vector2Int(newX, newY));
                        // Debug.Log($"[ARManagerInitializer2-FindConnectedArea] Enqueued neighbor: ({newX},{newY}). Pixel.R={pixels[newY * width + newX].r}. Visited set to true. Queue count: {queue.Count}");
                    }
                }
            }
        }

        Rect resultRect = new Rect(minX, minY, maxX - minX + 1, maxY - minY + 1);
        Debug.Log($"[ARManagerInitializer2-FindConnectedArea] IN END: Returning Rect: X={resultRect.x}, Y={resultRect.y}, W={resultRect.width}, H={resultRect.height} for start ({startX},{startY})");
        return resultRect;
    }

    private List<Rect> FindWallAreas(Color32[] pixels, int width, int height, byte threshold)
    {
        Debug.Log($"[ARManagerInitializer2-FindWallAreas] IN START: Texture {width}x{height}, Threshold={threshold}");
        List<Rect> areas = new List<Rect>();
        bool[,] visited = new bool[width, height];
        int areasFoundBeforeFiltering = 0;
        int pixelsChecked = 0;
        int activeUnvisitedPixelsFound = 0;


        for (int y = 0; y < height; y++)
        {
            for (int x = 0; x < width; x++)
            {
                pixelsChecked++;
                // Debug.Log($"[ARManagerInitializer2-FindWallAreas] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–∫—Å–µ–ª—è ({x},{y}). visited={visited[x,y]}, pixel.r = {pixels[y * width + x].r}");
                if (!visited[x, y] && pixels[y * width + x].r >= threshold)
                {
                    activeUnvisitedPixelsFound++;
                    Debug.Log($"[ARManagerInitializer2-FindWallAreas] Found ACTIVE UNVISITED pixel at ({x},{y}). Pixel.R={pixels[y * width + x].r}. Calling FindConnectedArea...");
                    Rect area = FindConnectedArea(pixels, width, height, x, y, visited, threshold);
                    areasFoundBeforeFiltering++;
                    Debug.Log($"[ARManagerInitializer2-FindWallAreas] FindConnectedArea for ({x},{y}) returned: {areaToString(area)}. Area.width={area.width}, Area.height={area.height}, Area.width*Area.height={area.width * area.height}");

                    if (area.width >= minPixelsDimensionForArea && area.height >= minPixelsDimensionForArea && area.width * area.height >= minAreaSizeInPixels)
                    {
                        Debug.Log($"[ARManagerInitializer2-FindWallAreas] ADDED Area: {areaToString(area)} (Pixel Area: {area.width * area.height}). Meets MinDimension={minPixelsDimensionForArea} AND MinPixelArea={minAreaSizeInPixels}. Total areas: {areas.Count + 1}");
                        areas.Add(area);
                    }
                    else
                    {
                     if (area.width > 0 && area.height > 0) // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ Rect.zero
                     {
                          Debug.Log($"[ARManagerInitializer2-FindWallAreas] FILTERED Area: {areaToString(area)} (Pixel Dims: {area.width}x{area.height}, Pixel Area: {area.width*area.height}). MinDimensionForArea={minPixelsDimensionForArea}, MinAreaSizeInPixels={minAreaSizeInPixels}. NOT ADDED.");
                     } else {
                          Debug.Log($"[ARManagerInitializer2-FindWallAreas] FindConnectedArea returned ZERO area for ({x},{y}). NOT ADDED.");
                     }
                    }
                }
            }
        }
        Debug.Log($"[ARManagerInitializer2-FindWallAreas] IN END: PixelsChecked={pixelsChecked}. ActiveUnvisitedPixelsFound (triggers for FindConnectedArea)={activeUnvisitedPixelsFound}. AreasFoundBeforeFiltering={areasFoundBeforeFiltering}. Final ValidAreasCount={areas.Count}");
        return areas;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ Rect –≤ –ª–æ–≥
    private string areaToString(Rect area)
    {
        return $"Rect(x:{area.xMin:F0}, y:{area.yMin:F0}, w:{area.width:F0}, h:{area.height:F0})";
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ —Å—Ç–µ–Ω—ã
    private void CreatePlaneForWallArea(Rect area, int textureWidth, int textureHeight)
    {
        if (xrOrigin == null || xrOrigin.Camera == null)
        {
            Debug.LogError("[ARManagerInitializer2-CreatePlaneForWallArea] XROrigin or Camera is null. Cannot create plane.");
            return;
        }

        Camera mainCamera = xrOrigin.Camera;
        float planeWorldWidth, planeWorldHeight;
        float distanceFromCamera;

        // –†–∞—Å—á–µ—Ç —à–∏—Ä–∏–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç –∫–∞–º–µ—Ä—ã
        // –î–ª—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–µ—Ä—ã:
        float halfFovVertical = mainCamera.fieldOfView * 0.5f * Mathf.Deg2Rad;
        float halfFovHorizontal = Mathf.Atan(Mathf.Tan(halfFovVertical) * mainCamera.aspect);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–µ–π–∫–∞—Å—Ç–∞
        Vector2 areaCenterUV = new Vector2(
            (area.xMin + area.width * 0.5f) / textureWidth,
            (area.yMin + area.height * 0.5f) / textureHeight
        );

        Ray ray = mainCamera.ViewportPointToRay(new Vector3(areaCenterUV.x, areaCenterUV.y, 0));
        RaycastHit hit;
        Vector3 planePosition;
        Quaternion planeRotation;
        float fallbackDistance = 2.0f; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ä–µ–π–∫–∞—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Å–∫—É —Å–ª–æ–µ–≤ –¥–ª—è —Ä–µ–π–∫–∞—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ "Default" –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª–æ–π –¥–ª—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —Å—Ü–µ–Ω—ã)
        // int layerMask = LayerMask.GetMask("Default", "SimulatedEnvironment"); // –ü—Ä–∏–º–µ—Ä
        // int layerMask = ~LayerMask.GetMask("ARCustomPlane", "Ignore Raycast"); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∏ —Å–ª–æ–π Ignore Raycast
        LayerMask raycastLayerMask = LayerMask.GetMask("SimulatedEnvironment", "Default", "Wall"); // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π "Wall"

        // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ª—É—á–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        Debug.DrawRay(ray.origin, ray.direction * maxRayDistance, Color.yellow, 1.0f); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É –∂–µ–ª—Ç—ã–π –ª—É—á

        if (Physics.Raycast(ray, out hit, maxDistance: maxRayDistance, layerMask: raycastLayerMask)) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é —Ä–µ–π–∫–∞—Å—Ç–∞
        {
            distanceFromCamera = hit.distance;
            // Debug.Log($"[ARManagerInitializer2-CreatePlaneForWallArea] Raycast hit! Distance: {distanceFromCamera:F2}m, Normal: {hit.normal:F2}, Point: {hit.point:F2}, Hit Object: {hit.collider.name}");
            planeRotation = Quaternion.LookRotation(-hit.normal, mainCamera.transform.up); // –û—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º Z –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –ø–æ –Ω–æ—Ä–º–∞–ª–∏
            planePosition = hit.point + hit.normal * 0.01f; // –°–º–µ—â–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –æ—Ç –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å Z-fighting
        }
        else
        {
            // –ï—Å–ª–∏ –ª—É—á –Ω–µ –ø–æ–ø–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∫–∞–º–µ—Ä–µ
            distanceFromCamera = fallbackDistance; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            planePosition = mainCamera.transform.position + mainCamera.transform.forward * distanceFromCamera;
            planeRotation = mainCamera.transform.rotation; // –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –∫–∞–∫ —É –∫–∞–º–µ—Ä—ã
            // Debug.LogWarning($"[ARManagerInitializer2-CreatePlaneForWallArea] Raycast miss. Using fixed distance ({distanceFromCamera}m) and camera-parallel orientation.");
        }


        // –†–∞—Å—á–µ—Ç –º–∏—Ä–æ–≤—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        // –®–∏—Ä–∏–Ω–∞ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ distanceFromCamera
        float worldHeightAtDistance = 2.0f * distanceFromCamera * Mathf.Tan(halfFovVertical);
        float worldWidthAtDistance = worldHeightAtDistance * mainCamera.aspect;

        // –ú–∏—Ä–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –µ–µ –¥–æ–ª–µ –≤ –º–∞—Å–∫–µ
        planeWorldWidth = (area.width / textureWidth) * worldWidthAtDistance;
        planeWorldHeight = (area.height / textureHeight) * worldHeightAtDistance;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
        if (planeWorldWidth < this.minPlaneSizeInMeters || planeWorldHeight < this.minPlaneSizeInMeters)
        {
            // Debug.Log($"[ARManagerInitializer2-CreatePlaneForWallArea] –ü–ª–æ—Å–∫–æ—Å—Ç—å –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ ({area.width}x{area.height}px) —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ ({planeWorldWidth:F2}x{planeWorldHeight:F2}m) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è. Min size: {this.minPlaneSizeInMeters}m.");
            return;
        }

        // Debug.Log($"[ARManagerInitializer2-CreatePlaneForWallArea] Plane World Size: Width={planeWorldWidth:F2}, Height={planeWorldHeight:F2} at distance {distanceFromCamera:F2}m");

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
        foreach (GameObject existingPlane in this.generatedPlanes)
        {
            if (existingPlane == null) continue;
            if (Vector3.Distance(existingPlane.transform.position, planePosition) < 0.2f) // –ï—Å–ª–∏ –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ
            {
                // Debug.LogWarning($"[ARManagerInitializer2-CreatePlaneForWallArea] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–∞—è—Å—è –ø–ª–æ—Å–∫–æ—Å—Ç—å (—Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ. Pos: {planePosition}, ExistingPos: {existingPlane.transform.position}");
                return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            }
        }

                // ... (–∫–æ–¥ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è planeObject) ...
        string planeName = $"MyARPlane_Debug_{planeInstanceCounter++}";
        GameObject planeObject = new GameObject(planeName);
        planeObject.transform.SetParent(null); // –í—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—è –ø–æ–∑–∂–µ, —ç—Ç–æ –û–ö
        planeObject.transform.position = planePosition;
        planeObject.transform.rotation = planeRotation;

        // –û—Ç–∫–ª—é—á–∞–µ–º MeshRenderer –¥–ª—è —Ç–µ—Å—Ç–∞ (–≠–¢–û–¢ –ë–õ–û–ö –£ –í–ê–° –£–ñ–ï –ï–°–¢–¨ –ò –û–ù –ü–†–ê–í–ò–õ–¨–ù–´–ô)
        MeshRenderer renderer = planeObject.GetComponent<MeshRenderer>();
        if (renderer == null) 
        {
            renderer = planeObject.AddComponent<MeshRenderer>();
        }
        // –í–†–ï–ú–ï–ù–ù–û –í–ö–õ–Æ–ß–ï–ù–û –î–õ–Ø –û–¢–õ–ê–î–ö–ò –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–Ø
        renderer.enabled = true;
        Debug.Log($"[ARManagerInitializer2-CreatePlaneForWallArea] MeshRenderer –¥–ª—è {planeObject.name} –í–ö–õ–Æ–ß–ï–ù –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."); // –ò–∑–º–µ–Ω–∏–ª —Ç–µ–≥ –Ω–∞ CreatePlaneForWallArea –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏

        // ... (–¥–∞–ª—å–Ω–µ–π—à–∏–π –∫–æ–¥ –º–µ—Ç–æ–¥–∞: —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—à–∞, –∫–æ–ª–ª–∞–π–¥–µ—Ä–∞ –∏ —Ç.–¥.) ...
        // –ú–µ—à —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ XY, –ø–æ—ç—Ç–æ–º—É –µ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç—å, –µ—Å–ª–∏ LookRotation –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª Z –∫–∞–∫ "–≤–ø–µ—Ä–µ–¥"
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Quad Unity –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –≤–¥–æ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Å–∏ Z. LookRotation –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç Z –æ–±—ä–µ–∫—Ç–∞ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.
        // –ï—Å–ª–∏ planeNormal - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, —Ç–æ LookRotation(planeNormal) –≤—ã—Ä–æ–≤–Ω—è–µ—Ç +Z –æ–±—ä–µ–∫—Ç–∞ —Å —ç—Ç–æ–π –Ω–æ—Ä–º–∞–ª—å—é.
        // –≠—Ç–æ –æ–±—ã—á–Ω–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å.

        planeObject.transform.localScale = Vector3.one; // –ú–∞—Å—à—Ç–∞–± –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ –º–µ—à—É –Ω–∞–ø—Ä—è–º—É—é

        // Debug.Log($"[ARManagerInitializer2-CreatePlaneForWallArea] Created {planeName}. World Position: {planeObject.transform.position}, Rotation: {planeObject.transform.rotation.eulerAngles}, Initial Scale: {planeObject.transform.localScale}");

        MeshFilter meshFilter = planeObject.AddComponent<MeshFilter>();
        meshFilter.mesh = CreatePlaneMesh(planeWorldWidth, planeWorldHeight); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏—Ä–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –º–µ—à–∞

        MeshRenderer meshRenderer = planeObject.AddComponent<MeshRenderer>();
        if (this.verticalPlaneMaterial != null)
        {
            meshRenderer.material = new Material(this.verticalPlaneMaterial);
            // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            // Color color = meshRenderer.material.color;
            // color.a = 0.7f; 
            // meshRenderer.material.color = color;
        }
        else
        {
            Debug.LogError("[ARManagerInitializer2-CreatePlaneForWallArea] wallMaterialVertical is not set! Assigning default magenta.");
            Material simpleMaterial = new Material(Shader.Find("Unlit/Color"));
            simpleMaterial.color = Color.magenta;
            meshRenderer.material = simpleMaterial;
        }
        // Debug.Log($"[ARManagerInitializer2-CreatePlaneForWallArea] Applied material to {planeName}. Mesh bounds: {meshFilter.mesh.bounds.size}");

        MeshCollider meshCollider = planeObject.AddComponent<MeshCollider>();
        meshCollider.sharedMesh = meshFilter.mesh;

        this.generatedPlanes.Add(planeObject);
        if (this.planeCreationTimes != null) this.planeCreationTimes[planeObject] = Time.time;

        // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ TrackablesParent, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–µ –±—ã–ª —Ä–∞–≤–µ–Ω null –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        if (this.xrOrigin != null && this.xrOrigin.TrackablesParent != null)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ TrackablesParent —á–∞—Å—Ç—å—é —Å–∞–º–æ–≥–æ XR Origin, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
            // –∏ –∏–º–µ–µ—Ç –ª–∏ –æ–Ω —Ç–æ—Ç –∂–µ InstanceID, —á—Ç–æ –∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω)
            if (this.trackablesParentInstanceID_FromStart == 0 ||
                (this.xrOrigin.TrackablesParent.gameObject.activeInHierarchy && this.xrOrigin.TrackablesParent.GetInstanceID() == this.trackablesParentInstanceID_FromStart))
            {
                planeObject.transform.SetParent(this.xrOrigin.TrackablesParent, true);
                // Debug.Log($"[ARManagerInitializer2-CreatePlaneForWallArea] {planeName} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ {this.xrOrigin.TrackablesParent.name} (ID: {this.xrOrigin.TrackablesParent.GetInstanceID()}).");
            }
            else
            {
                Debug.LogWarning($"[ARManagerInitializer2-CreatePlaneForWallArea] {planeName} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ TrackablesParent, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω (–æ–∂–∏–¥–∞–ª—Å—è ID: {this.trackablesParentInstanceID_FromStart}, —Ç–µ–∫—É—â–∏–π: {this.xrOrigin.TrackablesParent.GetInstanceID()}, –∞–∫—Ç–∏–≤–µ–Ω: {this.xrOrigin.TrackablesParent.gameObject.activeInHierarchy}). –û—Å—Ç–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–Ω–µ.");
            }
        }
        else
        {
            Debug.LogWarning($"[ARManagerInitializer2-CreatePlaneForWallArea] {planeName} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω, —Ç–∞–∫ –∫–∞–∫ XROrigin –∏–ª–∏ TrackablesParent –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û—Å—Ç–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–Ω–µ.");
        }
    }

    private Mesh CreatePlaneMesh(float width, float height)
    {
        Mesh mesh = new Mesh();

        // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—à–∏–Ω—ã –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—à–∞
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ç–∫—É 4x4 –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏
        int segmentsX = 4;
        int segmentsY = 4;
        float thickness = 0.02f; // –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞

        int vertCount = (segmentsX + 1) * (segmentsY + 1) * 2; // –ø–µ—Ä–µ–¥–Ω—è—è –∏ –∑–∞–¥–Ω—è—è –≥—Ä–∞–Ω–∏
        Vector3[] vertices = new Vector3[vertCount];
        Vector2[] uv = new Vector2[vertCount];

        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–¥–Ω–∏–µ –∏ –∑–∞–¥–Ω–∏–µ –≤–µ—Ä—à–∏–Ω—ã
        int index = 0;
        for (int z = 0; z < 2; z++)
        {
            float zPos = z == 0 ? 0 : -thickness;

            for (int y = 0; y <= segmentsY; y++)
            {
                float yPos = -height / 2 + height * ((float)y / segmentsY);

                for (int x = 0; x <= segmentsX; x++)
                {
                    float xPos = -width / 2 + width * ((float)x / segmentsX);

                    vertices[index] = new Vector3(xPos, yPos, zPos);
                    uv[index] = new Vector2((float)x / segmentsX, (float)y / segmentsY);
                    index++;
                }
            }
        }

        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏
        int quadCount = segmentsX * segmentsY * 2 + // –ø–µ—Ä–µ–¥–Ω—è—è –∏ –∑–∞–¥–Ω—è—è –≥—Ä–∞–Ω–∏
                        segmentsX * 2 + // –≤–µ—Ä—Ö–Ω—è—è –∏ –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏
                        segmentsY * 2;  // –ª–µ–≤–∞—è –∏ –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏

        int[] triangles = new int[quadCount * 6]; // 6 –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç (2 —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞)

        index = 0;

        // –ü–µ—Ä–µ–¥–Ω—è—è –≥—Ä–∞–Ω—å
        int frontOffset = 0;
        int verticesPerRow = segmentsX + 1;

        for (int y = 0; y < segmentsY; y++)
        {
            for (int x = 0; x < segmentsX; x++)
            {
                int currentIndex = frontOffset + y * verticesPerRow + x;

                triangles[index++] = currentIndex;
                triangles[index++] = currentIndex + verticesPerRow + 1;
                triangles[index++] = currentIndex + 1;

                triangles[index++] = currentIndex;
                triangles[index++] = currentIndex + verticesPerRow;
                triangles[index++] = currentIndex + verticesPerRow + 1;
            }
        }

        // –ó–∞–¥–Ω—è—è –≥—Ä–∞–Ω—å (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏)
        int backOffset = (segmentsX + 1) * (segmentsY + 1);

        for (int y = 0; y < segmentsY; y++)
        {
            for (int x = 0; x < segmentsX; x++)
            {
                int currentIndex = backOffset + y * verticesPerRow + x;

                triangles[index++] = currentIndex + 1;
                triangles[index++] = currentIndex + verticesPerRow + 1;
                triangles[index++] = currentIndex;

                triangles[index++] = currentIndex + verticesPerRow + 1;
                triangles[index++] = currentIndex + verticesPerRow;
                triangles[index++] = currentIndex;
            }
        }

        // –í–µ—Ä—Ö–Ω—è—è, –Ω–∏–∂–Ω—è—è, –ª–µ–≤–∞—è –∏ –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ–ø—É—Å–∫–∞—é —ç—Ç—É —á–∞—Å—Ç—å –∫–æ–¥–∞, –æ–Ω–∞ –ø–æ —Å—É—Ç–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞

        // –ù–∞–∑–Ω–∞—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ç–∫–µ
        mesh.vertices = vertices;
        mesh.triangles = triangles;
        mesh.uv = uv;

        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏ –∏ –≥—Ä–∞–Ω–∏—Ü—ã
        mesh.RecalculateNormals();
        mesh.RecalculateBounds();

        return mesh;
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π, –Ω–∞–∫–ª–∞–¥—ã–≤–∞—é—â–∏—Ö—Å—è –ø–æ–≤–µ—Ä—Ö –∫–∞–º–µ—Ä—ã
    private void RemoveOverlayingPlanes()
    {
        if (xrOrigin == null || xrOrigin.Camera == null || generatedPlanes.Count == 0)
            return;

        Camera arCamera = xrOrigin.Camera;
        List<GameObject> planesToRemove = new List<GameObject>();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä "–≤–ø–µ—Ä–µ–¥" –¥–ª—è –∫–∞–º–µ—Ä—ã –≤ –º–∏—Ä–æ–≤–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        Vector3 cameraForward = arCamera.transform.forward;

        foreach (GameObject plane in generatedPlanes)
        {
            if (plane == null) continue;

            Vector3 directionToPlane = plane.transform.position - arCamera.transform.position;
            float distanceToCamera = directionToPlane.magnitude;

            float protectionTime = 1.0f;
            bool isRecentlyCreated = planeCreationTimes.ContainsKey(plane) &&
                                      Time.time - planeCreationTimes[plane] < protectionTime;

            // –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–∏–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            if (distanceToCamera < 0.2f) // –ü–æ—Ä–æ–≥ –¥–ª—è "—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–æ", –Ω–∞–ø—Ä–∏–º–µ—Ä, 20 —Å–º
            {
                if (!isRecentlyCreated)
                {
                    planesToRemove.Add(plane);
                    // Debug.LogWarning($"[ARManagerInitializer2] üö® –£–¥–∞–ª–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏: dist={distanceToCamera:F2}–º, name={plane.name}");
                }
                else
                {
                    // Debug.Log($"[ARManagerInitializer2] –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å '{plane.name}' –∑–∞—â–∏—â–µ–Ω–∞ (–Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–∞): dist={distanceToCamera:F2}–º. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–æ–∂–µ–Ω–∏—è.");
                }
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —ç—Ç–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–∞
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –ø–æ–≤–µ—Ä—Ö –∫–∞–º–µ—Ä—ã:

            // 1. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∫–∞–º–µ—Ä—ã (–æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π > 0.2–º)
            // float distanceToCamera = directionToPlane.magnitude; // –£–∂–µ –≤—ã—á–∏—Å–ª–µ–Ω–æ

            // 2. –£–≥–æ–ª –º–µ–∂–¥—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞–º–µ—Ä—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            // (–Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–ª–æ—Å–∫–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –∫–∞–º–µ—Ä–æ–π)
            // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–∞, —Ç–∞–∫ –∫–∞–∫ distanceToCamera >= 0.2f
            float alignmentWithCamera = Vector3.Dot(cameraForward.normalized, directionToPlane.normalized);

            // 3. –£–≥–æ–ª –º–µ–∂–¥—É –Ω–æ—Ä–º–∞–ª—å—é –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞–º–µ—Ä—ã
            // (–Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–ª–æ—Å–∫–æ—Å—Ç—å –æ–±—Ä–∞—â–µ–Ω–∞ –∫ –∫–∞–º–µ—Ä–µ)
            float facingDot = Vector3.Dot(cameraForward, -plane.transform.forward);

            // 4. –ù–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–ª–æ—Å–∫–æ—Å—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –ø–æ–ª—è –∑—Ä–µ–Ω–∏—è
            Vector3 viewportPos = arCamera.WorldToViewportPoint(plane.transform.position);
            bool isInCentralViewport = (viewportPos.x > 0.3f && viewportPos.x < 0.7f &&
                                       viewportPos.y > 0.3f && viewportPos.y < 0.7f &&
                                       viewportPos.z > 0);

            // –£—Å–ª–æ–≤–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏-–Ω–∞–ª–æ–∂–µ–Ω–∏—è:
            // - –ü–ª–æ—Å–∫–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–ª–∏–∑–∫–æ –∫ –∫–∞–º–µ—Ä–µ (–º–µ–Ω–µ–µ 2.0 –º–µ—Ç—Ä–∞)
            // - –ò –ø–ª–æ—Å–∫–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–µ—Ä–µ–¥ –∫–∞–º–µ—Ä–æ–π (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π dot product)
            // - –ò –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø–æ—á—Ç–∏ –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤–∑–≥–ª—è–¥–∞
            // - –ò –ø–ª–æ—Å–∫–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
            // –ó–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –≤—ã—à–µ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–∏—Ö.
            // –ó–¥–µ—Å—å –æ–Ω–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è "–æ–±—ã—á–Ω—ã—Ö" –Ω–∞–ª–æ–∂–µ–Ω–∏–π.

            if (!isRecentlyCreated && distanceToCamera < 2.0f && alignmentWithCamera > 0.7f && facingDot > 0.6f && isInCentralViewport)
            {
                planesToRemove.Add(plane);
                // Debug.Log($"[ARManagerInitializer2] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç—å-–Ω–∞–ª–æ–∂–µ–Ω–∏–µ '{plane.name}': dist={distanceToCamera:F2}–º, " + 
                // $"align={alignmentWithCamera:F2}, facing={facingDot:F2}, inCenter={isInCentralViewport}");
            }
            else if (isRecentlyCreated && distanceToCamera < 2.0f && alignmentWithCamera > 0.7f && facingDot > 0.6f && isInCentralViewport)
            {
                // Debug.Log($"[ARManagerInitializer2] –ü–ª–æ—Å–∫–æ—Å—Ç—å-–Ω–∞–ª–æ–∂–µ–Ω–∏–µ '{plane.name}' –∑–∞—â–∏—â–µ–Ω–∞ (–Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–∞): dist={distanceToCamera:F2}–º");
            }
        }

        // –£–¥–∞–ª—è–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç–∏-–Ω–∞–ª–æ–∂–µ–Ω–∏—è
        foreach (GameObject planeToRemove in planesToRemove)
        {
            generatedPlanes.Remove(planeToRemove);
            if (planeCreationTimes.ContainsKey(planeToRemove))
            {
                planeCreationTimes.Remove(planeToRemove);
            }
            Destroy(planeToRemove);
        }

        if (planesToRemove.Count > 0)
        {
            Debug.LogWarning($"[ARManagerInitializer2] ‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–æ {planesToRemove.Count} –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π-–Ω–∞–ª–æ–∂–µ–Ω–∏–π");
        }
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    private void UpdatePlanePositions()
    {
        if (xrOrigin == null || xrOrigin.Camera == null || xrOrigin.TrackablesParent == null)
        {
            // Debug.LogError("[ARManagerInitializer2-UpdatePlanePositions] XR Origin, Camera, or TrackablesParent is not set. Cannot update plane positions.");
            return;
        }

        // Debug.Log($"[ARManagerInitializer2-UpdatePlanePositions] Running. Planes to check: {generatedPlanes.Count}");
        int detachedPlanes = 0; // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–¥–µ—Å—å

        for (int i = generatedPlanes.Count - 1; i >= 0; i--) // –ò–¥–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        {
            GameObject plane = generatedPlanes[i];
            if (plane == null)
            {
                generatedPlanes.RemoveAt(i); // –£–¥–∞–ª—è–µ–º null —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –ª–∏ –ø–ª–æ—Å–∫–æ—Å—Ç—å –∫ –∫–∞–º–µ—Ä–µ –∏–ª–∏ –î–†–£–ì–û–ú–£ –ù–ï–û–ñ–ò–î–ê–ù–ù–û–ú–£ –æ–±—ä–µ–∫—Ç—É
            if (plane.transform.parent != null && (this.xrOrigin == null || this.xrOrigin.TrackablesParent == null || plane.transform.parent != this.xrOrigin.TrackablesParent))
            {
                // Debug.LogWarning($"[ARManagerInitializer2-UpdatePlanePositions] –ü–ª–æ—Å–∫–æ—Å—Ç—å '{plane.name}' (ID: {plane.GetInstanceID()}) –±—ã–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∞ –∫ –ù–ï–û–ñ–ò–î–ê–ù–ù–û–ú–£ —Ä–æ–¥–∏—Ç–µ–ª—é '{GetGameObjectPath(plane.transform.parent)}' (–æ–∂–∏–¥–∞–ª—Å—è TrackablesParent –∏–ª–∏ null). –û—Ç—Å–æ–µ–¥–∏–Ω—è–µ–º.");

                // –û—Ç—Å–æ–µ–¥–∏–Ω—è–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å. –ê—Ä–≥—É–º–µ–Ω—Ç 'true' —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∏—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã,
                // localScale –±—É–¥–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ lossyScale.
                plane.transform.SetParent(null, true);

                detachedPlanes++;
            }
            else if (plane.transform.parent == null && this.xrOrigin != null && this.xrOrigin.TrackablesParent != null)
            {
                // –ï—Å–ª–∏ –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø–æ—á–µ–º—É-—Ç–æ –æ—Ç—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å –æ—Ç TrackablesParent, –Ω–æ TrackablesParent —Å—É—â–µ—Å—Ç–≤—É–µ—Ç,
                // –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –µ–µ –æ–±—Ä–∞—Ç–Ω–æ. –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ –≤ –∫–æ–¥–µ –∏–∑–º–µ–Ω—è–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è.
                // Debug.LogWarning($"[ARManagerInitializer2-UpdatePlanePositions] –ü–ª–æ—Å–∫–æ—Å—Ç—å '{plane.name}' (ID: {plane.GetInstanceID()}) –±—ã–ª–∞ –æ—Ç—Å–æ–µ–¥–∏–Ω–µ–Ω–∞ –æ—Ç TrackablesParent. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫ '{GetGameObjectPath(this.xrOrigin.TrackablesParent)}'.");
                plane.transform.SetParent(this.xrOrigin.TrackablesParent, true);
            }
            else if (plane.transform.parent != null && this.xrOrigin != null && this.xrOrigin.TrackablesParent != null && plane.transform.parent == this.xrOrigin.TrackablesParent)
            {
                // –ü–ª–æ—Å–∫–æ—Å—Ç—å —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ TrackablesParent. –ù–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
                // Debug.Log($"[ARManagerInitializer2-UpdatePlanePositions] –ü–ª–æ—Å–∫–æ—Å—Ç—å '{plane.name}' (ID: {plane.GetInstanceID()}) —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ TrackablesParent.");
            }


            // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏, –µ—Å–ª–∏ –ø–ª–æ—Å–∫–æ—Å—Ç—å –ù–ï –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ TrackablesParent
            // –≠—Ç–∞ —á–∞—Å—Ç—å —Ç–µ–ø–µ—Ä—å –º–µ–Ω–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ TrackablesParent –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
            // –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º/–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É –≤—ã—à–µ.
            // if (plane.transform.parent == null)
            // {
            //     Vector3 targetPosition = xrOrigin.Camera.transform.position + xrOrigin.Camera.transform.forward * 2.0f; // –ü—Ä–∏–º–µ—Ä: 2–º –ø–µ—Ä–µ–¥ –∫–∞–º–µ—Ä–æ–π
            //     plane.transform.position = targetPosition;
            //     plane.transform.rotation = Quaternion.LookRotation(xrOrigin.Camera.transform.forward); // –û—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º –∫–∞–∫ –∫–∞–º–µ—Ä—É
            //     Debug.Log($"[ARManagerInitializer2-UpdatePlanePositions] –ü–ª–æ—Å–∫–æ—Å—Ç—å '{plane.name}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (–Ω–µ –±—ã–ª–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞): pos={targetPosition}, rot={plane.transform.rotation.eulerAngles}");
            // }
        }

        if (detachedPlanes > 0)
        {
            Debug.LogWarning($"[ARManagerInitializer2-UpdatePlanePositions] –û—Ç—Å–æ–µ–¥–∏–Ω–µ–Ω–æ {detachedPlanes} –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω—ã –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –æ–±—ä–µ–∫—Ç–∞–º.");
        }
    }

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    public void ResetAllPlanes()
    {
        // Clear persistent plane tracking
        persistentGeneratedPlanes.Clear();
        planeCreationTimes.Clear(); 
        planeLastVisitedTime.Clear();

        foreach (GameObject plane in generatedPlanes)
        {
            if (plane != null)
                Destroy(plane);
        }

        generatedPlanes.Clear();
        Debug.Log("[ARManagerInitializer2] üîÑ All planes removed and will be recreated");

        // Reset frame counter to immediately create new planes
        frameCounter = 10;

        // If we have ARPlaneConfigurator, also reset its saved planes
        if (planeConfigurator != null && usePersistentPlanes)
        {
            planeConfigurator.ResetSavedPlanes();
        }
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ AR Foundation
    private void DisableARFoundationVisualizers()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ AR Foundation, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

        // 1. –û—Ç–∫–ª—é—á–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        if (planeManager != null)
        {
            // –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∞–±–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
            planeManager.planePrefab = null;

            // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º —Ç—Ä–µ–∫–∞–±–ª-–æ–±—ä–µ–∫—Ç–∞–º –∏ –æ—Ç–∫–ª—é—á–∞–µ–º –∏—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            foreach (var plane in planeManager.trackables)
            {
                if (plane != null)
                {
                    MeshRenderer meshRenderer = plane.GetComponent<MeshRenderer>();
                    if (meshRenderer != null)
                    {
                        meshRenderer.enabled = false;
                    }

                    LineRenderer lineRenderer = plane.GetComponent<LineRenderer>();
                    if (lineRenderer != null)
                    {
                        lineRenderer.enabled = false;
                    }
                }
            }

            // Debug.Log("[ARManagerInitializer2] ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π AR Foundation");
        }

        // 2. –û—Ç–∫–ª—é—á–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä—ã —Ç–æ—á–µ–∫
        var pointCloudManager = FindObjectOfType<UnityEngine.XR.ARFoundation.ARPointCloudManager>();
        if (pointCloudManager != null)
        {
            pointCloudManager.enabled = false;
            // Debug.Log("[ARManagerInitializer2] ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω ARPointCloudManager");
        }

        // 3. –ü–æ–∏—Å–∫ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ TrackablesParent
        if (xrOrigin != null)
        {
            var trackablesParent = xrOrigin.transform.Find("Trackables");
            if (trackablesParent != null)
            {
                // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –¥–æ—á–µ—Ä–Ω–∏–º –æ–±—ä–µ–∫—Ç–∞–º –∏ –æ—Ç–∫–ª—é—á–∞–µ–º –∏—Ö —Ä–µ–Ω–¥–µ—Ä–µ—Ä—ã
                foreach (Transform child in trackablesParent)
                {
                    // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä—ã —É –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                    foreach (Renderer renderer in child.GetComponentsInChildren<Renderer>())
                    {
                        renderer.enabled = false;
                    }
                }
                // Debug.Log("[ARManagerInitializer2] ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω—ã —Ä–µ–Ω–¥–µ—Ä–µ—Ä—ã –≤ Trackables");
            }
        }
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö AR –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ —Ä–∞–Ω—Ç–∞–π–º–µ
    private void DisableOtherARVisualizers()
    {
        // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å –æ—Ä–∞–Ω–∂–µ–≤—ã–º/–∂–µ–ª—Ç—ã–º —Ü–≤–µ—Ç–æ–º –∏ –∏–º–µ–Ω–∞–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ "Trackable", "Feature", "Point"
        var allRenderers = FindObjectsOfType<Renderer>();
        int disabledCount = 0;

        foreach (var renderer in allRenderers)
        {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—à–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            bool isOurPlane = false;
            foreach (var plane in generatedPlanes)
            {
                if (plane != null && renderer.gameObject == plane)
                {
                    isOurPlane = true;
                    break;
                }
            }

            if (isOurPlane)
                continue;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å AR Foundation
            string objName = renderer.gameObject.name.ToLower();
            if (objName.Contains("track") || objName.Contains("feature") ||
                objName.Contains("point") || objName.Contains("plane") ||
                objName.Contains("mesh") || objName.Contains("visualizer"))
            {
                renderer.enabled = false;
                disabledCount++;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ –∂–µ–ª—Ç—ã–π/–æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç
            if (renderer.sharedMaterial != null)
            {
                // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                Color color = renderer.sharedMaterial.color;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–≤–µ—Ç –∂–µ–ª—Ç—ã–º –∏–ª–∏ –æ—Ä–∞–Ω–∂–µ–≤—ã–º
                // (–∫—Ä–∞—Å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã—Å–æ–∫–∏–π, –∑–µ–ª–µ–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π, —Å–∏–Ω–∏–π –Ω–∏–∑–∫–∏–π)
                if (color.r > 0.6f && color.g > 0.4f && color.b < 0.3f)
                {
                    renderer.enabled = false;
                    disabledCount++;
                }
            }
        }

        if (disabledCount > 0)
        {
            Debug.Log($"[ARManagerInitializer2] üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ {disabledCount} —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö AR-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤");
        }
    }

    // –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ï–¢–û–î: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –±–∞–∑–æ–≤–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    private void CreateBasicPlaneInFrontOfUser()
    {
        if (xrOrigin == null || xrOrigin.Camera == null)
        {
            // Debug.LogError("[ARManagerInitializer2] XROrigin or Camera is null, cannot create basic plane.");
            return;
        }

        // Debug.Log("[ARManagerInitializer2] –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –±–∞–∑–æ–≤–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å
        foreach (GameObject existingPlane in generatedPlanes)
        {
            if (existingPlane != null && existingPlane.name.StartsWith("MyARPlane_Debug_Basic_"))
            {
                // Debug.Log("[ARManagerInitializer2] –ë–∞–∑–æ–≤–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ–≤–∞—è –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è.");
                return; // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            }
        }

        Camera mainCamera = xrOrigin.Camera;
        float distanceFromCamera = 2.0f; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ

        // –†–∞—Å—á–µ—Ç —à–∏—Ä–∏–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ distanceFromCamera
        float halfFovVertical = mainCamera.fieldOfView * 0.5f * Mathf.Deg2Rad;
        float worldHeightAtDistance = 2.0f * distanceFromCamera * Mathf.Tan(halfFovVertical);
        float worldWidthAtDistance = worldHeightAtDistance * mainCamera.aspect;

        // –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 30% –æ—Ç —à–∏—Ä–∏–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã –æ–±–∑–æ—Ä–∞
        float planeWorldWidth = worldWidthAtDistance * 0.3f;
        float planeWorldHeight = worldHeightAtDistance * 0.3f;

        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–∞–∑–º–µ—Ä –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
        planeWorldWidth = Mathf.Max(planeWorldWidth, minPlaneSizeInMeters);
        planeWorldHeight = Mathf.Max(planeWorldHeight, minPlaneSizeInMeters);

        Mesh planeMesh = CreatePlaneMesh(planeWorldWidth, planeWorldHeight);

        string planeName = $"MyARPlane_Debug_Basic_{planeInstanceCounter++}";
        GameObject planeObject = new GameObject(planeName);
        planeObject.transform.SetParent(null);
        planeObject.transform.position = mainCamera.transform.position + mainCamera.transform.forward * distanceFromCamera;
        planeObject.transform.rotation = mainCamera.transform.rotation;
        planeObject.transform.localScale = new Vector3(0.5f, 0.5f, 0.5f);
        planeObject.transform.SetParent(null);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        MeshFilter meshFilter = planeObject.AddComponent<MeshFilter>();
        meshFilter.mesh = planeMesh;

        MeshRenderer meshRenderer = planeObject.AddComponent<MeshRenderer>();
        if (this.verticalPlaneMaterial != null)
        {
            meshRenderer.material = new Material(this.verticalPlaneMaterial);
        }
        else
        {
            // –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Å–ª—É—á–∞—è
            Material planeMaterial = new Material(Shader.Find("Universal Render Pipeline/Lit"));
            Color planeColor = Color.HSVToRGB(0.1f, 0.6f, 0.7f); // –ü—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π
            planeMaterial.color = planeColor;

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            planeMaterial.SetFloat("_Surface", 1); // 1 = –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
            planeMaterial.SetInt("_ZWrite", 0); // –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±—É—Ñ–µ—Ä –≥–ª—É–±–∏–Ω—ã –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            planeMaterial.SetInt("_SrcBlend", (int)UnityEngine.Rendering.BlendMode.SrcAlpha);
            planeMaterial.SetInt("_DstBlend", (int)UnityEngine.Rendering.BlendMode.OneMinusSrcAlpha);
            planeMaterial.EnableKeyword("_ALPHAPREMULTIPLY_ON");
            planeMaterial.EnableKeyword("_EMISSION");
            planeMaterial.SetColor("_EmissionColor", planeColor * 0.15f); // –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è —ç–º–∏—Å—Å–∏—è
            planeMaterial.SetFloat("_Smoothness", 0.2f);
            planeMaterial.SetFloat("_Metallic", 0.05f);
            planeMaterial.renderQueue = 3000; // –û—á–µ—Ä–µ–¥—å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            planeColor.a = 0.5f; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            planeMaterial.color = planeColor;

            meshRenderer.material = planeMaterial;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–ª–∞–π–¥–µ—Ä –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        MeshCollider meshCollider = planeObject.AddComponent<MeshCollider>();
        meshCollider.sharedMesh = meshFilter.sharedMesh;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        generatedPlanes.Add(planeObject);

        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Ä–∞–Ω–Ω–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        planeCreationTimes[planeObject] = Time.time;
        if (this.planeLastVisitedTime != null) this.planeLastVisitedTime[planeObject] = Time.time;

        // Debug.Log("[ARManagerInitializer2] ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –±–∞–∑–æ–≤–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");

        planeObject.name = $"MyARPlane_Debug_Basic_{planeInstanceCounter++}";
        // Debug.Log($"[ARManagerInitializer2] –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å: {planeObj.name} –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ {distanceFromCamera}m");

        generatedPlanes.Add(planeObject);
        planeCreationTimes[planeObject] = Time.time;
        if (this.planeLastVisitedTime != null) this.planeLastVisitedTime[planeObject] = Time.time;

        if (xrOrigin.TrackablesParent != null)
        {
            planeObject.transform.SetParent(xrOrigin.TrackablesParent, true);
            // Debug.Log($"[ARManagerInitializer2] –ë–∞–∑–æ–≤–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å {planeObj.name} –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ {xrOrigin.TrackablesParent.name}.");
        }
        else
        {
            // Debug.LogWarning($"[ARManagerInitializer2] TrackablesParent –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ XROrigin, –±–∞–∑–æ–≤–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å {planeObj.name} –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–∞.");
        }
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ —Å—Ç–µ–Ω—ã
    private bool UpdateOrCreatePlaneForWallArea(Rect area, int textureWidth, int textureHeight, Dictionary<GameObject, bool> visitedPlanes)
    {
        Camera currentMainCamera = Camera.main; // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
        if (currentMainCamera == null)
        {
            if (enableDetailedRaycastLogging) Debug.LogError("[ARManagerInitializer2-UOCP] –ö–∞–º–µ—Ä–∞ Camera.main –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            return false;
        }

        // DEBUG: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–º–µ—Ä–µ
        if (enableDetailedRaycastLogging)
        {
            Debug.Log($"[ARManagerInitializer2-UOCP-CAMDEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–º–µ—Ä–∞: {currentMainCamera.name}, Pos: {currentMainCamera.transform.position}, Rot: {currentMainCamera.transform.rotation.eulerAngles}");
        }

        if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] === –ó–ê–ü–£–°–ö UpdateOrCreatePlaneForWallArea –¥–ª—è –æ–±–ª–∞—Å—Ç–∏: X={area.x}, Y={area.y}, W={area.width}, H={area.height} (–¢–µ–∫—Å—Ç—É—Ä–∞: {textureWidth}x{textureHeight}) ===");
        if (xrOrigin == null || xrOrigin.Camera == null)
        {
            Debug.LogError("[ARManagerInitializer2-UOCP] ‚ùå XROrigin –∏–ª–∏ –µ–≥–æ –∫–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã—Ö–æ–¥.");
            return false;
        }

        Camera mainCamera = xrOrigin.Camera;
        Vector3 cameraRight = mainCamera.transform.right;
        Vector3 cameraUp = mainCamera.transform.up;
        Vector3 cameraForward = mainCamera.transform.forward; // <--- –î–û–ë–ê–í–õ–ï–ù–û –û–ë–™–Ø–í–õ–ï–ù–ò–ï

        // –¢–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã
        Vector3 cameraPosition = mainCamera.transform.position;
        // Quaternion cameraRotation = mainCamera.transform.rotation; // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è

        float normalizedCenterX = (area.x + area.width / 2f) / textureWidth;
        float normalizedCenterY = (area.y + area.height / 2f) / textureHeight;
        if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä –æ–±–ª–∞—Å—Ç–∏ (UV): X={normalizedCenterX:F2}, Y={normalizedCenterY:F2}");

        if (normalizedCenterX < 0 || normalizedCenterX > 1 || normalizedCenterY < 0 || normalizedCenterY > 1)
        {
            // Debug.LogWarning($"[ARManagerInitializer2-UOCP] ‚ö†Ô∏è –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –æ–±–ª–∞—Å—Ç–∏ ({normalizedCenterX:F2}, {normalizedCenterY:F2}) –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã [0,1].");
        }

        Ray centerRay = mainCamera.ViewportPointToRay(new Vector3(normalizedCenterX, normalizedCenterY, 0));

            if (enableDetailedRaycastLogging)
            {
                Debug.Log($"[ARManagerInitializer2-UOCP] –†–ê–°–°–ß–ï–¢ UV –î–õ–Ø –†–ï–ô–ö–ê–°–¢–ê: " +
                          $"area.xMin={area.xMin}, area.yMin={area.yMin}, area.width={area.width}, area.height={area.height}, " +
                          $"textureWidth={textureWidth}, textureHeight={textureHeight}");
                Debug.Log($"[ARManagerInitializer2-UOCP] –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä –æ–±–ª–∞—Å—Ç–∏ (UV): X={normalizedCenterX:F2}, Y={normalizedCenterY:F2}");
                if (mainCamera != null)
                {
                    Debug.Log($"[ARManagerInitializer2-UOCP] –ö–ê–ú–ï–†–ê –ü–ï–†–ï–î ViewportPointToRay: Name='{mainCamera.name}', Pos={mainCamera.transform.position}, Forward={mainCamera.transform.forward}");
                }
                else
                {
                    Debug.LogWarning("[ARManagerInitializer2-UOCP] _mainCamera IS NULL –ø–µ—Ä–µ–¥ ViewportPointToRay!");
                }
            }

        Vector3 initialRayDirection = centerRay.direction;
        if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª—É—á–∞ (–∏–∑ ViewportPointToRay({normalizedCenterX:F2},{normalizedCenterY:F2})): {initialRayDirection.ToString("F3")}");

        // –ù–æ–≤—ã–π, –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è LayerMask
        // string[] layerNames = new string[] { "SimulatedEnvironment", "Default", "Wall" }; // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û - –ë–£–î–ï–ú –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ this.hitLayerMask
        // LayerMask layerMask = 0; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–π –º–∞—Å–∫–∏ // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        // string includedLayersString = ""; // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        // bool layersFound = false; // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û

        // foreach (string name in layerNames) // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        // { // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        //     int layer = LayerMask.NameToLayer(name); // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        //     if (layer != -1) // –ï—Å–ª–∏ —Å–ª–æ–π –Ω–∞–π–¥–µ–Ω // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        //     { // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        //         layerMask |= (1 << layer); // –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –º–∞—Å–∫—É // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        //         if (layersFound) includedLayersString += ", "; // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        //         includedLayersString += $"{name} (id:{layer})"; // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        //         layersFound = true; // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        //     } // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        //     else // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        //     { // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        //         Debug.LogWarning($"[ARManagerInitializer2-UOCP] –°–ª–æ–π '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ LayerMask settings. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Project Settings -> Tags and Layers."); // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        //     } // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        // } // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û

        // if (layersFound) // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        // { // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        //     if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –ü–ï–†–ï–î –†–ï–ô–ö–ê–°–¢–ê–ú–ò: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è LayerMask: {LayerMaskToString(layerMask)} (Value: {layerMask.value}), –í–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–ª–æ–∏: [{includedLayersString}]"); // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        // } // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        // else // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        // { // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        //     Debug.LogWarning($"[ARManagerInitializer2-UOCP] –ù–∏ –æ–¥–∏–Ω –∏–∑ —Ü–µ–ª–µ–≤—ã—Ö —Å–ª–æ–µ–≤ ({string.Join(", ", layerNames)}) –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–µ–π–∫–∞—Å—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Å–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (Default)."); // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        //     layerMask = 1 << LayerMask.NameToLayer("Default"); // –¢–æ–ª—å–∫–æ Default —Å–ª–æ–π, –µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
        // } // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û

        // –ò–°–ü–û–õ–¨–ó–£–ï–ú hitLayerMask, –ù–ê–°–¢–†–û–ï–ù–ù–£–Æ –í –ò–ù–°–ü–ï–ö–¢–û–†–ï, –ù–û –ò–°–ö–õ–Æ–ß–ê–ï–ú –°–û–ë–°–¢–í–ï–ù–ù–´–ï –ü–õ–û–°–ö–û–°–¢–ò
        LayerMask layerMask = this.hitLayerMask;
        // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–æ–π ARPlanes (–≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        int arPlanesLayer = LayerMask.NameToLayer("ARPlanes");
        if (arPlanesLayer != -1)
        {
            layerMask &= ~(1 << arPlanesLayer); // –£–±–∏—Ä–∞–µ–º ARPlanes –∏–∑ –º–∞—Å–∫–∏
        }
        if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –ü–ï–†–ï–î –†–ï–ô–ö–ê–°–¢–ê–ú–ò: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è LayerMask –∏–∑ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ (–∏—Å–∫–ª—é—á–µ–Ω ARPlanes): {LayerMaskToString(layerMask)} (Value: {layerMask.value})");


        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–π–∫–∞—Å—Ç–∏–Ω–≥–∞
        float maxRayDistance = 10.0f; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –ª—É—á–∞
        RaycastHit hitInfo; // <--- –û–ë–™–Ø–í–õ–ï–ù–û

        bool didHit = false;

        // –ú–∞—Å—Å–∏–≤ —Å–º–µ—â–µ–Ω–∏–π –¥–ª—è –ª—É—á–µ–π —Å –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–º –æ—Ö–≤–∞—Ç–æ–º –∏ —Ä–∞–∑–Ω–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é
        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∏–º–µ–µ—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫—É—é –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –ª—É—á–µ–π
        List<Vector3> rayOffsets = new List<Vector3>();

        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ª—É—á (—Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º)
        rayOffsets.Add(Vector3.zero);

        // –ë–ª–∏–∂–Ω–∏–µ –ª—É—á–∏ –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞ (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        float innerRadius = 0.08f; // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∞–¥–∏—É—Å –≤ –º–µ—Ç—Ä–∞—Ö
        rayOffsets.Add(cameraRight * innerRadius);                 // –ü—Ä–∞–≤—ã–π
        rayOffsets.Add(-cameraRight * innerRadius);                // –õ–µ–≤—ã–π
        rayOffsets.Add(cameraUp * innerRadius);                    // –í–µ—Ä—Ö–Ω–∏–π
        rayOffsets.Add(-cameraUp * innerRadius);                   // –ù–∏–∂–Ω–∏–π
        rayOffsets.Add(cameraRight * innerRadius * 0.7f + cameraUp * innerRadius * 0.7f);  // –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π
        rayOffsets.Add(cameraRight * innerRadius * 0.7f - cameraUp * innerRadius * 0.7f);  // –ü—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π
        rayOffsets.Add(-cameraRight * innerRadius * 0.7f + cameraUp * innerRadius * 0.7f); // –õ–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π
        rayOffsets.Add(-cameraRight * innerRadius * 0.7f - cameraUp * innerRadius * 0.7f); // –õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π

        // –î–∞–ª—å–Ω–∏–µ –ª—É—á–∏ (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        float outerRadius = 0.15f; // –í–Ω–µ—à–Ω–∏–π —Ä–∞–¥–∏—É—Å –≤ –º–µ—Ç—Ä–∞—Ö
        rayOffsets.Add(cameraRight * outerRadius);                 // –î–∞–ª—å–Ω–∏–π –ø—Ä–∞–≤—ã–π
        rayOffsets.Add(-cameraRight * outerRadius);                // –î–∞–ª—å–Ω–∏–π –ª–µ–≤—ã–π 
        rayOffsets.Add(cameraUp * outerRadius);                    // –î–∞–ª—å–Ω–∏–π –≤–µ—Ä—Ö–Ω–∏–π
        rayOffsets.Add(-cameraUp * outerRadius);                   // –î–∞–ª—å–Ω–∏–π –Ω–∏–∂–Ω–∏–π

        // –í–µ—Å–∞ –¥–ª—è –ª—É—á–µ–π. –î–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–∫—É –≤ rayOffsets
        List<float> rayWeights = new List<float>
        {
            2.0f, // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π
            1.5f, 1.5f, 1.5f, 1.5f, // –ë–ª–∏–∂–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ (–ø—Ä–∞–≤–æ, –ª–µ–≤–æ, –≤–µ—Ä—Ö, –Ω–∏–∑)
            1.0f, 1.0f, 1.0f, 1.0f, // –ë–ª–∏–∂–Ω–∏–µ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ
            0.5f, 0.5f, 0.5f, 0.5f  // –î–∞–ª—å–Ω–∏–µ
        };

        float bestDistance = float.MaxValue;
        Vector3 bestNormal = Vector3.zero;
        float bestConfidence = 0f;

        // –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø–∞–¥–∞–Ω–∏–π –ª—É—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        List<RaycastHit> successfulHits = new List<RaycastHit>();
        List<float> hitWeights = new List<float>();

        // --- –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –†–ï–ô–ö–ê–°–¢–û–í ---
        int totalRaysShot = 0;
        int raysHitSomething = 0;
        int raysHitValidSurface = 0;
        if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] --- –ù–∞—á–∞–ª–æ —Å–µ—Ä–∏–∏ —Ä–µ–π–∫–∞—Å—Ç–æ–≤ ({rayOffsets.Count} –ª—É—á–µ–π) ---");
        // --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –†–ï–ô–ö–ê–°–¢–û–í ---

        // –í–´–ü–û–õ–ù–Ø–ï–ú –°–ï–†–ò–Æ –†–ï–ô–ö–ê–°–¢–û–í —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–º–µ—â–µ–Ω–∏—è–º–∏ –∏ –≤–µ—Å–æ–≤—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
        for (int i = 0; i < rayOffsets.Count; i++)
        {
            Vector3 offsetDirection = rayOffsets[i]; // –≠—Ç–æ –Ω–µ–±–æ–ª—å—à–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
            Vector3 currentRayOrigin = cameraPosition; // –í—Å–µ –ª—É—á–∏ –∏—Å—Ö–æ–¥—è—Ç –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª—É—á–∞ —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º
            Vector3 currentRayDirection = (initialRayDirection + offsetDirection * 0.1f).normalized; // –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –∫–∞–∫ –Ω–µ–±–æ–ª—å—à–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, –Ω–µ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º offsetDirection

            // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ rayWeights –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            float currentWeight = (i < rayWeights.Count) ? rayWeights[i] : 0.5f; // –§–æ–ª–ª–±—ç–∫ –≤–µ—Å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º

            if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –†–µ–π–∫–∞—Å—Ç #{i + 1}: " +
                      $"–ù–∞—á–∞–ª–æ={currentRayOrigin.ToString("F2")}, " +
                      $"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ={currentRayDirection.ToString("F2")}, " +
                      $"–í–µ—Å={currentWeight:F1}, " + // –ò—Å–ø–æ–ª—å–∑—É–µ–º currentWeight
                      $"–∏—Å—Ö–æ–¥–Ω–æ–µ–ù–∞–ø—Ä={initialRayDirection.ToString("F2")}, " +
                      $"—Å–º–µ—â–µ–Ω–∏–µ–ù–∞–ø—Ä={offsetDirection.ToString("F2")}");

            totalRaysShot++;

            if (debugRayMaterial != null && debugRayMaterialPropertyBlock != null)
            {
                debugRayMaterialPropertyBlock.SetColor("_Color", Color.blue); // –õ—É—á–∏ –ø–µ—Ä–µ–¥ –ø—É—Å–∫–æ–º - —Å–∏–Ω–∏–µ
                // ... (–∫–æ–¥ –¥–ª—è LineRenderer, –µ—Å–ª–∏ –≤—ã –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç currentRayOrigin –∏ currentRayDirection)
            }

            // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ª—É—á–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            Debug.DrawRay(currentRayOrigin, currentRayDirection * maxRayDistance, Color.yellow, 1.0f); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É –∂–µ–ª—Ç—ã–π –ª—É—á

            if (Physics.Raycast(currentRayOrigin, currentRayDirection, out hitInfo, maxRayDistance, layerMask, QueryTriggerInteraction.Ignore))
            {
                raysHitSomething++;
                Debug.DrawRay(currentRayOrigin, currentRayDirection * hitInfo.distance, Color.green, 1.0f); // –î–û–ë–ê–í–õ–ï–ù–û: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ª—É—á–∞
                // if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –†–µ–π–∫–∞—Å—Ç #{i+1} –ü–û–ü–ê–õ: –û–±—ä–µ–∫—Ç '{hitInfo.collider.gameObject.name}', –¢–æ—á–∫–∞={hitInfo.point}, –ù–æ—Ä–º–∞–ª—å={hitInfo.normal}, –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ={hitInfo.distance}");

                if (debugRayMaterial != null && debugRayMaterialPropertyBlock != null)
                {
                    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ø–∞–¥–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç)
                    // debugRayMaterialPropertyBlock.SetColor("_Color", Color.green);
                    // Graphics.DrawMesh(debugRayMesh, Matrix4x4.TRS(hitInfo.point, Quaternion.LookRotation(hitInfo.normal), Vector3.one * 0.05f), debugRayMaterial, 0, null, 0, debugRayMaterialPropertyBlock);
                    // Debug.DrawRay(currentRayOrigin, currentRayDirection * hitInfo.distance, Color.green, 0.6f);
                }

                // –§–∏–ª—å—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø—Ä–∏–º–µ—Ä):
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –Ω–µ-–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∏–ª–∏ –∏–≥—Ä–æ–∫–∞
                if (hitInfo.collider.gameObject.CompareTag("Player"))
                {
                    if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –†–µ–π–∫–∞—Å—Ç #{i + 1} ({hitInfo.collider.name}) –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù –ø–æ –¢–ï–ì–£: –¢–µ–≥='{hitInfo.collider.gameObject.tag}'");
                    continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∏–≥—Ä–æ–∫–∞
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—Ö–æ–¥–∏—Ç –ª–∏ –æ–±—ä–µ–∫—Ç –≤ —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö
                if (!string.IsNullOrEmpty(ignoreObjectNames))
                {
                    string[] ignoreNames = ignoreObjectNames.Split(',');
                    foreach (string name in ignoreNames)
                    {
                        if (hitInfo.collider.gameObject.name.Contains(name.Trim()))
                        {
                            if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –†–µ–π–∫–∞—Å—Ç #{i + 1} ({hitInfo.collider.name}) –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù - –æ–±—ä–µ–∫—Ç –≤ —Å–ø–∏—Å–∫–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö");
                            continue;
                        }
                    }
                }

                // –î–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π: –¥–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
                // if (hitInfo.collider.gameObject.name.StartsWith("MyARPlane_Debug_"))
                // {
                //     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π
                //     bool isPersistent = IsPlanePersistent(hitInfo.collider.gameObject);

                //     if (!isPersistent)
                //     {
                //         if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –†–µ–π–∫–∞—Å—Ç #{i + 1} ({hitInfo.collider.name}) –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù - –Ω–µ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å");
                //         continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –Ω–µ-–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
                //     }
                //     else
                //     {
                //         if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –†–µ–π–∫–∞—Å—Ç #{i + 1} –ü–û–ü–ê–õ –≤ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—É—é –ø–ª–æ—Å–∫–æ—Å—Ç—å: {hitInfo.collider.gameObject.name}");
                //     }
                // }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –±–ª–∏–∑–∫–æ –∫ –∫–∞–º–µ—Ä–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —á–∞—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏)
                // –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏, –µ—Å–ª–∏ –∫–∞–º–µ—Ä–∞ –≤–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞
                if (hitInfo.distance < minHitDistanceThreshold)
                {
                    if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –†–µ–π–∫–∞—Å—Ç #{i + 1} ({hitInfo.collider.name}) –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù –ø–æ –î–ò–°–¢–ê–ù–¶–ò–ò: {hitInfo.distance:F3}–º < {minHitDistanceThreshold:F3}–º");
                    continue;
                }

                float angleWithUp = Vector3.Angle(hitInfo.normal, Vector3.up);
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º maxWallNormalAngleDeviation –∏–∑ –ø–æ–ª–µ–π –∫–ª–∞—Å—Å–∞, –∞ –Ω–µ maxAllowedWallAngleDeviation, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ - —Å—Ç–∞—Ä–æ–µ/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è
                bool isVerticalEnough = angleWithUp > (90f - maxWallNormalAngleDeviation) && angleWithUp < (90f + maxWallNormalAngleDeviation);

                if (enableDetailedRaycastLogging)
                {
                    Debug.Log($"[ARManagerInitializer2-UOCP] –†–ï–ô–ö–ê–°–¢ #{i + 1} ({hitInfo.collider.name}) –ü–†–û–í–ï–†–ö–ê –ù–û–†–ú–ê–õ–ò: " +
                              $"–î–∏—Å—Ç–∞–Ω—Ü–∏—è={hitInfo.distance:F3} (Min={minHitDistanceThreshold:F3}), " +
                              $"–ù–æ—Ä–º–∞–ª—å={hitInfo.normal:F3}, –£–≥–æ–ª —Å Vector3.up={angleWithUp:F1}¬∞, " +
                              $"–ö—Ä–∏—Ç–µ—Ä–∏–π–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (maxWallNormalAngleDeviation)={maxWallNormalAngleDeviation:F1}¬∞, " +
                              $"–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ={isVerticalEnough}");
                }

                if (isVerticalEnough)
                {
                    raysHitValidSurface++;
                    successfulHits.Add(hitInfo);
                    hitWeights.Add(currentWeight); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å —ç—Ç–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è

                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫–∏ (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ/–≤–µ—Å)
                    // –ú–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ª—É—á—à–µ (–±–ª–∏–∂–µ –∏/–∏–ª–∏ –±–æ–ª–µ–µ —É–≤–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ)
                    float currentHitMetric = hitInfo.distance / currentWeight;

                    if (currentHitMetric < bestDistance) // bestDistance –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ bestMetric
                    {
                        bestDistance = currentHitMetric; // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à—É—é –º–µ—Ç—Ä–∏–∫—É
                                                         // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–æ—Ä–º–∞–ª—å –æ—Ç —ç—Ç–æ–≥–æ –ª—É—á—à–µ–≥–æ —Ö–∏—Ç–∞
                                                         // –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –¥–∞—Å—Ç –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
                                                         // –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (actualBestDistance, actualBestNormal) –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –æ–±—ä—è–≤–ª–µ–Ω—ã.
                                                         // –ò—Ö –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±—ä—è–≤–∏—Ç—å –≤—ã—à–µ, –µ—Å–ª–∏ —ç—Ç–∞ –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.
                                                         // actualBestDistanceForSingleHit = hitInfo.distance; 
                                                         // actualBestNormalForSingleHit = hitInfo.normal;

                        bestNormal = hitInfo.normal; // –ü–æ–∫–∞ —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª—å –ª—É—á—à–µ–≥–æ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ö–∏—Ç–∞ —Å—é–¥–∞
                        bestConfidence = currentWeight; // –ò –µ–≥–æ –≤–µ—Å (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)

                        didHit = true;
                        if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –†–µ–π–∫–∞—Å—Ç #{i+1} –û–ë–ù–û–í–ò–õ –õ–£–ß–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ (–æ–¥–∏–Ω–æ—á–Ω—ã–π): –ú–µ—Ç—Ä–∏–∫–∞={currentHitMetric:F2} (–†–∞—Å—Å—Ç={hitInfo.distance:F2}/–í–µ—Å={currentWeight:F1}), –ù–æ—Ä–º–∞–ª—å={hitInfo.normal:F2}");
                    }
                }
                else
                {
                    if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –†–µ–π–∫–∞—Å—Ç #{i + 1} ({hitInfo.collider.name}) –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù –ø–æ –ù–û–†–ú–ê–õ–ò: –£–≥–æ–ª —Å Vector3.up={angleWithUp:F1}¬∞, –ù–µ–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞ (isVerticalEnough={isVerticalEnough}, maxWallNormalAngleDeviation={maxWallNormalAngleDeviation:F1}¬∞)");
                }
            }
            else
            {
                if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –†–µ–π–∫–∞—Å—Ç #{i + 1} –ü–†–û–ú–ê–•");
                Debug.DrawRay(currentRayOrigin, currentRayDirection * maxRayDistance, Color.red, 1.0f); // –î–û–ë–ê–í–õ–ï–ù–û: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–∞—Ö–Ω—É–≤—à–µ–≥–æ—Å—è –ª—É—á–∞
                if (debugRayMaterial != null && debugRayMaterialPropertyBlock != null)
                {
                    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–∞—Ö–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç)
                    // debugRayMaterialPropertyBlock.SetColor("_Color", Color.magenta);
                    // Graphics.DrawMesh(debugRayMesh, Matrix4x4.TRS(currentRayOrigin + currentRayDirection * maxRayDistance, Quaternion.identity, Vector3.one * 0.03f), debugRayMaterial, 0, null, 0, debugRayMaterialPropertyBlock);
                    // Debug.DrawRay(currentRayOrigin, currentRayDirection * maxRayDistance, Color.magenta, 0.3f);
                }
            }
        }

        if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] --- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Ä–∏–∏ —Ä–µ–π–∫–∞—Å—Ç–æ–≤ ---");
        if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –í—Å–µ–≥–æ –≤—ã–ø—É—â–µ–Ω–æ –ª—É—á–µ–π: {totalRaysShot}");
        if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –ü–æ–ø–∞–ª–æ –≤–æ —á—Ç–æ-—Ç–æ (–¥–æ —Ñ–∏–ª—å—Ç—Ä–∞): {raysHitSomething}");
        if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –í–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–ø–∞–¥–∞–Ω–∏–π (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞): {raysHitValidSurface}");
        if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ successfulHits: {successfulHits.Count}");
        if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –§–ª–∞–≥ didHit (–±—ã–ª –ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω –≤–∞–ª–∏–¥–Ω—ã–π —Ö–∏—Ç, –æ–±–Ω–æ–≤–∏–≤—à–∏–π bestNormal/bestDistance): {didHit}");

        if (raysHitSomething > 0 && raysHitValidSurface == 0)
        {
            Debug.LogWarning("[ARManagerInitializer2-UOCP] –í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è —Ä–µ–π–∫–∞—Å—Ç–æ–≤ –±—ã–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–ª–æ–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å—Ü–µ–Ω–µ.");
        }

        float bestClusterWeight = 0f; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è bestClusterWeight
        if (successfulHits.Count > 3)
        {
            if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–π (–ù–∞–π–¥–µ–Ω–æ {successfulHits.Count} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ö–∏—Ç–æ–≤).");
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ –Ω–æ—Ä–º–∞–ª–∏
            var distanceClusters = new Dictionary<float, List<int>>();

            for (int i = 0; i < successfulHits.Count; i++)
            {
                float distance = successfulHits[i].distance;
                bool foundCluster = false;

                foreach (var clusterCenter in distanceClusters.Keys.ToList())
                {
                    if (Mathf.Abs(distance - clusterCenter) < 0.3f) // –ü–æ—Ä–æ–≥ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
                    {
                        distanceClusters[clusterCenter].Add(i);
                        foundCluster = true;
                        break;
                    }
                }

                if (!foundCluster)
                {
                    distanceClusters[distance] = new List<int> { i };
                }
            }

            // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –∑–Ω–∞—á–∏–º—ã–π –∫–ª–∞—Å—Ç–µ—Ä (—Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Å—É–º–º–∞—Ä–Ω—ã–º –≤–µ—Å–æ–º)
            // float bestClusterWeight = 0f; // –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã—à–µ
            float bestClusterDistance = 0f;
            Vector3 bestClusterNormal = Vector3.zero;

            foreach (var cluster in distanceClusters)
            {
                float clusterWeight = 0f;
                Vector3 clusterNormal = Vector3.zero;

                foreach (int index in cluster.Value)
                {
                    clusterWeight += hitWeights[index];
                    clusterNormal += successfulHits[index].normal * hitWeights[index];
                }

                if (clusterWeight > bestClusterWeight) // –ò—Å–ø–æ–ª—å–∑—É–µ–º bestClusterWeight –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ scope
                {
                    bestClusterWeight = clusterWeight; // –û–±–Ω–æ–≤–ª—è–µ–º bestClusterWeight –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ scope
                    bestClusterDistance = cluster.Key;
                    if (clusterWeight > 0) bestClusterNormal = (clusterNormal / clusterWeight).normalized; // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ª–∏—Ç–µ–ª—å
                    else bestClusterNormal = Vector3.zero;
                }
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ª—É—á—à–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–Ω–∞—á–∏–º—ã–π
            if (bestClusterWeight > bestConfidence)
            {
                bestDistance = bestClusterDistance; // –≠—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞
                bestNormal = bestClusterNormal;
                bestConfidence = bestClusterWeight; // –°—É–º–º–∞—Ä–Ω—ã–π –≤–µ—Å –∫–ª–∞—Å—Ç–µ—Ä–∞
                didHit = true; // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–∏–ª–∞ –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –î–∏—Å—Ç–∞–Ω—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞={bestDistance:F2}, –ù–æ—Ä–º–∞–ª—å –∫–ª–∞—Å—Ç–µ—Ä–∞={bestNormal:F2}, –í–µ—Å –∫–ª–∞—Å—Ç–µ—Ä–∞={bestConfidence:F1}");
            }
            else
            {
                if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –¥–∞–ª–∞ –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, —á–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –ª—É—á—à–∏–π —Ö–∏—Ç (–í–µ—Å –∫–ª–∞—Å—Ç–µ—Ä–∞: {bestClusterWeight:F1} <= –í–µ—Å –ª—É—á—à–µ–≥–æ —Ö–∏—Ç–∞: {bestConfidence:F1})");
            }
        }

        Vector3 finalPlanePosition;
        Quaternion finalPlaneRotation;
        float actualDistanceFromCameraForPlane = 2.2f; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è actualDistanceFromCameraForPlane

        if (didHit) // –ï—Å–ª–∏ –±—ã–ª —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞–ª–∏–¥–Ω—ã–π —Ö–∏—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π)
        {
            // –ï—Å–ª–∏ didHit=true, —Ç–æ bestDistance —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏–±–æ –º–µ—Ç—Ä–∏–∫—É –æ—Ç –ª—É—á—à–µ–≥–æ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ö–∏—Ç–∞,
            // –ª–∏–±–æ —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ª—É—á—à–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞. bestNormal –∏ bestConfidence —Ç–∞–∫–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.

            float determinedDistance;
            Vector3 determinedHitPoint; // –î–û–ë–ê–í–õ–ï–ù–û: –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—á–∫–∏ –ø–æ–ø–∞–¥–∞–Ω–∏—è
            if (successfulHits.Count > 3 && bestClusterWeight > 0) // –ï—Å–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–∞ –∏ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            {
                determinedDistance = bestDistance; // bestDistance —É–∂–µ —Ö—Ä–∞–Ω–∏—Ç —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞
                determinedHitPoint = cameraPosition + initialRayDirection * determinedDistance; // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è
                if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ö–õ–ê–°–¢–ï–†–ò–ó–ê–¶–ò–ò: {determinedDistance:F2}–º");
            }
            else // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ö–∏—Ç (–µ—Å–ª–∏ –±—ã–ª)
            {
                // –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ RaycastHit, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π bestConfidence –∏ bestDistance (–º–µ—Ç—Ä–∏–∫–µ)
                float targetMetric = bestDistance;
                determinedDistance = 2.2f; // –§–æ–ª–ª–±—ç–∫, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–º
                determinedHitPoint = cameraPosition + initialRayDirection * determinedDistance; // –î–û–ë–ê–í–õ–ï–ù–û: –§–æ–ª–ª–±—ç–∫ —Ç–æ—á–∫–∞
                bool foundOriginalHit = false;
                for (int k = 0; k < successfulHits.Count; ++k)
                {
                    if (Mathf.Approximately(successfulHits[k].distance / hitWeights[k], targetMetric) && Mathf.Approximately(hitWeights[k], bestConfidence))
                    {
                        determinedDistance = successfulHits[k].distance;
                        determinedHitPoint = successfulHits[k].point; // –î–û–ë–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –ø–æ–ø–∞–¥–∞–Ω–∏—è
                        foundOriginalHit = true;
                        if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –õ–£–ß–®–ï–ì–û –û–î–ò–ù–û–ß–ù–û–ì–û –•–ò–¢–ê #{k}: {determinedDistance:F2}–º (–ù–æ—Ä–º–∞–ª—å: {successfulHits[k].normal})");
                        break;
                    }
                }
                if (!foundOriginalHit && successfulHits.Count > 0)
                { // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –º–µ—Ç—Ä–∏–∫–µ, –Ω–æ —Ö–∏—Ç—ã –±—ã–ª–∏
                    determinedDistance = successfulHits[0].distance; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–ø–∞–≤—à–∏–π, –∫–∞–∫ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π
                    determinedHitPoint = successfulHits[0].point; // –î–û–ë–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –ø–æ–ø–∞–¥–∞–Ω–∏—è
                    bestNormal = successfulHits[0].normal; // –ò –µ–≥–æ –Ω–æ—Ä–º–∞–ª—å
                                                           // Debug.LogWarning($"[ARManagerInitializer2-UOCP] –ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—É—á—à–∏–π –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ö–∏—Ç –ø–æ –º–µ—Ç—Ä–∏–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π —Ö–∏—Ç: –î–∏—Å—Ç–∞–Ω—Ü–∏—è={determinedDistance:F2}–º, –ù–æ—Ä–º–∞–ª—å={bestNormal}");
                }
                else if (!foundOriginalHit && successfulHits.Count == 0)
                { // –≠—Ç–∞ –≤–µ—Ç–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –¥–æ—Å—Ç–∏–≥–∞—Ç—å—Å—è –µ—Å–ª–∏ didHit=true
                    Debug.LogError($"[ARManagerInitializer2-UOCP] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: didHit=true, –Ω–æ successfulHits –ø—É—Å—Ç –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ö–∏—Ç.");
                }
            }

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –ø–æ–ø–∞–¥–∞–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–º–µ—â–µ–Ω–∏–µ–º –ü–û –ù–û–†–ú–ê–õ–ò
            actualDistanceFromCameraForPlane = determinedDistance;
            actualDistanceFromCameraForPlane = Mathf.Clamp(actualDistanceFromCameraForPlane, minHitDistanceThreshold, 6.0f);
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º –ø–æ –Ω–æ—Ä–º–∞–ª–∏
            finalPlanePosition = determinedHitPoint + bestNormal * 0.005f; // –ù–µ–±–æ–ª—å—à–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –û–¢ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ø–æ –Ω–æ—Ä–º–∞–ª–∏
            
            if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] üìè –†–ï–ó–£–õ–¨–¢–ê–¢ –†–ï–ô–ö–ê–°–¢–ê: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ = {actualDistanceFromCameraForPlane:F2}–º, –ü–æ–∑–∏—Ü–∏—è = {finalPlanePosition:F2}, –¢–æ—á–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è = {determinedHitPoint:F2}, –ù–æ—Ä–º–∞–ª—å = {bestNormal:F2}");

            // –û—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º Z –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –ü–û –Ω–æ—Ä–º–∞–ª–∏ –∫ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (—á—Ç–æ–±—ã –ø–ª–æ—Å–∫–æ—Å—Ç—å "–ª–µ–∂–∞–ª–∞" –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏)
            // forward –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –±—É–¥–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –û–¢ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.
            finalPlaneRotation = Quaternion.LookRotation(bestNormal, mainCamera.transform.up);  // –ò–ó–ú–ï–ù–ï–ù–û: arCamera -> mainCamera
            // –ï—Å–ª–∏ bestNormal –ø–æ—á—Ç–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞ arCamera.transform.up (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª/–ø–æ—Ç–æ–ª–æ–∫), LookRotation –º–æ–∂–µ—Ç –¥–∞—Ç—å –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è "up" –≤–µ–∫—Ç–æ—Ä–∞.
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π up –≤–µ–∫—Ç–æ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, cameraRight, –µ—Å–ª–∏ normal.y –±–ª–∏–∑–æ–∫ –∫ +/-1.
            if (Mathf.Abs(Vector3.Dot(bestNormal, mainCamera.transform.up)) > 0.95f)
            { // –ò–ó–ú–ï–ù–ï–ù–û: arCamera -> mainCamera
                finalPlaneRotation = Quaternion.LookRotation(bestNormal, -cameraForward); // –ò—Å–ø–æ–ª—å–∑—É–µ–º -cameraForward –∫–∞–∫ "–≤–µ—Ä—Ö" –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
                if (enableDetailedRaycastLogging) Debug.LogWarning($"[ARManagerInitializer2-UOCP] –ù–æ—Ä–º–∞–ª—å ({bestNormal}) –ø–æ—á—Ç–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞ camera.up. –ò—Å–ø–æ–ª—å–∑—É–µ–º -cameraForward –∫–∞–∫ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç LookRotation.");
            }

            if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] üß≠ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –ü–û–°–õ–ï –†–ï–ô–ö–ê–°–¢–ê: Pos={finalPlanePosition:F2}, Rot(–≠–π–ª–µ—Ä)={finalPlaneRotation.eulerAngles:F1}");
        }
        else // –ï—Å–ª–∏ didHit == false (–Ω–∏ –æ–¥–∏–Ω —Ä–µ–π–∫–∞—Å—Ç –Ω–µ –ø–æ–ø–∞–ª –∏–ª–∏ –≤—Å–µ –±—ã–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã)
        {
            Debug.LogWarning("[ARManagerInitializer2-UOCP] ‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω —Ä–µ–π–∫–∞—Å—Ç –Ω–µ –¥–∞–ª –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≠–í–†–ò–°–¢–ò–ö–ê.");
            // –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —Ä–µ–π–∫–∞—Å—Ç–∏–Ω–≥ –Ω–µ –Ω–∞—à–µ–ª –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π
            bool foundARPlane = false;
            if (planeManager != null && planeManager.trackables.count > 0)
            {
                if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –≠–≤—Ä–∏—Å—Ç–∏–∫–∞: –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é AR –ø–ª–æ—Å–∫–æ—Å—Ç—å ({planeManager.trackables.count} —à—Ç.)...");
                ARPlane bestMatchPlane = null;
                float bestMatchScore = 0f;
                float bestMatchDistance = 0f;

                foreach (var plane in planeManager.trackables)
                {
                    if (plane == null) continue;

                    Vector3 planeCenter = plane.center;
                    Vector3 planeSurfaceNormal = plane.normal;

                    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–¶–ï–ù–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –ü–õ–û–°–ö–û–°–¢–ò –õ–£–ß–£
                    // –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä –ø–ª–æ—Å–∫–æ—Å—Ç–∏

                    // –§–∞–∫—Ç–æ—Ä –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ - –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞ –ª—É—á—É
                    // float angleWithRay = Vector3.Angle(planeSurfaceNormal, -rayDirection); // –ò–ó–ú–ï–ù–ï–ù–û: rayDirection -> initialRayDirection
                    float angleWithRay = Vector3.Angle(planeSurfaceNormal, -initialRayDirection); // –ò—Å–ø–æ–ª—å–∑—É–µ–º initialRayDirection
                    float orientationFactor = Mathf.Cos(angleWithRay * Mathf.Deg2Rad);
                    if (orientationFactor < 0.3f) continue; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç–∏ —Å –ø–ª–æ—Ö–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π

                    // –§–∞–∫—Ç–æ—Ä —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è - –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–ª–æ—Å–∫–æ—Å—Ç—å –±–ª–∏–∑–∫–æ –∫ –ø—Ä–æ–µ–∫—Ü–∏–∏ –ª—É—á–∞
                    Vector3 toCenterVector = planeCenter - cameraPosition;
                    // float projectionLength = Vector3.Dot(toCenterVector, rayDirection); // –ò–ó–ú–ï–ù–ï–ù–û: rayDirection -> initialRayDirection
                    float projectionLength = Vector3.Dot(toCenterVector, initialRayDirection); // –ò—Å–ø–æ–ª—å–∑—É–µ–º initialRayDirection

                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –ø–æ–∑–∞–¥–∏ –∫–∞–º–µ—Ä—ã –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
                    if (projectionLength <= 0.5f || projectionLength > 8.0f) continue;

                    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –ª—É—á–∞ –∫ —Ü–µ–Ω—Ç—Ä—É –ø–ª–æ—Å–∫–æ—Å—Ç–∏
                    // Vector3 projectedPoint = cameraPosition + rayDirection * projectionLength; // –ò–ó–ú–ï–ù–ï–ù–û: rayDirection -> initialRayDirection
                    Vector3 projectedPoint = cameraPosition + initialRayDirection * projectionLength; // –ò—Å–ø–æ–ª—å–∑—É–µ–º initialRayDirection
                    float perpendicularDistance = Vector3.Distance(projectedPoint, planeCenter);

                    // –§–∞–∫—Ç–æ—Ä –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è - –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–∫–∞ –ø—Ä–æ–µ–∫—Ü–∏–∏ –±–ª–∏–∑–∫–∞ –∫ —Ü–µ–Ω—Ç—Ä—É –ø–ª–æ—Å–∫–æ—Å—Ç–∏
                    // –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–ª–æ—Å–∫–æ—Å—Ç–∏ - –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –¥–æ–ø—É—Å–∫–∞–µ–º –±–æ–ª—å—à–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    float sizeCompensation = Mathf.Sqrt(plane.size.x * plane.size.y);
                    float maxPerpDistance = 0.5f + sizeCompensation * 0.5f;

                    if (perpendicularDistance > maxPerpDistance) continue;

                    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Å–∫–æ—Ä –¥–ª—è —ç—Ç–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
                    float perpDistanceFactor = 1.0f - (perpendicularDistance / maxPerpDistance);
                    float distanceFactor = 1.0f - Mathf.Clamp01((projectionLength - 1.0f) / 7.0f); // –ë–ª–∏–∂–µ –ª—É—á—à–µ
                    float sizeFactor = Mathf.Clamp01(sizeCompensation / 2.0f); // –ß–µ–º –±–æ–ª—å—à–µ –ø–ª–æ—Å–∫–æ—Å—Ç—å, —Ç–µ–º –ª—É—á—à–µ

                    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
                    float planeScore = orientationFactor * 0.4f + perpDistanceFactor * 0.4f + distanceFactor * 0.1f + sizeFactor * 0.1f;

                    if (planeScore > bestMatchScore)
                    {
                        bestMatchScore = planeScore;
                        bestMatchPlane = plane;
                        bestMatchDistance = projectionLength;
                    }
                }

                if (bestMatchPlane != null && bestMatchScore > 0.6f) // –¢—Ä–µ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–∏–π —Å–∫–æ—Ä
                {
                    actualDistanceFromCameraForPlane = bestMatchDistance - 0.05f;
                    actualDistanceFromCameraForPlane = Mathf.Clamp(actualDistanceFromCameraForPlane, 1.0f, 5.0f);
                    bool isVertical = Mathf.Abs(Vector3.Dot(bestMatchPlane.normal, Vector3.up)) < 0.3f;
                    if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] üìè –≠–≤—Ä–∏—Å—Ç–∏–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è AR –ø–ª–æ—Å–∫–æ—Å—Ç—å '{bestMatchPlane.name}' –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ {actualDistanceFromCameraForPlane:F2}–º (—Å–∫–æ—Ä: {bestMatchScore:F2}, {(isVertical ? "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è" : "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è")})");
                    foundARPlane = true;
                    bestNormal = bestMatchPlane.normal; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª—å –Ω–∞–π–¥–µ–Ω–Ω–æ–π AR –ø–ª–æ—Å–∫–æ—Å—Ç–∏
                }
                else
                {
                    if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –≠–≤—Ä–∏—Å—Ç–∏–∫–∞: –ü–æ–¥—Ö–æ–¥—è—â–∞—è AR-–ø–ª–æ—Å–∫–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–º–∞–∫—Å. —Å–∫–æ—Ä –±—ã–ª {bestMatchScore:F2}, –ø–æ—Ä–æ–≥ 0.6).");
                }
            }

            if (!foundARPlane)
            {
                // Debug.LogWarning("[ARManagerInitializer2-UOCP] –≠–≤—Ä–∏—Å—Ç–∏–∫–∞: AR-–ø–ª–æ—Å–∫–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ –ø–æ–¥–æ—à–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ.");
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

                // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
                float viewportY = normalizedCenterY; // –ò–ó–ú–ï–ù–ï–ù–û: normalizedY -> normalizedCenterY
                float adaptiveBaseDistance;

                // –î–ª—è —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç–µ–π —ç–∫—Ä–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                if (viewportY < 0.3f)
                {
                    // –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞ - –æ–±—ã—á–Ω–æ –±–ª–∏–∑–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã
                    adaptiveBaseDistance = 1.8f;
                }
                else if (viewportY > 0.7f)
                {
                    // –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞ - –æ–±—ã—á–Ω–æ –¥–∞–ª—å–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã
                    adaptiveBaseDistance = 2.5f;
                }
                else
                {
                    // –°–µ—Ä–µ–¥–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞ - —Å—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                    adaptiveBaseDistance = 2.2f;
                }

                // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                // float sizeAdjustment = estimatedPlaneWidthInMetersBasedOnArea * 0.3f; // –ò–ó–ú–ï–ù–ï–ù–û –Ω–∏–∂–µ
                // –í—ã—á–∏—Å–ª—è–µ–º estimatedPlaneWidthInMetersBasedOnArea –Ω–∞ –æ—Å–Ω–æ–≤–µ actualDistanceFromCameraForPlane, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–æ–π –≤—ã—à–µ
                float tempWorldHeightAtActualDistance = 2.0f * actualDistanceFromCameraForPlane * Mathf.Tan(mainCamera.fieldOfView * 0.5f * Mathf.Deg2Rad);
                float tempWorldWidthAtActualDistance = tempWorldHeightAtActualDistance * mainCamera.aspect;
                float estimatedPlaneWidthInMetersBasedOnArea = (area.width / (float)textureWidth) * tempWorldWidthAtActualDistance;

                float sizeAdjustment = estimatedPlaneWidthInMetersBasedOnArea * 0.3f;
                float positionAdjustment = Mathf.Abs(normalizedCenterX - 0.5f) * 0.5f; // –ò–ó–ú–ï–ù–ï–ù–û: normalizedX -> normalizedCenterX // –ë–æ–∫–æ–≤—ã–µ —á–∞—Å—Ç–∏ –Ω–µ–º–Ω–æ–≥–æ –¥–∞–ª—å—à–µ

                actualDistanceFromCameraForPlane = adaptiveBaseDistance + sizeAdjustment + positionAdjustment;
                actualDistanceFromCameraForPlane = Mathf.Clamp(actualDistanceFromCameraForPlane, 1.4f, 4.5f);
                // Debug.LogWarning($"[ARManagerInitializer2-UOCP] ‚ö†Ô∏è –≠–≤—Ä–∏—Å—Ç–∏–∫–∞: –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ = {actualDistanceFromCameraForPlane:F2}–º (est.Width={estimatedPlaneWidthInMetersBasedOnArea:F2})");
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º -initialRayDirection –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏, –∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –Ω–æ—Ä–º–∞–ª—å –¥–ª—è —Å—Ç–µ–Ω—ã
                // –î–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π (—Å—Ç–µ–Ω) –Ω–æ—Ä–º–∞–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –∏ –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ–π –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤–∑–≥–ª—è–¥–∞
                Vector3 camerForwardHorizontal = new Vector3(initialRayDirection.x, 0, initialRayDirection.z).normalized;
                bestNormal = Vector3.Cross(camerForwardHorizontal, Vector3.up).normalized; // –ù–æ—Ä–º–∞–ª—å –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–∞–º–µ—Ä—ã
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥–æ–ª–∂–Ω–∞ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ—Ä–º–∞–ª—å (–∫ –∫–∞–º–µ—Ä–µ –∏–ª–∏ –æ—Ç –∫–∞–º–µ—Ä—ã)
                Vector3 toCameraHorizontal = new Vector3(-initialRayDirection.x, 0, -initialRayDirection.z).normalized;
                if (Vector3.Dot(bestNormal, toCameraHorizontal) < 0)
                {
                    bestNormal = -bestNormal; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª—å, —á—Ç–æ–±—ã –æ–Ω–∞ —Å–º–æ—Ç—Ä–µ–ª–∞ –∫ –∫–∞–º–µ—Ä–µ
                }
            }

            finalPlanePosition = cameraPosition + initialRayDirection * actualDistanceFromCameraForPlane; // –ò–ó–ú–ï–ù–ï–ù–û: rayDirection -> initialRayDirection
            // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ª—É—á–∞—è
            Vector3 upDirectionForHeuristic = mainCamera.transform.up; // –ò–ó–ú–ï–ù–ï–ù–û: arCamera -> mainCamera
            if (Mathf.Abs(Vector3.Dot(bestNormal, mainCamera.transform.up)) > 0.95f)
            { // –ò–ó–ú–ï–ù–ï–ù–û: arCamera -> mainCamera // –ï—Å–ª–∏ –Ω–æ—Ä–º–∞–ª—å –ø–æ—á—Ç–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞ (–ø–æ–ª/–ø–æ—Ç–æ–ª–æ–∫ –ø–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–µ)
                upDirectionForHeuristic = -cameraForward;
                if (enableDetailedRaycastLogging) Debug.LogWarning($"[ARManagerInitializer2-UOCP] –≠–≤—Ä–∏—Å—Ç–∏–∫–∞: –ù–æ—Ä–º–∞–ª—å ({bestNormal}) –ø–æ—á—Ç–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞ camera.up. –ò—Å–ø–æ–ª—å–∑—É–µ–º -cameraForward –∫–∞–∫ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç LookRotation.");
            }
            finalPlaneRotation = Quaternion.LookRotation(bestNormal, upDirectionForHeuristic);
            if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] üß≠ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –ü–û –≠–í–†–ò–°–¢–ò–ö–ï: Pos={finalPlanePosition:F2}, Rot(–≠–π–ª–µ—Ä)={finalPlaneRotation.eulerAngles:F1}, –ù–æ—Ä–º–∞–ª—å={bestNormal:F2}");
        }

        // –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —É –Ω–∞—Å –µ—Å—Ç—å finalPlanePosition –∏ actualDistanceFromCameraForPlane, –º—ã –º–æ–∂–µ–º –≤—ã—á–∏—Å–ª–∏—Ç—å –º–∏—Ä–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        // –†–∞—Å—á–µ—Ç –º–∏—Ä–æ–≤—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –µ–µ –¥–æ–ª–µ –≤ –º–∞—Å–∫–µ –ò –§–ê–ö–¢–ò–ß–ï–°–ö–û–ú –†–ê–°–°–¢–û–Ø–ù–ò–ò
        float worldHeightAtActualDistance = 2.0f * actualDistanceFromCameraForPlane * Mathf.Tan(mainCamera.fieldOfView * 0.5f * Mathf.Deg2Rad); // –ò–ó–ú–ï–ù–ï–ù–û: arCamera -> mainCamera
        float worldWidthAtActualDistance = worldHeightAtActualDistance * mainCamera.aspect; // –ò–ó–ú–ï–ù–ï–ù–û: arCamera -> mainCamera

        float finalPlaneWorldWidth = (area.width / (float)textureWidth) * worldWidthAtActualDistance;
        float finalPlaneWorldHeight = (area.height / (float)textureHeight) * worldHeightAtActualDistance;
        if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –†–∞—Å—á–µ—Ç–Ω—ã–µ –º–∏—Ä–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–ª–æ—Å–∫–æ—Å—Ç–∏: –®–∏—Ä–∏–Ω–∞={finalPlaneWorldWidth:F2}–º, –í—ã—Å–æ—Ç–∞={finalPlaneWorldHeight:F2}–º (–Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ {actualDistanceFromCameraForPlane:F2}–º)");

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–∏—Ä–æ–≤–æ–π —Ä–∞–∑–º–µ—Ä –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        if (finalPlaneWorldWidth < minPlaneSizeInMeters || finalPlaneWorldHeight < minPlaneSizeInMeters)
        {
            // Debug.LogWarning($"[ARManagerInitializer2-UOCP] –ü–ª–æ—Å–∫–æ—Å—Ç—å –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ ({area.width}x{area.height}px) —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –ø–æ –º–∏—Ä–æ–≤—ã–º —Ä–∞–∑–º–µ—Ä–∞–º ({finalPlaneWorldWidth:F2}x{finalPlaneWorldHeight:F2}–º) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. Min size: {minPlaneSizeInMeters}–º. –í—ã—Ö–æ–¥.");
            return false;
        }


        // –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –Ω–∞–ª–æ–∂–µ–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º finalPlanePosition)
        if (finalPlanePosition == Vector3.zero)
        { // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            Debug.LogError("[ARManagerInitializer2-UOCP] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: finalPlanePosition —Ä–∞–≤–µ–Ω Vector3.zero –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç–∏! –í—ã—Ö–æ–¥.");
            return false;
        }

        // Check if this would overlap with an existing persistent plane
        if (usePersistentPlanes && planeConfigurator != null)
        {
            Vector3 normal = finalPlaneRotation * Vector3.forward;
            if (OverlapsWithPersistentPlanes(finalPlanePosition, normal, finalPlaneWorldWidth, finalPlaneWorldHeight))
            {
                if (enableDetailedRaycastLogging)
                    Debug.Log("[ARManagerInitializer2-UOCP] Skipping plane creation - overlaps with persistent plane");
                return false; // Skip creating this plane as it overlaps with a persistent one
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ù–µ —Å–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å, –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –∫–∞–º–µ—Ä–µ –∏ –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –Ω–µ–π
        Vector3 directionToFinalPos = finalPlanePosition - mainCamera.transform.position; // –ò–ó–ú–ï–ù–ï–ù–û: arCamera -> mainCamera
        float distanceToCamFinal = directionToFinalPos.magnitude;
        float alignmentWithCameraFinal = Vector3.Dot(mainCamera.transform.forward.normalized, directionToFinalPos.normalized); // –ò–ó–ú–ï–ù–ï–ù–û: arCamera -> mainCamera

        // –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        if (distanceToCamFinal < 0.7f && alignmentWithCameraFinal > 0.8f) // –£–≤–µ–ª–∏—á–µ–Ω—ã –æ–±–∞ –ø–æ—Ä–æ–≥–∞ - –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
        {
            Debug.LogWarning($"[ARManagerInitializer2-UOCP] ‚ö†Ô∏è –û–¢–ú–ï–ù–ê: –ü–ª–æ—Å–∫–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –∫–∞–º–µ—Ä–µ –∏ –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –Ω–µ–π (–î–∏—Å—Ç: {distanceToCamFinal:F2}–º, –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å FWD: {alignmentWithCameraFinal:F2}). Pos={finalPlanePosition:F2}");
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ù–µ —Å–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ
        float maxPlaneSize = 5.0f; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –≤ –º–µ—Ç—Ä–∞—Ö (–¥–ª—è –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã)
        if (finalPlaneWorldWidth > maxPlaneSize || finalPlaneWorldHeight > maxPlaneSize)
        {
            Debug.LogWarning($"[ARManagerInitializer2-UOCP] ‚ö†Ô∏è –û–¢–ú–ï–ù–ê: –ü–ª–æ—Å–∫–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è (–®–∏—Ä–∏–Ω–∞: {finalPlaneWorldWidth:F2}–º, –í—ã—Å–æ—Ç–∞: {finalPlaneWorldHeight:F2}–º). –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç: {maxPlaneSize}–º");
            return false;
        }

        // –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        // ... (—á–∞—Å—Ç—å —Å tooClose, similarOrientationCount, closestExistingPlane –±—ã–ª–∞ –≤—ã—à–µ, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∑–¥–µ—Å—å –∫ finalPlanePosition)
        // === –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –ü–û–ò–°–ö–ê –ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –ü–õ–û–°–ö–û–°–¢–ò ===
        var (planeToUpdate, updateDistance, updateAngleDiff) = FindClosestExistingPlane(finalPlanePosition, (finalPlaneRotation * Vector3.forward), 1.0f, 45f);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º (finalPlaneRotation * Vector3.forward) –∫–∞–∫ –Ω–æ—Ä–º–∞–ª—å, —Ç–∞–∫ –∫–∞–∫ LookRotation(normal) –¥–µ–ª–∞–µ—Ç forward –ø–ª–æ—Å–∫–æ—Å—Ç–∏ = normal.
        // –ê –Ω–∞—à FindClosestExistingPlane –æ–∂–∏–¥–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.

        if (planeToUpdate != null)
        {
            if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] üîÑ –û–ë–ù–û–í–õ–Ø–ï–ú —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–ª–æ—Å–∫–æ—Å—Ç—å '{planeToUpdate.name}'. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏: {updateDistance:F2}–º, –£–≥–æ–ª –Ω–æ—Ä–º–∞–ª–µ–π: {updateAngleDiff:F1}¬∞");

            planeToUpdate.transform.position = finalPlanePosition;
            planeToUpdate.transform.rotation = finalPlaneRotation;

            MeshFilter mf = planeToUpdate.GetComponent<MeshFilter>();
            if (mf != null)
            {
                mf.mesh = CreatePlaneMesh(finalPlaneWorldWidth, finalPlaneWorldHeight); // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—à —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
                if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] –û–±–Ω–æ–≤–ª–µ–Ω –º–µ—à –¥–ª—è '{planeToUpdate.name}', –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {finalPlaneWorldWidth:F2}x{finalPlaneWorldHeight:F2}–º");
            }

            if (visitedPlanes != null) visitedPlanes[planeToUpdate] = true;
            if (this.planeLastVisitedTime != null) this.planeLastVisitedTime[planeToUpdate] = Time.time;
            // Debug.Log($"[ARManagerInitializer2-UOCP] ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç—å '{planeToUpdate.name}' —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: Pos={finalPlanePosition:F2}, Rot={finalPlaneRotation.eulerAngles:F1}");
            return true;
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–∑-–∑–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        bool createNewPlane = true;
        foreach (GameObject existingPlane in generatedPlanes)
        {
            if (existingPlane == null) continue;
            float distBetweenFinalAndExisting = Vector3.Distance(existingPlane.transform.position, finalPlanePosition);
            float angleBetweenNormals = Vector3.Angle(existingPlane.transform.forward, (finalPlaneRotation * Vector3.forward));

            if (distBetweenFinalAndExisting < 0.35f && angleBetweenNormals < 20f) // –ü–æ—Ä–æ–≥ –¥–ª—è –±–ª–∏–∑–∫–æ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–∞
            {
                // Debug.LogWarning($"[ARManagerInitializer2-UOCP] ‚ö†Ô∏è –û–¢–ú–ï–ù–ê –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–û–ô: –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–∏–π –¥—É–±–ª–∏–∫–∞—Ç '{existingPlane.name}' (–†–∞—Å—Å—Ç: {distBetweenFinalAndExisting:F2}–º, –£–≥–æ–ª: {angleBetweenNormals:F1}¬∞). –ù–æ–≤–∞—è Pos={finalPlanePosition:F2}");
                createNewPlane = false;
                if (visitedPlanes != null && !visitedPlanes.ContainsKey(existingPlane))
                { // –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –±–ª–∏–∑–∫–∞—è –Ω–µ –±—ã–ª–∞ –ø–æ—Å–µ—â–µ–Ω–∞ –≤ —ç—Ç–æ–º –∫–∞–¥—Ä–µ, –ø–æ–º–µ—á–∞–µ–º –µ–µ.
                    visitedPlanes[existingPlane] = true;
                    // Debug.Log($"[ARManagerInitializer2-UOCP] –ë–ª–∏–∑–∫–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å '{existingPlane.name}' –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ visited, —Ç.–∫. –Ω–æ–≤–∞—è –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è.");
                }
                break;
            }
        }

        if (!createNewPlane)
        {
            return false; // –ù–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é, —Ç.–∫. –µ—Å—Ç—å –±–ª–∏–∑–∫–∏–π –¥—É–±–ª–∏–∫–∞—Ç
        }

        // –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º GameObject –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        string newPlaneName = $"MyARPlane_Debug_{planeInstanceCounter++}";
        GameObject planeObj = new GameObject(newPlaneName);
        if (enableDetailedRaycastLogging) Debug.Log($"[ARManagerInitializer2-UOCP] üß¨ –°–û–ó–î–ê–ï–ú –ù–û–í–£–Æ –ü–õ–û–°–ö–û–°–¢–¨ '{newPlaneName}'");

        planeObj.transform.position = finalPlanePosition;
        planeObj.transform.rotation = finalPlaneRotation;

        // –£—Å—Ç–∞–Ω–æ–≤–∏–º —Å–ª–æ–π –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
        if (!string.IsNullOrEmpty(planesLayerName))
        {
            int layerID = LayerMask.NameToLayer(planesLayerName);
            if (layerID != -1)
            {
                planeObj.layer = layerID;
            }
            else if (enableDetailedRaycastLogging)
            {
                Debug.LogWarning($"[ARManagerInitializer2] Layer '{planesLayerName}' not found, using default layer for plane.");
            }
        }

        MeshFilter meshFilter = planeObj.AddComponent<MeshFilter>();
        meshFilter.mesh = CreatePlaneMesh(finalPlaneWorldWidth, finalPlaneWorldHeight);

        MeshRenderer meshRenderer = planeObj.AddComponent<MeshRenderer>();
        if (this.verticalPlaneMaterial != null)
        {
            meshRenderer.material = new Material(this.verticalPlaneMaterial);
            // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            // Color color = meshRenderer.material.color;
            // color.a = 0.7f; 
            // meshRenderer.material.color = color;
        }
        else
        {
            Debug.LogError("[ARManagerInitializer2-UOCP] wallMaterialVertical is not set! Assigning default magenta.");
            Material simpleMaterial = new Material(Shader.Find("Unlit/Color"));
            simpleMaterial.color = Color.magenta;
            meshRenderer.material = simpleMaterial;
        }
        // Debug.Log($"[ARManagerInitializer2-UOCP] Applied material to {planeObj.name}. Mesh bounds: {meshFilter.mesh.bounds.size}");

        MeshCollider meshCollider = planeObj.AddComponent<MeshCollider>();
        meshCollider.sharedMesh = meshFilter.mesh;

        this.generatedPlanes.Add(planeObj);
        if (this.planeCreationTimes != null) this.planeCreationTimes[planeObj] = Time.time;
        if (this.planeLastVisitedTime != null) this.planeLastVisitedTime[planeObj] = Time.time;

        // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ TrackablesParent, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–µ –±—ã–ª —Ä–∞–≤–µ–Ω null –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        if (this.xrOrigin != null && this.xrOrigin.TrackablesParent != null)
        {
            if (this.trackablesParentInstanceID_FromStart == 0 ||
                (this.xrOrigin.TrackablesParent.gameObject.activeInHierarchy && this.xrOrigin.TrackablesParent.GetInstanceID() == this.trackablesParentInstanceID_FromStart))
            {
                planeObj.transform.SetParent(this.xrOrigin.TrackablesParent, true);
                // Debug.Log($"[ARManagerInitializer2-UOCP] –ù–æ–≤–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å '{planeObj.name}' –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ '{this.xrOrigin.TrackablesParent.name}' (ID: {this.xrOrigin.TrackablesParent.GetInstanceID()}). Final Pos relative to Parent: {planeObj.transform.localPosition:F2}");
            }
            else
            {
                Debug.LogWarning($"[ARManagerInitializer2-UOCP] –ù–æ–≤–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å '{planeObj.name}' –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ TrackablesParent (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω/–∏–∑–º–µ–Ω–µ–Ω). –û—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–Ω–µ. World Pos: {planeObj.transform.position:F2}");
            }
        }
        else
        {
            Debug.LogWarning($"[ARManagerInitializer2-UOCP] –ù–æ–≤–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å '{planeObj.name}' –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ (XROrigin/TrackablesParent null). –û—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–Ω–µ. World Pos: {planeObj.transform.position:F2}");
        }

        if (visitedPlanes != null) visitedPlanes[planeObj] = true;
        // Debug.Log($"[ARManagerInitializer2-UOCP] ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å '{planeObj.name}': WorldPos={planeObj.transform.position:F2}, WorldRot(–≠–π–ª–µ—Ä)={planeObj.transform.rotation.eulerAngles:F1}, Parent={(planeObj.transform.parent ? planeObj.transform.parent.name : "null")}");

        // --> –ù–ê–ß–ê–õ–û –î–û–ë–ê–í–õ–ï–ù–ù–û–ì–û –ö–û–î–ê
        ARWallPaintingSystem paintingSystem = FindObjectOfType<ARWallPaintingSystem>();
        if (paintingSystem != null)
        {
            paintingSystem.RegisterWallObject(planeObj);
        }
        // <-- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ù–û–ì–û –ö–û–î–ê

        generatedPlanes.Add(planeObj);
        return true;
    }

    // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –µ—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
    private void CleanupOldPlanes(Dictionary<GameObject, bool> visitedPlanesInCurrentMask) // New name for clarity
    {
        List<GameObject> planesToRemove = new List<GameObject>();

        foreach (GameObject plane in generatedPlanes)
        {
            if (plane == null) continue;

            if (IsPlanePersistent(plane))
            {
                continue;
            }

            // If plane was not re-confirmed by the current segmentation mask processing
            if (!visitedPlanesInCurrentMask.ContainsKey(plane))
            {
                float lastVisitTime = 0f;
                bool hasVisitRecord = planeLastVisitedTime.TryGetValue(plane, out lastVisitTime);

                if (hasVisitRecord)
                {
                    if (Time.time - lastVisitTime > unvisitedPlaneRemovalDelay)
                    {
                        if (enableDetailedRaycastLogging)
                            Debug.Log($"[ARManagerInitializer2-CleanupOldPlanes] Plane {plane.name} not visited in current mask. Last visit was {Time.time - lastVisitTime:F2}s ago (threshold: {unvisitedPlaneRemovalDelay}s). Adding to removal list.");
                        planesToRemove.Add(plane);
                    }
                    // else: Still within delay, do nothing this frame
                }
                else
                {
                    // Not visited in current mask AND no history in planeLastVisitedTime.
                    // This implies it's an old plane or an anomaly. Remove immediately.
                    if (enableDetailedRaycastLogging)
                        Debug.LogWarning($"[ARManagerInitializer2-CleanupOldPlanes] Plane {plane.name} not visited in current mask and no entry in planeLastVisitedTime. Adding to removal list immediately.");
                    planesToRemove.Add(plane);
                }
            }
            // If plane IS in visitedPlanesInCurrentMask, its planeLastVisitedTime was updated by UpdateOrCreatePlaneForWallArea this frame.
        }

        foreach (GameObject planeToRemove in planesToRemove)
        {
            generatedPlanes.Remove(planeToRemove);
            // Ensure removal from all tracking dictionaries
            if (planeCreationTimes.ContainsKey(planeToRemove))
            {
                planeCreationTimes.Remove(planeToRemove);
            }
            if (planeLastVisitedTime.ContainsKey(planeToRemove))
            {
                planeLastVisitedTime.Remove(planeToRemove);
            }
            if (persistentGeneratedPlanes.ContainsKey(planeToRemove))
            {
                persistentGeneratedPlanes.Remove(planeToRemove);
            }
            Destroy(planeToRemove);
        }
    }

    private (GameObject, float, float) FindClosestExistingPlane(Vector3 position, Vector3 normal, float maxDistance, float maxAngleDegrees)
    {
        GameObject closestPlane = null;
        float minDistance = float.MaxValue;
        float angleDifference = float.MaxValue;

        if (generatedPlanes == null) return (null, 0, 0);

        foreach (GameObject existingPlane in generatedPlanes)
        {
            if (existingPlane == null) continue;

            float dist = Vector3.Distance(existingPlane.transform.position, position);
            if (dist < minDistance && dist <= maxDistance)
            {
                // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ -transform.forward —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –∫–∞–∫ –∏ —É –Ω–æ–≤–æ–π 'normal'
                // –≠—Ç–æ —Å–æ–≥–ª–∞—Å—É–µ—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Quaternion.LookRotation(-normal) –∏–ª–∏ FromToRotation(Vector3.forward, -normal)
                float angle = Vector3.Angle(-existingPlane.transform.forward, normal);

                if (angle <= maxAngleDegrees)
                {
                    minDistance = dist;
                    closestPlane = existingPlane;
                    angleDifference = angle;
                }
            }
        }
        // if (closestPlane != null && enableDetailedRaycastLogging) Debug.Log($"[FindClosestExistingPlane] –ù–∞–π–¥–µ–Ω –±–ª–∏–∑–∫–∏–π: {closestPlane.name}, dist: {minDistance:F2}, angle: {angleDifference:F1}");
        // else if (enableDetailedRaycastLogging) Debug.Log("[FindClosestExistingPlane] –ë–ª–∏–∑–∫–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        return (closestPlane, minDistance, angleDifference);
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ GameObject
    public static string GetGameObjectPath(Transform transform)
    {
        if (transform == null) return "null_transform";
        string path = transform.name;
        Transform current = transform.parent;
        while (current != null)
        {
            path = current.name + "/" + path;
            current = current.parent;
        }
        return path;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ LayerMask
    public static string LayerMaskToString(LayerMask layerMask)
    {
        var included = new System.Text.StringBuilder();
        for (int i = 0; i < 32; i++)
        {
            if ((layerMask.value & (1 << i)) != 0)
            {
                string layerName = LayerMask.LayerToName(i);
                if (string.IsNullOrEmpty(layerName))
                {
                    // included.Append($"[Unnamed Layer {i}], "); // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –∏ –±–µ–∑—ã–º—è–Ω–Ω—ã–µ —Å–ª–æ–∏
                }
                else
                {
                    included.Append($"[{layerName} (id:{i})], ");
                }
            }
        }
        if (included.Length > 0 && included[included.Length - 1] == ' ' && included[included.Length - 2] == ',')
        {
            included.Length -= 2; // –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø—è—Ç—É—é –∏ –ø—Ä–æ–±–µ–ª
        }
        else if (included.Length == 0)
        {
            return "NONE";
        }
        return included.ToString();
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏–∑–≤–Ω–µ
    public Material VerticalPlaneMaterial => verticalPlaneMaterial;
    public Material HorizontalPlaneMaterial => horizontalPlaneMaterial;

    // New method to make a plane persistent
    public bool MakePlanePersistent(GameObject plane)
    {
        if (plane == null || !generatedPlanes.Contains(plane))
            return false;

        // Mark as persistent in our tracking
        persistentGeneratedPlanes[plane] = true;

        // Apply visual highlight if enabled
        if (highlightPersistentPlanes)
        {
            MeshRenderer renderer = plane.GetComponent<MeshRenderer>();
            if (renderer != null && renderer.material != null)
            {
                renderer.material.color = persistentPlaneColor;
            }
        }

        Debug.Log($"[ARManagerInitializer2] Made plane {plane.name} persistent");
        return true;
    }

    // New method to check if a plane is persistent
    public bool IsPlanePersistent(GameObject plane)
    {
        if (plane == null) return false;
        return persistentGeneratedPlanes.TryGetValue(plane, out bool isPersistent) && isPersistent;
    }

    // New method to remove persistence from a plane
    public bool RemovePlanePersistence(GameObject plane)
    {
        if (plane == null || !persistentGeneratedPlanes.ContainsKey(plane))
            return false;

        persistentGeneratedPlanes.Remove(plane);

        // Restore original material color
        if (highlightPersistentPlanes)
        {
            MeshRenderer renderer = plane.GetComponent<MeshRenderer>();
            if (renderer != null && renderer.material != null)
            {
                // Determine if it's a vertical or horizontal plane and use appropriate color
                Vector3 normal = plane.transform.forward.normalized;
                float dotUp = Vector3.Dot(normal, Vector3.up);
                bool isVertical = Mathf.Abs(dotUp) < 0.25f;

                if (isVertical && verticalPlaneMaterial != null)
                {
                    renderer.material.color = verticalPlaneMaterial.color;
                }
                else if (horizontalPlaneMaterial != null)
                {
                    renderer.material.color = horizontalPlaneMaterial.color;
                }
            }
        }

        Debug.Log($"[ARManagerInitializer2] Removed persistence from plane {plane.name}");
        return true;
    }

    // Check if a new plane would overlap with existing persistent planes
    private bool OverlapsWithPersistentPlanes(Vector3 position, Vector3 normal, float width, float height)
    {
        if (!usePersistentPlanes || persistentGeneratedPlanes.Count == 0)
            return false;

        float maxOverlapDistance = 0.5f; // Maximum distance to consider overlap (increased from 0.3f)
        float maxAngleDifference = 25f; // Maximum angle difference to consider overlap (reduced from 30f)

        foreach (var kvp in persistentGeneratedPlanes)
        {
            GameObject persistentPlane = kvp.Key;
            bool isPersistent = kvp.Value;

            if (persistentPlane == null || !isPersistent)
                continue;

            // Check distance and angle
            float distance = Vector3.Distance(position, persistentPlane.transform.position);
            float angle = Vector3.Angle(normal, persistentPlane.transform.forward);

            if (distance < maxOverlapDistance && angle < maxAngleDifference)
            {
                // Check size overlap
                MeshFilter meshFilter = persistentPlane.GetComponent<MeshFilter>();
                if (meshFilter != null && meshFilter.mesh != null)
                {
                    Vector3 meshSize = meshFilter.mesh.bounds.size;
                    // If the new plane is similar in size or smaller, consider it an overlap
                    if (width <= meshSize.x * 1.5f && height <= meshSize.y * 1.5f)
                    {
                        return true;
                    }
                }
            }
        }

        return false;
    }

    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π")]
    [Tooltip("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö), –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–ª–æ—Å–∫–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å—Å—è '—Å—Ç–∞–±–∏–ª—å–Ω–æ–π' –∏ —Å—Ç–∞—Ç—å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π.")]
    [SerializeField] private float planeStableTimeThreshold = 0.1f; // –í—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π
    [Tooltip("–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º '–ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–π' –ø–ª–æ—Å–∫–æ—Å—Ç–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)")]
    [SerializeField] private float unvisitedPlaneRemovalDelay = 0.5f;

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –≤ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ
    private void MakeStablePlanesPersistent()
    {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        float currentTime = Time.time;
        int newPersistentCount = 0;

        foreach (GameObject plane in generatedPlanes)
        {
            if (plane == null)
                continue;

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –ø–ª–æ—Å–∫–æ—Å—Ç—å —É–∂–µ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è
            if (IsPlanePersistent(plane))
                continue;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–ª–æ—Å–∫–æ—Å—Ç—å
            if (planeCreationTimes.TryGetValue(plane, out float creationTime))
            {
                float planeAge = currentTime - creationTime;
                if (planeAge >= planeStableTimeThreshold)
                {
                    // –≠—Ç–∞ –ø–ª–æ—Å–∫–æ—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–∞ - –¥–µ–ª–∞–µ–º –µ–µ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π
                    if (MakePlanePersistent(plane))
                    {
                        newPersistentCount++;
                    }
                }
            }
        }

        if (newPersistentCount > 0)
        {
            Debug.Log($"[ARManagerInitializer2] Made {newPersistentCount} stable planes persistent. Total persistent: {persistentGeneratedPlanes.Count}");
        }
    }

    // New method to make all current planes persistent
    public void MakeAllPlanesPersistent()
    {
        if (!usePersistentPlanes)
        {
            Debug.LogWarning("[ARManagerInitializer2] Persistent planes feature is disabled (usePersistentPlanes = false)");
            return;
        }

        int madePersistentCount = 0;
        foreach (GameObject plane in generatedPlanes)
        {
            if (plane == null) continue;

            // Skip if already persistent
            if (IsPlanePersistent(plane)) continue;

            // Make persistent
            if (MakePlanePersistent(plane))
            {
                madePersistentCount++;
            }
        }

        Debug.Log($"[ARManagerInitializer2] Made {madePersistentCount} planes persistent");
    }

    // Method to set the layer of all generated planes
    public void SetPlanesLayer(string layerName)
    {
        int layerID = LayerMask.NameToLayer(layerName);
        if (layerID == -1)
        {
            Debug.LogError($"[ARManagerInitializer2] Layer '{layerName}' not found in project settings!");
            return;
        }

        int count = 0;
        foreach (GameObject plane in generatedPlanes)
        {
            if (plane == null) continue;

            plane.layer = layerID;
            count++;
        }

        // Update the stored layer name
        planesLayerName = layerName;

        Debug.Log($"[ARManagerInitializer2] Set layer '{layerName}' (ID: {layerID}) for {count} planes");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
    private void InitializePersistentPlanesSystem()
    {
        if (!usePersistentPlanes)
        {
            Debug.Log("[ARManagerInitializer2] Persistent planes system is disabled (usePersistentPlanes = false)");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–ª–æ—è –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        if (!string.IsNullOrEmpty(planesLayerName))
        {
            int layerID = LayerMask.NameToLayer(planesLayerName);
            if (layerID == -1)
            {
                Debug.LogWarning($"[ARManagerInitializer2] Layer '{planesLayerName}' not found in project settings! Planes will use default layer.");
            }
            else
            {
                Debug.Log($"[ARManagerInitializer2] Planes will use layer '{planesLayerName}' (ID: {layerID})");
            }
        }

        Debug.Log("[ARManagerInitializer2] Persistent planes system initialized.");
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
    public void CleanupProblematicPersistentPlanes()
    {
        if (Camera.main == null)
        {
            Debug.LogError("[ARManagerInitializer2] –ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è CleanupProblematicPersistentPlanes");
            return;
        }

        Camera mainCam = Camera.main;
        List<GameObject> planesToRemove = new List<GameObject>();

        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π (–≤ –º–µ—Ç—Ä–∞—Ö)
        float maxDistanceThreshold = 15.0f;

        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        float maxPlaneSize = 5.0f;

        foreach (var kvp in persistentGeneratedPlanes)
        {
            GameObject plane = kvp.Key;
            bool isPersistent = kvp.Value;

            if (plane == null || !isPersistent)
                continue;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            MeshFilter meshFilter = plane.GetComponent<MeshFilter>();
            if (meshFilter != null && meshFilter.mesh != null)
            {
                Vector3 meshSize = meshFilter.mesh.bounds.size;
                if (meshSize.x > maxPlaneSize || meshSize.y > maxPlaneSize)
                {
                    Debug.Log($"[ARManagerInitializer2] –£–¥–∞–ª—è–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à—É—é –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—É—é –ø–ª–æ—Å–∫–æ—Å—Ç—å {plane.name} (—Ä–∞–∑–º–µ—Ä: {meshSize})");
                    planesToRemove.Add(plane);
                    continue;
                }
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            float distanceToCamera = Vector3.Distance(plane.transform.position, mainCam.transform.position);
            if (distanceToCamera > maxDistanceThreshold)
            {
                Debug.Log($"[ARManagerInitializer2] –£–¥–∞–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—É—é –ø–ª–æ—Å–∫–æ—Å—Ç—å {plane.name} (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distanceToCamera:F2}–º)");
                planesToRemove.Add(plane);
                continue;
            }
        }

        // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        foreach (GameObject plane in planesToRemove)
        {
            RemovePlanePersistence(plane);
            generatedPlanes.Remove(plane);
            planeCreationTimes.Remove(plane);
            planeLastVisitedTime.Remove(plane);
            Destroy(plane);
        }

        Debug.Log($"[ARManagerInitializer2] –£–¥–∞–ª–µ–Ω–æ {planesToRemove.Count} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π");
    }

    // –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ (–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –∏ –Ω–µ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ)
    public void DeleteAllPlanes()
    {
        List<GameObject> allPlanes = new List<GameObject>(generatedPlanes);

        foreach (GameObject plane in allPlanes)
        {
            if (plane == null) continue;

            // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤
            persistentGeneratedPlanes.Remove(plane);
            planeCreationTimes.Remove(plane);
            planeLastVisitedTime.Remove(plane);
            generatedPlanes.Remove(plane);

            // –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç
            Destroy(plane);
        }

        Debug.Log($"[ARManagerInitializer2] –£–¥–∞–ª–µ–Ω–æ –≤—Å–µ {allPlanes.Count} –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π");
    }

    // –£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
    public void DeleteLargePlanes(float maxSize = 3.0f)
    {
        if (Camera.main == null)
        {
            Debug.LogError("[ARManagerInitializer2] –ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è DeleteLargePlanes");
            return;
        }

        List<GameObject> planesToRemove = new List<GameObject>();

        foreach (GameObject plane in generatedPlanes)
        {
            if (plane == null) continue;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            MeshFilter meshFilter = plane.GetComponent<MeshFilter>();
            if (meshFilter != null && meshFilter.mesh != null)
            {
                Vector3 meshSize = meshFilter.mesh.bounds.size;

                // –ï—Å–ª–∏ –ø–ª–æ—Å–∫–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è
                if (meshSize.x > maxSize || meshSize.y > maxSize || meshSize.z > maxSize)
                {
                    planesToRemove.Add(plane);
                    Debug.Log($"[ARManagerInitializer2] –ù–∞–π–¥–µ–Ω–∞ –±–æ–ª—å—à–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {plane.name}, —Ä–∞–∑–º–µ—Ä: {meshSize}");
                }
            }
        }

        // –£–¥–∞–ª—è–µ–º –±–æ–ª—å—à–∏–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        foreach (GameObject plane in planesToRemove)
        {
            persistentGeneratedPlanes.Remove(plane);
            planeCreationTimes.Remove(plane);
            planeLastVisitedTime.Remove(plane);
            generatedPlanes.Remove(plane);
            Destroy(plane);
        }

        Debug.Log($"[ARManagerInitializer2] –£–¥–∞–ª–µ–Ω–æ {planesToRemove.Count} –±–æ–ª—å—à–∏—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π");
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    public void QuickSaveCurrentPlanes()
    {
        if (!usePersistentPlanes)
        {
            Debug.LogWarning("[ARManagerInitializer2] Persistent planes feature is disabled (usePersistentPlanes = false)");
            return;
        }

        int savedCount = 0;

        foreach (GameObject plane in generatedPlanes)
        {
            if (plane == null) continue;

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –ø–ª–æ—Å–∫–æ—Å—Ç—å —É–∂–µ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è
            if (IsPlanePersistent(plane)) continue;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–æ—Å–∫–æ—Å—Ç—å –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è
            MeshFilter meshFilter = plane.GetComponent<MeshFilter>();
            if (meshFilter != null && meshFilter.mesh != null)
            {
                Vector3 meshSize = meshFilter.mesh.bounds.size;
                float maxAllowedSize = 5.0f;

                if (meshSize.x > maxAllowedSize || meshSize.y > maxAllowedSize)
                {
                    Debug.LogWarning($"[ARManagerInitializer2] –ü–ª–æ—Å–∫–æ—Å—Ç—å {plane.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ä–∞–∑–º–µ—Ä: {meshSize})");
                    continue;
                }
            }

            // –î–µ–ª–∞–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
            if (MakePlanePersistent(plane))
            {
                savedCount++;
            }
        }

        Debug.Log($"[ARManagerInitializer2] –ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {savedCount} –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π");
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–≤–æ–π–Ω–æ–≥–æ —Ç–∞–ø–∞
    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–µ—Å—Ç–∞–º–∏")]
    [Tooltip("–†–∞–∑—Ä–µ—à–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –ø–æ –¥–≤–æ–π–Ω–æ–º—É —Ç–∞–ø—É")]
    [SerializeField] private bool enableDoubleTapSave = true;
    [Tooltip("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —Ç–∞–ø–∞–º–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–≤–æ–π–Ω–æ–≥–æ —Ç–∞–ø–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)")]
    [SerializeField] private float doubleTapTimeThreshold = 0.3f;
    private float lastTapTime = 0f;
    private int tapCount = 0;
    private Vector2 lastTapPosition;
    private float maxTapPositionDelta = 100f; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–∞–ø–∞–º–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö

    private void UpdateGestureInput()
    {
        if (!enableDoubleTapSave) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–ø –Ω–∞ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        if (Input.touchCount > 0)
        {
            Touch touch = Input.GetTouch(0);

            if (touch.phase == TouchPhase.Began)
            {
                HandleTapInput(touch.position);
            }
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫ –º—ã—à—å—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
        else if (Input.GetMouseButtonDown(0))
        {
            HandleTapInput(Input.mousePosition);
        }
    }

    private void HandleTapInput(Vector2 position)
    {
        float currentTime = Time.time;

        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–∞–ø –∏–ª–∏ –ø—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–∞–ø–∞
        if (tapCount == 0 || (currentTime - lastTapTime) > doubleTapTimeThreshold)
        {
            tapCount = 1;
            lastTapTime = currentTime;
            lastTapPosition = position;
        }
        // –ï—Å–ª–∏ —ç—Ç–æ –≤—Ç–æ—Ä–æ–π —Ç–∞–ø –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–∑–∏—Ü–∏–∏
        else if (tapCount == 1 && (currentTime - lastTapTime) <= doubleTapTimeThreshold
                && Vector2.Distance(position, lastTapPosition) < maxTapPositionDelta)
        {
            tapCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–≤–æ–π–Ω–æ–π —Ç–∞–ø
            Debug.Log("[ARManagerInitializer2] –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–≤–æ–π–Ω–æ–π —Ç–∞–ø, –∑–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π");
            QuickSaveCurrentPlanes();
        }
        else
        {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—Å–ª–∏ —Ç–∞–ø –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ
            tapCount = 1;
            lastTapTime = currentTime;
            lastTapPosition = position;
        }
    }

    /// <summary>
    /// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç—ã —Å—Ü–µ–Ω—ã –∏ –∏—Ö –∫–æ–ª–ª–∞–π–¥–µ—Ä—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ä–µ–π–∫–∞—Å—Ç–∏–Ω–≥–æ–º
    /// </summary>
    private void DiagnoseSceneObjects()
    {
        Debug.Log("=== [ARManagerInitializer2] –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ë–™–ï–ö–¢–û–í –°–¶–ï–ù–´ ===");
        
        // –ù–∞–π–¥–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å –∫–æ–ª–ª–∞–π–¥–µ—Ä–∞–º–∏
        Collider[] allColliders = FindObjectsOfType<Collider>(true); // –≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
        Debug.Log($"[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] –í—Å–µ–≥–æ –∫–æ–ª–ª–∞–π–¥–µ—Ä–æ–≤ –≤ —Å—Ü–µ–Ω–µ: {allColliders.Length}");
        
        int enabledColliders = 0;
        int meshColliders = 0;
        int boxColliders = 0;
        
        foreach (var collider in allColliders)
        {
            if (collider.enabled) enabledColliders++;
            
            string layerName = LayerMask.LayerToName(collider.gameObject.layer);
            if (string.IsNullOrEmpty(layerName)) layerName = $"Layer{collider.gameObject.layer}";
            
            if (collider is MeshCollider) meshColliders++;
            else if (collider is BoxCollider) boxColliders++;
            
            Debug.Log($"[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] –ö–æ–ª–ª–∞–π–¥–µ—Ä: '{collider.name}' ({collider.GetType().Name}), –∞–∫—Ç–∏–≤–µ–Ω: {collider.enabled}, —Å–ª–æ–π: {layerName}");
        }
        
        Debug.Log($"[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–ª–ª–∞–π–¥–µ—Ä–æ–≤: {enabledColliders}, MeshCollider: {meshColliders}, BoxCollider: {boxColliders}");
        
        // –ï–°–õ–ò –ö–û–õ–õ–ê–ô–î–ï–†–´ –û–¢–°–£–¢–°–¢–í–£–Æ–¢ - –°–†–ê–ó–£ –î–û–ë–ê–í–õ–Ø–ï–ú –ò–•
        if (allColliders.Length == 0)
        {
            Debug.LogWarning("[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚ö†Ô∏è –ö–æ–ª–ª–∞–π–¥–µ—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç! –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ...");
            ForceAddCollidersAggressively();
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∫–∏–µ —Å–∏–º—É–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã –≤ —Å—Ü–µ–Ω–µ
        GameObject[] allGameObjects = FindObjectsOfType<GameObject>(true);
        
        foreach (var obj in allGameObjects)
        {
            if (obj.name.Contains("Environment") || obj.name.Contains("Simulation"))
            {
                Debug.Log($"[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] –ù–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç —Å–∏–º—É–ª—è—Ü–∏–∏: '{obj.name}', –∞–∫—Ç–∏–≤–µ–Ω: {obj.activeInHierarchy}, —Å–ª–æ–π: {obj.layer} ({LayerMask.LayerToName(obj.layer)})");
                
                // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–ª–ª–∞–π–¥–µ—Ä—ã –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
                Collider[] childColliders = obj.GetComponentsInChildren<Collider>(true);
                Debug.Log($"[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] –£ –æ–±—ä–µ–∫—Ç–∞ '{obj.name}' –Ω–∞–π–¥–µ–Ω–æ {childColliders.Length} –∫–æ–ª–ª–∞–π–¥–µ—Ä–æ–≤ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–∞—Ö");
            }
        }
        
        Debug.Log("=== [ARManagerInitializer2] –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===");
    }

    /// <summary>
    /// –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–∞–π–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É (–¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤)
    /// </summary>
    private IEnumerator DelayedColliderCheck()
    {
        for (int attempt = 1; attempt <= 5; attempt++) // 5 –ø–æ–ø—ã—Ç–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 3 —Å–µ–∫—É–Ω–¥—ã
        {
            yield return new WaitForSeconds(3.0f); // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
            
            Debug.Log($"=== [ARManagerInitializer2] –ü–û–í–¢–û–†–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê #{attempt}/5 (—á–µ—Ä–µ–∑ {attempt * 3} —Å–µ–∫.) ===");
            
            Collider[] allColliders = FindObjectsOfType<Collider>(true);
            MeshRenderer[] allRenderers = FindObjectsOfType<MeshRenderer>(true);
            GameObject[] allObjects = FindObjectsOfType<GameObject>(true);
            
            Debug.Log($"[–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ #{attempt}] –ù–∞–π–¥–µ–Ω–æ: –ö–æ–ª–ª–∞–π–¥–µ—Ä–æ–≤: {allColliders.Length}, MeshRenderer-–æ–≤: {allRenderers.Length}, –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {allObjects.Length}");
            
            if (allColliders.Length == 0 || allRenderers.Length == 0)
            {
                Debug.LogWarning($"[–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ #{attempt}] ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—å—Ç—Ä–∞-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...");
                ForceAddCollidersAggressively();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                Collider[] afterColliders = FindObjectsOfType<Collider>(true);
                MeshRenderer[] afterRenderers = FindObjectsOfType<MeshRenderer>(true);
                Debug.Log($"[–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ #{attempt}] –ü–æ—Å–ª–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: –ö–æ–ª–ª–∞–π–¥–µ—Ä–æ–≤: {afterColliders.Length}, MeshRenderer-–æ–≤: {afterRenderers.Length}");
                
                if (afterColliders.Length > 0 && afterRenderers.Length > 0)
                {
                    Debug.Log($"[–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ #{attempt}] ‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞! –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.");
                    break;
                }
            }
            else
            {
                Debug.Log($"[–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ #{attempt}] ‚úÖ –û–±—ä–µ–∫—Ç—ã –Ω–∞–π–¥–µ–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.");
                break;
            }
        }
        
        Debug.Log("=== [ARManagerInitializer2] –ó–ê–í–ï–†–®–ï–ù–ò–ï –ü–û–í–¢–û–†–ù–´–• –ü–†–û–í–ï–†–û–ö ===");
    }

    /// <summary>
    /// –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–ª–∞–π–¥–µ—Ä–æ–≤
    /// </summary>
    private void ForceAddCollidersAggressively()
    {
        Debug.Log("=== [ARManagerInitializer2] –£–õ–¨–¢–†–ê-–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–°–ï–• –û–ë–™–ï–ö–¢–û–í ===");
        
        // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ü–µ–Ω–µ
        GameObject[] allObjects = FindObjectsOfType<GameObject>(true);
        Debug.Log($"[–£–ª—å—Ç—Ä–∞-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] –í—Å–µ–≥–æ GameObject-–æ–≤ –≤ —Å—Ü–µ–Ω–µ (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ): {allObjects.Length}");
        
        // 2. –î–µ—Ç–∞–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç
        int objectsWithMesh = 0;
        int objectsWithCollider = 0;
        int addedColliders = 0;
        
        foreach (GameObject obj in allObjects)
        {
            MeshRenderer meshRenderer = obj.GetComponent<MeshRenderer>();
            MeshFilter meshFilter = obj.GetComponent<MeshFilter>();
            Collider existingCollider = obj.GetComponent<Collider>();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ö–ê–ñ–î–û–ú –æ–±—ä–µ–∫—Ç–µ —Å MeshRenderer –∏–ª–∏ –≤ —Å–ª–æ—è—Ö —Å–∏–º—É–ª—è—Ü–∏–∏
            if (meshRenderer != null || obj.layer == 8 || obj.layer == 30 || 
                obj.name.ToLower().Contains("wall") || obj.name.ToLower().Contains("floor") ||
                obj.name.ToLower().Contains("room") || obj.name.ToLower().Contains("environment"))
            {
                string components = "";
                if (meshRenderer != null) components += "MeshRenderer ";
                if (meshFilter != null) components += "MeshFilter ";
                if (existingCollider != null) components += $"Collider({existingCollider.GetType().Name}) ";
                
                Debug.Log($"[–£–ª—å—Ç—Ä–∞-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] –û–±—ä–µ–∫—Ç: '{obj.name}', –∞–∫—Ç–∏–≤–µ–Ω: {obj.activeInHierarchy}, —Å–ª–æ–π: {obj.layer} ({LayerMask.LayerToName(obj.layer)}), –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: [{components}]");
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä mesh –µ—Å–ª–∏ –µ—Å—Ç—å
                if (meshFilter != null && meshFilter.mesh != null)
                {
                    Debug.Log($"  ‚îî‚îÄ Mesh: '{meshFilter.mesh.name}', vertices: {meshFilter.mesh.vertexCount}, triangles: {meshFilter.mesh.triangles.Length/3}");
                }
            }
            
            // –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if (meshRenderer != null) objectsWithMesh++;
            if (existingCollider != null) objectsWithCollider++;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–ª–∞–π–¥–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (meshRenderer != null && meshFilter != null && meshFilter.mesh != null && existingCollider == null)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞
                Bounds bounds = meshRenderer.bounds;
                if (bounds.size.magnitude > 0.1f) // –¢–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–∫—Ç—ã
                {
                    MeshCollider meshCollider = obj.AddComponent<MeshCollider>();
                    meshCollider.sharedMesh = meshFilter.mesh;
                    addedColliders++;
                    
                    Debug.Log($"[–£–ª—å—Ç—Ä–∞-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω MeshCollider –∫ '{obj.name}' (—Ä–∞–∑–º–µ—Ä: {bounds.size})");
                }
            }
        }
        
        Debug.Log($"[–£–ª—å—Ç—Ä–∞-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:");
        Debug.Log($"  ‚îú‚îÄ –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {allObjects.Length}");
        Debug.Log($"  ‚îú‚îÄ –° MeshRenderer: {objectsWithMesh}");
        Debug.Log($"  ‚îú‚îÄ –° Collider: {objectsWithCollider}");
        Debug.Log($"  ‚îî‚îÄ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–æ–ª–ª–∞–π–¥–µ—Ä–æ–≤: {addedColliders}");
        
        // 3. –ò—â–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Ç–µ–≥–∞–º Unity XR
        Transform[] allTransforms = FindObjectsOfType<Transform>(true);
        Debug.Log($"[–£–ª—å—Ç—Ä–∞-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] –ò—â–µ–º XR –æ–±—ä–µ–∫—Ç—ã —Å—Ä–µ–¥–∏ {allTransforms.Length} —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–æ–≤...");
        
        foreach (Transform t in allTransforms)
        {
            string name = t.name.ToLower();
            if (name.Contains("xr") || name.Contains("ar") || name.Contains("simulation") || 
                name.Contains("mock") || name.Contains("synthetic") || name.Contains("environment"))
            {
                Debug.Log($"[–£–ª—å—Ç—Ä–∞-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üéØ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π XR –æ–±—ä–µ–∫—Ç: '{t.name}', —Ä–æ–¥–∏—Ç–µ–ª—å: '{(t.parent ? t.parent.name : "ROOT")}', –∞–∫—Ç–∏–≤–µ–Ω: {t.gameObject.activeInHierarchy}");
            }
        }
        
        // 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        Collider[] finalColliders = FindObjectsOfType<Collider>(true);
        MeshRenderer[] finalRenderers = FindObjectsOfType<MeshRenderer>(true);
        Debug.Log($"[–£–ª—å—Ç—Ä–∞-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞] üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ö–æ–ª–ª–∞–π–¥–µ—Ä–æ–≤: {finalColliders.Length}, MeshRenderer-–æ–≤: {finalRenderers.Length}");
        
        Debug.Log("=== [ARManagerInitializer2] –ö–û–ù–ï–¶ –£–õ–¨–¢–†–ê-–î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===");
    }

    /// <summary>
    /// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–æ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã –ø–æ –∏–º–µ–Ω–∏
    /// </summary>
    public void DebugFindSimulationObjects()
    {
        Debug.Log("=== [ARManagerInitializer2] –ü–û–ò–°–ö –°–ò–ú–£–õ–Ø–¶–ò–û–ù–ù–´–• –û–ë–™–ï–ö–¢–û–í ===");
        
        GameObject[] allObjects = FindObjectsOfType<GameObject>(true);
        int found = 0;
        
        foreach (var obj in allObjects)
        {
            if (obj.name.ToLower().Contains("environment") || 
                obj.name.ToLower().Contains("simulation") ||
                obj.name.ToLower().Contains("room") ||
                obj.name.ToLower().Contains("wall") ||
                obj.name.ToLower().Contains("floor"))
            {
                found++;
                
                MeshRenderer renderer = obj.GetComponent<MeshRenderer>();
                Collider collider = obj.GetComponent<Collider>();
                
                string info = $"[DebugFind] {obj.name} - ";
                info += $"–ê–∫—Ç–∏–≤–µ–Ω: {obj.activeInHierarchy}, ";
                info += $"–°–ª–æ–π: {LayerMask.LayerToName(obj.layer)}, ";
                info += $"MeshRenderer: {(renderer != null ? "‚úì" : "‚úó")}, ";
                info += $"Collider: {(collider != null ? "‚úì" : "‚úó")}";
                
                if (renderer != null)
                    info += $", –†–∞–∑–º–µ—Ä: {renderer.bounds.size}";
                
                Debug.Log(info);
            }
        }
        
        Debug.Log($"[DebugFind] –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ä–µ–¥—ã: {found}");
    }
}