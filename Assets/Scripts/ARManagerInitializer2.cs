using UnityEngine;
using UnityEngine.XR.ARFoundation;
using Unity.XR.CoreUtils;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.XR.ARSubsystems;
using UnityEngine.Rendering.Universal;
using System;

/// <summary>
/// –ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ARManagerInitializer –≤ —Å—Ü–µ–Ω—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
/// –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç—è–º–∏ AR –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
/// </summary>
[DefaultExecutionOrder(-10)] 
public class ARManagerInitializer2 : MonoBehaviour
{
    // –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    public static ARManagerInitializer2 Instance { get; private set; }

    // –°—Å—ã–ª–∫–∏ –Ω–∞ AR –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    [Header("AR –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")]
    public ARSessionManager sessionManager;
    public ARPlaneManager planeManager;
    public XROrigin xrOrigin;

    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")]
    [Tooltip("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –≤–º–µ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –º–∞—Å–∫–∏")]
    public bool useDetectedPlanes = false;
    
    [Tooltip("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (–≤ –º–µ—Ç—Ä–∞—Ö)")]
    public float minPlaneSize = 0.1f; // –£–º–µ–Ω—å—à–µ–Ω —Å 0.2 –¥–æ 0.1 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ —á–∏—Å–ª–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
    private Dictionary<GameObject, float> planeCreationTimes = new Dictionary<GameObject, float>();
    
    [Tooltip("–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π")]
    public Material verticalPlaneMaterial;
    
    [Tooltip("–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π")]
    public Material horizontalPlaneMaterial;

    // –¢–µ–∫—É—â–∞—è –º–∞—Å–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    private RenderTexture currentSegmentationMask;
    private bool maskUpdated = false;
    private List<GameObject> generatedPlanes = new List<GameObject>();

    // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
    private int lastPlaneCount = 0;

    // –°—á–µ—Ç—á–∏–∫ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
    private int frameCounter = 0;

    // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    private bool hadValidSegmentationResult = false;
    private float lastSuccessfulSegmentationTime = 0f;
    private float segmentationTimeoutSeconds = 10f; // –¢–∞–π–º-–∞—É—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "–ø–æ—Ç–µ—Ä–∏" —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
    private static void Initialize()
    {
        // –°–æ–∑–¥–∞–µ–º GameObject —Å —ç—Ç–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–∂–∏–≤–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ü–µ–Ω—ã
        GameObject initializer = new GameObject("AR Manager Initializer 2");
        ARManagerInitializer2 component = initializer.AddComponent<ARManagerInitializer2>();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        component.useDetectedPlanes = false;
        
        // –û–±—ä–µ–∫—Ç –Ω–µ —É–Ω–∏—á—Ç–æ–∂–∏—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ü–µ–Ω—ã
        DontDestroyOnLoad(initializer);
        Debug.Log("[ARManagerInitializer2] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }

    private void Awake()
    {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
        if (Instance != null && Instance != this)
        {
            Destroy(gameObject);
            return;
        }

        Instance = this;
        DontDestroyOnLoad(gameObject);
    }

    private void Start()
    {
        // –ù–∞—Ö–æ–¥–∏–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        FindARComponents();
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        SubscribeToWallSegmentation();
        
        // –ù–û–í–û–ï: –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π AR Foundation
        DisableARFoundationVisualizers();
        
        // –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        Debug.Log($"[ARManagerInitializer2] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: useDetectedPlanes={useDetectedPlanes}");
    }

    private void Update()
    {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–¥—Ä–æ–≤
        frameCounter++;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        if (maskUpdated)
        {
            ProcessSegmentationMask();
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∞–π–º-–∞—É—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        if (hadValidSegmentationResult && Time.time - lastSuccessfulSegmentationTime > segmentationTimeoutSeconds)
        {
            Debug.LogWarning($"[ARManagerInitializer2] ‚ö†Ô∏è –¢–∞–π–º-–∞—É—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ ({segmentationTimeoutSeconds}—Å). –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏.");
            CreateBasicPlaneInFrontOfUser();
            hadValidSegmentationResult = false;
        }

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ (–∫–∞–∂–¥—ã–µ 60 –∫–∞–¥—Ä–æ–≤)
        if (frameCounter % 60 == 0)
        {
            CleanupOldPlanes();
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 10 –∫–∞–¥—Ä–æ–≤
        // –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        if (frameCounter % 10 == 0)
        {
            UpdatePlanePositions();
        }

        // –ö–∞–∂–¥—ã–µ 200 –∫–∞–¥—Ä–æ–≤ –ø—Ä–æ–≤–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –Ω–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ
        if (frameCounter % 200 == 0)
        {
            RemoveOverlayingPlanes();
        }

        // –í—ã–≤–æ–¥ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 300 –∫–∞–¥—Ä–æ–≤
        if (frameCounter % 300 == 0)
        {
            int planeCount = generatedPlanes.Count;
            if (planeCount != lastPlaneCount)
            {
                Debug.Log($"[ARManagerInitializer2] üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π: {planeCount}");
                lastPlaneCount = planeCount;
            }
        }
    }

    // –ü–æ–∏—Å–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Å—Ü–µ–Ω–µ
    private void FindARComponents()
    {
        if (sessionManager == null)
            sessionManager = FindObjectOfType<ARSessionManager>();
            
        if (planeManager == null)
            planeManager = FindObjectOfType<ARPlaneManager>();
            
        if (xrOrigin == null)
            xrOrigin = FindObjectOfType<XROrigin>();
            
        if (planeManager != null)
        {
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
            planeManager.planesChanged += OnPlanesChanged;
            Debug.Log("[ARManagerInitializer2] –ü–æ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ —Å–æ–±—ã—Ç–∏—è planesChanged");
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã
        InitializeMaterials();
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
    private void InitializeMaterials()
    {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã
        if (verticalPlaneMaterial == null)
        {
            verticalPlaneMaterial = new Material(Shader.Find("Universal Render Pipeline/Lit"));
            verticalPlaneMaterial.color = new Color(1.0f, 0.3f, 0.0f, 0.7f); // –Ø—Ä–∫–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π, –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π (0.7)
            verticalPlaneMaterial.SetFloat("_Surface", 1); // 1 = –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
            verticalPlaneMaterial.SetInt("_SrcBlend", (int)UnityEngine.Rendering.BlendMode.SrcAlpha);
            verticalPlaneMaterial.SetInt("_DstBlend", (int)UnityEngine.Rendering.BlendMode.OneMinusSrcAlpha);
            verticalPlaneMaterial.SetInt("_ZWrite", 0); // –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±—É—Ñ–µ—Ä –≥–ª—É–±–∏–Ω—ã –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            verticalPlaneMaterial.EnableKeyword("_ALPHAPREMULTIPLY_ON");
            verticalPlaneMaterial.renderQueue = 3000; // –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è –æ—á–µ—Ä–µ–¥—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            
            // –£–º–µ—Ä–µ–Ω–Ω–∞—è —ç–º–∏—Å—Å–∏—è –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–µ–∑ –ø–µ—Ä–µ–Ω–∞—Å—ã—â–µ–Ω–∏—è
            verticalPlaneMaterial.EnableKeyword("_EMISSION");
            verticalPlaneMaterial.SetColor("_EmissionColor", new Color(1.0f, 0.3f, 0.0f, 0.7f) * 0.5f);
            
            // –î–µ–ª–∞–µ–º –≥–ª–∞–¥–∫—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∞–∂–µ–Ω–∏–π
            verticalPlaneMaterial.SetFloat("_Smoothness", 0.8f);
            verticalPlaneMaterial.SetFloat("_Metallic", 0.3f);
            
            Debug.Log("[ARManagerInitializer2] –°–æ–∑–¥–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π");
        }
        
        if (horizontalPlaneMaterial == null)
        {
            horizontalPlaneMaterial = new Material(Shader.Find("Universal Render Pipeline/Lit"));
            horizontalPlaneMaterial.color = new Color(0.0f, 0.7f, 1.0f, 1.0f); 
            horizontalPlaneMaterial.SetFloat("_Surface", 0); // –ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
            horizontalPlaneMaterial.SetInt("_SrcBlend", (int)UnityEngine.Rendering.BlendMode.One);
            horizontalPlaneMaterial.SetInt("_DstBlend", (int)UnityEngine.Rendering.BlendMode.Zero);
            horizontalPlaneMaterial.SetInt("_ZWrite", 1);
            horizontalPlaneMaterial.DisableKeyword("_ALPHAPREMULTIPLY_ON");
            horizontalPlaneMaterial.renderQueue = 2000;
            
            // –í–∫–ª—é—á–∞–µ–º —ç–º–∏—Å—Å–∏—é
            horizontalPlaneMaterial.EnableKeyword("_EMISSION");
            horizontalPlaneMaterial.SetColor("_EmissionColor", new Color(0.0f, 0.7f, 1.0f, 1.0f) * 1.0f);
        }
    }

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    private void SubscribeToWallSegmentation()
    {
        WallSegmentation wallSegmentation = FindObjectOfType<WallSegmentation>();
        if (wallSegmentation != null)
        {
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
            wallSegmentation.OnSegmentationMaskUpdated -= OnSegmentationMaskUpdated;
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Å–∫–∏
            wallSegmentation.OnSegmentationMaskUpdated += OnSegmentationMaskUpdated;
            Debug.Log("[ARManagerInitializer2] ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è OnSegmentationMaskUpdated –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞");
        }
        else
        {
            Debug.LogWarning("[ARManagerInitializer2] ‚ö†Ô∏è WallSegmentation –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ü–µ–Ω–µ! –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞...");
            StartCoroutine(RetrySubscriptionAfterDelay(1.0f));
        }
    }
    
    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
    private IEnumerator RetrySubscriptionAfterDelay(float delay)
    {
        yield return new WaitForSeconds(delay);
        SubscribeToWallSegmentation();
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
    private void OnPlanesChanged(ARPlanesChangedEventArgs args)
    {
        foreach (ARPlane plane in args.added)
        {
            ConfigurePlane(plane);
        }
        
        foreach (ARPlane plane in args.updated)
        {
            UpdatePlane(plane);
        }
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
    private void ConfigurePlane(ARPlane plane)
    {
        if (plane == null) return;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏ —ç—Ç–æ –ø–ª–æ—Å–∫–æ—Å—Ç—å
        bool isVertical = plane.alignment == PlaneAlignment.Vertical;
        
        // –ù–∞–∑–Ω–∞—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        MeshRenderer renderer = plane.GetComponent<MeshRenderer>();
        if (renderer != null)
        {
            // –í—ã–±–∏—Ä–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            Material material = isVertical ? verticalPlaneMaterial : horizontalPlaneMaterial;
            
            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            renderer.material = new Material(material);
            
            // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –º–∞—Å–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ —ç—Ç–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–µ
            if (isVertical && currentSegmentationMask != null)
            {
                renderer.material.SetTexture("_SegmentationMask", currentSegmentationMask);
                renderer.material.EnableKeyword("USE_MASK");
            }
            
            Debug.Log($"[ARManagerInitializer2] –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å: {plane.trackableId}, —Ç–∏–ø: {(isVertical ? "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è" : "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è")}");
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
    private void UpdatePlane(ARPlane plane)
    {
        if (plane == null) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –µ—Å–ª–∏ —ç—Ç–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å
        if (plane.alignment == PlaneAlignment.Vertical)
        {
            MeshRenderer renderer = plane.GetComponent<MeshRenderer>();
            if (renderer != null && renderer.material != null && currentSegmentationMask != null)
            {
                renderer.material.SetTexture("_SegmentationMask", currentSegmentationMask);
                renderer.material.EnableKeyword("USE_MASK");
            }
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    private void OnSegmentationMaskUpdated(RenderTexture mask)
    {
        if (mask == null)
            return;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Å–∫—É –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        currentSegmentationMask = mask;
        maskUpdated = true;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å–∫–∏
        hadValidSegmentationResult = true;
        lastSuccessfulSegmentationTime = Time.time;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (generatedPlanes.Count > 0) 
        {
            int updatedCount = 0;
            
            // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
            foreach (GameObject plane in generatedPlanes)
            {
                if (plane != null)
                {
                    MeshRenderer renderer = plane.GetComponent<MeshRenderer>();
                    if (renderer != null && renderer.material != null)
                    {
                        // –¢—É—Ç –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        updatedCount++;
                    }
                }
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —á–∏—Å–ª–æ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            if (lastPlaneCount != generatedPlanes.Count)
            {
                Debug.Log($"[ARManagerInitializer2] –û–±–Ω–æ–≤–ª–µ–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è {generatedPlanes.Count} –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π");
                lastPlaneCount = generatedPlanes.Count;
            }
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
    private void ProcessSegmentationMask()
    {
        if (currentSegmentationMask == null || !maskUpdated)
        {
            return;
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Å–∫–∏
        maskUpdated = false;
        
        Debug.Log($"[ARManagerInitializer2] –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ {currentSegmentationMask.width}x{currentSegmentationMask.height}");
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RenderTexture –≤ Texture2D –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        Texture2D maskTexture = RenderTextureToTexture2D(currentSegmentationMask);
        
        if (maskTexture != null)
        {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
            bool shouldUpdate = generatedPlanes.Count < 3 || (frameCounter % 60 == 0);
            
            // –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–ª–æ—Å–∫–æ—Å—Ç—å, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if (generatedPlanes.Count == 0)
            {
                shouldUpdate = true;
            }
            
            if (shouldUpdate)
            {
                // –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
                CreatePlanesFromMask(maskTexture);
                frameCounter = 0;
            }
            else
            {
                frameCounter++;
            }

            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É
            Destroy(maskTexture);
        }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ RenderTexture –≤ Texture2D –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    private Texture2D RenderTextureToTexture2D(RenderTexture renderTexture)
    {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É
        Texture2D texture = new Texture2D(renderTexture.width, renderTexture.height, TextureFormat.RGBA32, false);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π RenderTexture
        RenderTexture currentRT = RenderTexture.active;
        
        try
        {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º renderTexture –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
            RenderTexture.active = renderTexture;
            
            // –°—á–∏—Ç—ã–≤–∞–µ–º –ø–∏–∫—Å–µ–ª–∏ –∏–∑ RenderTexture –≤ Texture2D
            texture.ReadPixels(new Rect(0, 0, renderTexture.width, renderTexture.height), 0, 0);
            texture.Apply();
        }
        catch (System.Exception e)
        {
            Debug.LogError($"[ARManagerInitializer2] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ RenderTexture –≤ Texture2D: {e.Message}");
            Destroy(texture);
            return null;
        }
        finally
        {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π RenderTexture
            RenderTexture.active = currentRT;
        }
        
        return texture;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    private void CreatePlanesFromMask(Texture2D maskTexture)
    {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª–µ–π –∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã
        Color32[] pixels = maskTexture.GetPixels32();
        int width = maskTexture.width;
        int height = maskTexture.height;
        
        // –ù–∞—Ö–æ–¥–∏–º –æ–±–ª–∞—Å—Ç–∏ —Å—Ç–µ–Ω –Ω–∞ –º–∞—Å–∫–µ
        List<Rect> wallAreas = FindWallAreas(pixels, width, height);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        int maxWallPlanes = 8; // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
        
        // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –µ—Å–ª–∏ –∏—Ö —Å—Ç–∞–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
        if (generatedPlanes.Count > 10)
        {
            Debug.Log($"[ARManagerInitializer2] üîÑ –°–±—Ä–æ—Å –≤—Å–µ—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π (–±—ã–ª–æ {generatedPlanes.Count}) –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏");
            foreach (GameObject plane in generatedPlanes)
            {
                if (plane != null)
                    Destroy(plane);
            }
            generatedPlanes.Clear();
            planeCreationTimes.Clear();
        }
        
        // –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ (null) –∏–∑ —Å–ø–∏—Å–∫–∞
        for (int i = generatedPlanes.Count - 1; i >= 0; i--)
        {
            if (generatedPlanes[i] == null)
            {
                generatedPlanes.RemoveAt(i);
                if (i < generatedPlanes.Count)
                {
                    i--; // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                }
            }
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        List<Rect> significantAreas = wallAreas
            .OrderByDescending(area => area.width * area.height)
            .Take(maxWallPlanes)
            .ToList();
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –û–î–ù–£ –ø–ª–æ—Å–∫–æ—Å—Ç—å –∑–∞ –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
        int maxPlanesToCreate = 1;
        
        // –ù–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –µ—Å–ª–∏ –∏—Ö —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        if (generatedPlanes.Count >= maxWallPlanes)
        {
            Debug.Log($"[ARManagerInitializer2] ‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π ({generatedPlanes.Count}/{maxWallPlanes}). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ.");
            return;
        }
        
        // –°—á–µ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        int planesCreated = 0;
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –ø–ª–æ—Å–∫–æ—Å—Ç—å –∏–∑ –Ω–∞–∏–±–æ–ª—å—à–µ–π –æ–±–ª–∞—Å—Ç–∏
        if (significantAreas.Count > 0)
        {
            Rect bestArea = significantAreas[0];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–æ–ª—å—à–∞—è –ø–ª–æ—â–∞–¥—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            float normalizedArea = (bestArea.width * bestArea.height) / (width * height);
            if (normalizedArea >= 0.02f) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            {
                // –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
                CreatePlaneForWallArea(bestArea, width, height);
                planesCreated++;
                
                Debug.Log($"[ARManagerInitializer2] ‚úÖ –°–æ–∑–¥–∞–Ω–∞ 1 –Ω–æ–≤–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å –∏–∑ –æ–±–ª–∞—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–æ–º {normalizedArea:F3}");
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        lastSuccessfulSegmentationTime = Time.time;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç—è—Ö
        hadValidSegmentationResult = true;
        
        Debug.Log($"[ARManagerInitializer2] ‚úÖ –°–æ–∑–¥–∞–Ω–æ {planesCreated} –Ω–æ–≤—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –∏–∑ {significantAreas.Count} –æ–±–ª–∞—Å—Ç–µ–π. –í—Å–µ–≥–æ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π: {generatedPlanes.Count}");
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω–∞—á–∏–Ω–∞—è —Å –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–∏–∫—Å–µ–ª—è
    private Rect FindConnectedArea(Color32[] pixels, int width, int height, int startX, int startY, bool[,] visited, byte threshold)
    {
        // –ì—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏
        int minX = startX;
        int maxX = startX;
        int minY = startY;
        int maxY = startY;
        
        // –û—á–µ—Ä–µ–¥—å –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ–±—Ö–æ–¥–∞ –≤ —à–∏—Ä–∏–Ω—É
        Queue<Vector2Int> queue = new Queue<Vector2Int>();
        queue.Enqueue(new Vector2Int(startX, startY));
        visited[startX, startY] = true;
        
        // –í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ (4 —Å–æ—Å–µ–¥–∞)
        Vector2Int[] directions = new Vector2Int[]
        {
            new Vector2Int(1, 0),  // –≤–ø—Ä–∞–≤–æ
            new Vector2Int(-1, 0), // –≤–ª–µ–≤–æ
            new Vector2Int(0, 1),  // –≤–Ω–∏–∑
            new Vector2Int(0, -1)  // –≤–≤–µ—Ä—Ö
        };
        
        // –ê–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ö–æ–¥–∞ –≤ —à–∏—Ä–∏–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        while (queue.Count > 0)
        {
            Vector2Int current = queue.Dequeue();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏
            minX = Mathf.Min(minX, current.x);
            maxX = Mathf.Max(maxX, current.x);
            minY = Mathf.Min(minY, current.y);
            maxY = Mathf.Max(maxY, current.y);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–µ–π
            foreach (Vector2Int dir in directions)
            {
                int newX = current.x + dir.x;
                int newY = current.y + dir.y;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–µ–∫—Å—Ç—É—Ä—ã
                if (newX >= 0 && newX < width && newY >= 0 && newY < height)
                {
                    // –ï—Å–ª–∏ –ø–∏–∫—Å–µ–ª—å –Ω–µ –ø–æ—Å–µ—â–µ–Ω –∏ —ç—Ç–æ —á–∞—Å—Ç—å —Å—Ç–µ–Ω—ã
                    if (!visited[newX, newY] && pixels[newY * width + newX].r > threshold)
                    {
                        visited[newX, newY] = true;
                        queue.Enqueue(new Vector2Int(newX, newY));
                    }
                }
            }
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫, –æ—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –≤—Å—é —Å–≤—è–∑–Ω—É—é –æ–±–ª–∞—Å—Ç—å
        return new Rect(minX, minY, maxX - minX + 1, maxY - minY + 1);
    }

    private List<Rect> FindWallAreas(Color32[] pixels, int width, int height)
    {
        List<Rect> wallAreas = new List<Rect>();
        
        // –ü–æ—Ä–æ–≥ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–µ–Ω—ã (–º–∞—Å–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–µ–ª—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∫–∞–∫ —Å—Ç–µ–Ω—ã)
        byte threshold = 150; // –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å 180 –¥–æ 150 –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–µ–Ω
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö –¥–ª—è —É—á–µ—Ç–∞ - —É–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π 
        int minAreaSize = 2; // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–∞–∂–µ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π 
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
        bool[,] visited = new bool[width, height];
        
        for (int y = 0; y < height; y++)
        {
            for (int x = 0; x < width; x++)
            {
                // –ï—Å–ª–∏ –ø–∏–∫—Å–µ–ª—å –Ω–µ –ø–æ—Å–µ—â–µ–Ω –∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å > –ø–æ—Ä–æ–≥–∞ (—ç—Ç–æ —á–∞—Å—Ç—å —Å—Ç–µ–Ω—ã)
                if (!visited[x, y] && pixels[y * width + x].r > threshold)
                {
                    // –ù–∞—Ö–æ–¥–∏–º —Å–≤—è–∑–Ω—É—é –æ–±–ª–∞—Å—Ç—å, –Ω–∞—á–∏–Ω–∞—è —Å —ç—Ç–æ–≥–æ –ø–∏–∫—Å–µ–ª—è
                    Rect area = FindConnectedArea(pixels, width, height, x, y, visited, threshold);
                    
                    // –ï—Å–ª–∏ –æ–±–ª–∞—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ —Å–ø–∏—Å–æ–∫
                    if (area.width * area.height >= minAreaSize)
                    {
                        wallAreas.Add(area);
                    }
                }
            }
        }
        
        return wallAreas;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ —Å—Ç–µ–Ω—ã
    private void CreatePlaneForWallArea(Rect area, int textureWidth, int textureHeight)
    {
        // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—Ç—Ä –æ–±–ª–∞—Å—Ç–∏ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —Ç–µ–∫—Å—Ç—É—Ä—ã
        float centerX = (area.x + area.width / 2) / textureWidth;
        float centerY = (area.y + area.height / 2) / textureHeight;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –∫–∞–º–µ—Ä—ã –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        Vector2 normalizedCenter = new Vector2(centerX * 2 - 1, -(centerY * 2 - 1));
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∫–∞–º–µ—Ä—ã
        Transform cameraTransform = xrOrigin.Camera.transform;
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤—Å–µ—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        // –†–∞–∑–º–µ—Ä –ø–ª–æ—Å–∫–æ—Å—Ç–∏ —Ç–µ–ø–µ—Ä—å –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏ –≤ –º–∞—Å–∫–µ
        float planeWidth = 1.0f;   // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ —à–∏—Ä–∏–Ω–µ
        float planeHeight = 0.75f; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ –≤—ã—Å–æ—Ç–µ
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        float minDistance = 1.8f;  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        float maxDistance = 2.5f;  // –£–º–µ–Ω—å—à–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        
        // –ë–∞–∑–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –∫–∞–º–µ—Ä—ã
        Vector3 baseDirection = cameraTransform.forward;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –∫–∞–º–µ—Ä—ã –∫ —Ç–æ—á–∫–µ –Ω–∞ —Å—Ç–µ–Ω–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã
        Vector3 targetDirection = cameraTransform.TransformDirection(
            new Vector3(normalizedCenter.x, normalizedCenter.y, 1).normalized
        );
        
        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª—É—á–∞ –æ—Ç –∫–∞–º–µ—Ä—ã - –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –º–µ–∂–¥—É –±–∞–∑–æ–≤—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏ —Ü–µ–ª–µ–≤—ã–º
        Vector3 rayDirection = Vector3.Slerp(baseDirection, targetDirection, 0.5f); // –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Å —Ü–µ–ª–µ–≤–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º raycast –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π
        RaycastHit hit;
        float distance = minDistance;
        bool didHit = false;
        
        // –£–ø—Ä–æ—â–∞–µ–º —Ä–µ–π–∫–∞—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        if (Physics.Raycast(cameraTransform.position, rayDirection, out hit, maxDistance))
        {
            didHit = true;
            distance = Mathf.Clamp(hit.distance, minDistance, maxDistance);
            Debug.Log($"[ARManagerInitializer2] üéØ Raycast –ø–æ–ø–∞–ª –≤ —Ç–æ—á–∫—É –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ {distance}–º");
        }
        else
        {
            // –ù–µ –ø–æ–ø–∞–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            distance = minDistance + 0.3f; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        }
        
        // –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        Vector3 planePosition = cameraTransform.position + rayDirection * distance;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        Quaternion planeRotation;
        if (didHit)
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –Ω–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            Vector3 horizontalNormal = new Vector3(hit.normal.x, 0, hit.normal.z).normalized;
            planeRotation = Quaternion.LookRotation(-horizontalNormal);
        }
        else
        {
            // –ü–æ–≤–æ—Ä–æ—Ç –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –ª–∏—Ü–æ–º –∫ –∫–∞–º–µ—Ä–µ, –Ω–æ –≤—ã—Ä–æ–≤–Ω–µ–Ω –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
            Vector3 horizontalDirection = new Vector3(rayDirection.x, 0, rayDirection.z).normalized;
            planeRotation = Quaternion.LookRotation(-horizontalDirection);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        foreach (GameObject existingPlane in generatedPlanes)
        {
            if (existingPlane == null) continue;
            
            // –ù–µ —Å–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
            if (Vector3.Distance(existingPlane.transform.position, planePosition) < 0.5f)
            {
                Debug.Log("[ARManagerInitializer2] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ");
                return;
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å
        GameObject planeObject = new GameObject("WallPlane");
        planeObject.transform.position = planePosition;
        planeObject.transform.rotation = planeRotation;
        planeObject.transform.localScale = new Vector3(planeWidth, planeHeight, 1.0f);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—à-—Ñ–∏–ª—å—Ç—Ä –∏ –º–µ—à-—Ä–µ–Ω–¥–µ—Ä–µ—Ä
        MeshFilter meshFilter = planeObject.AddComponent<MeshFilter>();
        meshFilter.mesh = CreatePlaneMesh(1, 1); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä, —Ç.–∫. –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ transform
        
        MeshRenderer meshRenderer = planeObject.AddComponent<MeshRenderer>();
        meshRenderer.material = verticalPlaneMaterial;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        if (meshRenderer.material != null)
        {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è —ç—Ç–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            meshRenderer.material = new Material(verticalPlaneMaterial);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            Color color = meshRenderer.material.color;
            color.a = 0.5f; // 50% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            meshRenderer.material.color = color;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–ª–∞–π–¥–µ—Ä –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        MeshCollider meshCollider = planeObject.AddComponent<MeshCollider>();
        meshCollider.sharedMesh = meshFilter.mesh;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å –≤ —Å–ø–∏—Å–æ–∫
        generatedPlanes.Add(planeObject);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Ä–∞–Ω–Ω–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        planeCreationTimes[planeObject] = Time.time;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–µ–π
    private Mesh CreatePlaneMesh(float width, float height)
    {
        Mesh mesh = new Mesh();
        
        // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—à–∏–Ω—ã –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—à–∞
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ç–∫—É 4x4 –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏
        int segmentsX = 4;
        int segmentsY = 4; 
        float thickness = 0.02f; // –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞
        
        int vertCount = (segmentsX + 1) * (segmentsY + 1) * 2; // –ø–µ—Ä–µ–¥–Ω—è—è –∏ –∑–∞–¥–Ω—è—è –≥—Ä–∞–Ω–∏
        Vector3[] vertices = new Vector3[vertCount];
        Vector2[] uv = new Vector2[vertCount];
        
        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–¥–Ω–∏–µ –∏ –∑–∞–¥–Ω–∏–µ –≤–µ—Ä—à–∏–Ω—ã
        int index = 0;
        for (int z = 0; z < 2; z++)
        {
            float zPos = z == 0 ? 0 : -thickness;
            
            for (int y = 0; y <= segmentsY; y++)
            {
                float yPos = -height/2 + height * ((float)y / segmentsY);
                
                for (int x = 0; x <= segmentsX; x++)
                {
                    float xPos = -width/2 + width * ((float)x / segmentsX);
                    
                    vertices[index] = new Vector3(xPos, yPos, zPos);
                    uv[index] = new Vector2((float)x / segmentsX, (float)y / segmentsY);
                    index++;
                }
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏
        int quadCount = segmentsX * segmentsY * 2 + // –ø–µ—Ä–µ–¥–Ω—è—è –∏ –∑–∞–¥–Ω—è—è –≥—Ä–∞–Ω–∏
                        segmentsX * 2 + // –≤–µ—Ä—Ö–Ω—è—è –∏ –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏
                        segmentsY * 2;  // –ª–µ–≤–∞—è –∏ –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏
                        
        int[] triangles = new int[quadCount * 6]; // 6 –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç (2 —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞)
        
        index = 0;
        
        // –ü–µ—Ä–µ–¥–Ω—è—è –≥—Ä–∞–Ω—å
        int frontOffset = 0;
        int verticesPerRow = segmentsX + 1;
        
        for (int y = 0; y < segmentsY; y++)
        {
            for (int x = 0; x < segmentsX; x++)
            {
                int currentIndex = frontOffset + y * verticesPerRow + x;
                
                triangles[index++] = currentIndex;
                triangles[index++] = currentIndex + verticesPerRow + 1;
                triangles[index++] = currentIndex + 1;
                
                triangles[index++] = currentIndex;
                triangles[index++] = currentIndex + verticesPerRow;
                triangles[index++] = currentIndex + verticesPerRow + 1;
            }
        }
        
        // –ó–∞–¥–Ω—è—è –≥—Ä–∞–Ω—å (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏)
        int backOffset = (segmentsX + 1) * (segmentsY + 1);
        
        for (int y = 0; y < segmentsY; y++)
        {
            for (int x = 0; x < segmentsX; x++)
            {
                int currentIndex = backOffset + y * verticesPerRow + x;
                
                triangles[index++] = currentIndex + 1;
                triangles[index++] = currentIndex + verticesPerRow + 1;
                triangles[index++] = currentIndex;
                
                triangles[index++] = currentIndex + verticesPerRow + 1;
                triangles[index++] = currentIndex + verticesPerRow;
                triangles[index++] = currentIndex;
            }
        }
        
        // –í–µ—Ä—Ö–Ω—è—è, –Ω–∏–∂–Ω—è—è, –ª–µ–≤–∞—è –∏ –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ–ø—É—Å–∫–∞—é —ç—Ç—É —á–∞—Å—Ç—å –∫–æ–¥–∞, –æ–Ω–∞ –ø–æ —Å—É—Ç–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞
        
        // –ù–∞–∑–Ω–∞—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ç–∫–µ
        mesh.vertices = vertices;
        mesh.triangles = triangles;
        mesh.uv = uv;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏ –∏ –≥—Ä–∞–Ω–∏—Ü—ã
        mesh.RecalculateNormals();
        mesh.RecalculateBounds();
        
        return mesh;
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π, –Ω–∞–∫–ª–∞–¥—ã–≤–∞—é—â–∏—Ö—Å—è –ø–æ–≤–µ—Ä—Ö –∫–∞–º–µ—Ä—ã
    private void RemoveOverlayingPlanes()
    {
        if (xrOrigin == null || xrOrigin.Camera == null || generatedPlanes.Count == 0)
            return;
        
        Camera arCamera = xrOrigin.Camera;
        List<GameObject> planesToRemove = new List<GameObject>();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä "–≤–ø–µ—Ä–µ–¥" –¥–ª—è –∫–∞–º–µ—Ä—ã –≤ –º–∏—Ä–æ–≤–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        Vector3 cameraForward = arCamera.transform.forward;
        
        foreach (GameObject plane in generatedPlanes)
        {
            if (plane == null) continue;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –ø–æ–≤–µ—Ä—Ö –∫–∞–º–µ—Ä—ã:
            
            // 1. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∫–∞–º–µ—Ä—ã
            Vector3 directionToPlane = plane.transform.position - arCamera.transform.position;
            float distanceToCamera = directionToPlane.magnitude;
            
            // 2. –£–≥–æ–ª –º–µ–∂–¥—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞–º–µ—Ä—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            // (–Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–ª–æ—Å–∫–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –∫–∞–º–µ—Ä–æ–π)
            float alignmentWithCamera = Vector3.Dot(cameraForward.normalized, directionToPlane.normalized);
            
            // 3. –£–≥–æ–ª –º–µ–∂–¥—É –Ω–æ—Ä–º–∞–ª—å—é –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞–º–µ—Ä—ã
            // (–Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–ª–æ—Å–∫–æ—Å—Ç—å –æ–±—Ä–∞—â–µ–Ω–∞ –∫ –∫–∞–º–µ—Ä–µ)
            float facingDot = Vector3.Dot(cameraForward, -plane.transform.forward);
            
            // 4. –ù–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–ª–æ—Å–∫–æ—Å—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –ø–æ–ª—è –∑—Ä–µ–Ω–∏—è
            Vector3 viewportPos = arCamera.WorldToViewportPoint(plane.transform.position);
            bool isInCentralViewport = (viewportPos.x > 0.3f && viewportPos.x < 0.7f && 
                                       viewportPos.y > 0.3f && viewportPos.y < 0.7f && 
                                       viewportPos.z > 0);
            
            // –£—Å–ª–æ–≤–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏-–Ω–∞–ª–æ–∂–µ–Ω–∏—è:
            // - –ü–ª–æ—Å–∫–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–ª–∏–∑–∫–æ –∫ –∫–∞–º–µ—Ä–µ (–º–µ–Ω–µ–µ 1.2 –º–µ—Ç—Ä–∞)
            // - –ò –ø–ª–æ—Å–∫–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–µ—Ä–µ–¥ –∫–∞–º–µ—Ä–æ–π (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π dot product)
            // - –ò –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø–æ—á—Ç–∏ –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤–∑–≥–ª—è–¥–∞
            // - –ò –ø–ª–æ—Å–∫–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        float protectionTime = 5.0f; // 5 —Å–µ–∫—É–Ω–¥ –∑–∞—â–∏—Ç—ã –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è
        bool isRecentlyCreated = planeCreationTimes.ContainsKey(plane) && 
                              Time.time - planeCreationTimes[plane] < protectionTime;
                              
        if (!isRecentlyCreated && distanceToCamera < 1.2f && alignmentWithCamera > 0.7f && facingDot > 0.6f && isInCentralViewport)
            {
                planesToRemove.Add(plane);
                Debug.Log($"[ARManagerInitializer2] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç—å-–Ω–∞–ª–æ–∂–µ–Ω–∏–µ: dist={distanceToCamera:F2}–º, " + 
                         $"align={alignmentWithCamera:F2}, facing={facingDot:F2}, inCenter={isInCentralViewport}");
            }
        }
        
        // –£–¥–∞–ª—è–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç–∏-–Ω–∞–ª–æ–∂–µ–Ω–∏—è
        foreach (GameObject planeToRemove in planesToRemove)
        {
            generatedPlanes.Remove(planeToRemove);
            Destroy(planeToRemove);
        }
        
        if (planesToRemove.Count > 0)
        {
            Debug.Log($"[ARManagerInitializer2] ‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–æ {planesToRemove.Count} –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π-–Ω–∞–ª–æ–∂–µ–Ω–∏–π");
        }
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    private void UpdatePlanePositions()
    {
        if (xrOrigin == null || xrOrigin.Camera == null || generatedPlanes.Count == 0)
            return;
        
        Camera arCamera = xrOrigin.Camera;
        int updatedPlanes = 0;
        
        foreach (GameObject plane in generatedPlanes)
        {
            if (plane == null) continue;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –ª–∏ –ø–ª–æ—Å–∫–æ—Å—Ç—å –∫ –∫–∞–º–µ—Ä–µ –∏–ª–∏ –¥—Ä—É–≥–æ–º—É –æ–±—ä–µ–∫—Ç—É
            if (plane.transform.parent != null)
            {
                // –û—Ç—Å–æ–µ–¥–∏–Ω—è–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                Vector3 worldPos = plane.transform.position;
                Quaternion worldRot = plane.transform.rotation;
                Vector3 worldScale = plane.transform.lossyScale;
                
                plane.transform.SetParent(null, false);
                plane.transform.position = worldPos;
                plane.transform.rotation = worldRot;
                plane.transform.localScale = worldScale;
                
                updatedPlanes++;
            }
        }
        
        if (updatedPlanes > 0)
        {
            Debug.Log($"[ARManagerInitializer2] ‚ö†Ô∏è –û—Ç—Å–æ–µ–¥–∏–Ω–µ–Ω–æ {updatedPlanes} –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤");
        }
    }

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    public void ResetAllPlanes()
    {
        foreach (GameObject plane in generatedPlanes)
        {
            if (plane != null)
                Destroy(plane);
        }
        
        generatedPlanes.Clear();
        Debug.Log("[ARManagerInitializer2] üîÑ –í—Å–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω—ã –∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã");
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        frameCounter = 10;
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ AR Foundation
    private void DisableARFoundationVisualizers()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ AR Foundation, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        
        // 1. –û—Ç–∫–ª—é—á–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        if (planeManager != null)
        {
            // –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∞–±–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
            planeManager.planePrefab = null;
            
            // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º —Ç—Ä–µ–∫–∞–±–ª-–æ–±—ä–µ–∫—Ç–∞–º –∏ –æ—Ç–∫–ª—é—á–∞–µ–º –∏—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            foreach (var plane in planeManager.trackables)
            {
                if (plane != null)
                {
                    MeshRenderer meshRenderer = plane.GetComponent<MeshRenderer>();
                    if (meshRenderer != null)
                    {
                        meshRenderer.enabled = false;
                    }
                    
                    LineRenderer lineRenderer = plane.GetComponent<LineRenderer>();
                    if (lineRenderer != null)
                    {
                        lineRenderer.enabled = false;
                    }
                }
            }
            
            Debug.Log("[ARManagerInitializer2] ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π AR Foundation");
        }
        
        // 2. –û—Ç–∫–ª—é—á–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä—ã —Ç–æ—á–µ–∫
        var pointCloudManager = FindObjectOfType<UnityEngine.XR.ARFoundation.ARPointCloudManager>();
        if (pointCloudManager != null)
        {
            pointCloudManager.enabled = false;
            Debug.Log("[ARManagerInitializer2] ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω ARPointCloudManager");
        }
        
        // 3. –ü–æ–∏—Å–∫ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ TrackablesParent
        if (xrOrigin != null)
        {
            var trackablesParent = xrOrigin.transform.Find("Trackables");
            if (trackablesParent != null)
            {
                // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –¥–æ—á–µ—Ä–Ω–∏–º –æ–±—ä–µ–∫—Ç–∞–º –∏ –æ—Ç–∫–ª—é—á–∞–µ–º –∏—Ö —Ä–µ–Ω–¥–µ—Ä–µ—Ä—ã
                foreach (Transform child in trackablesParent)
                {
                    // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä—ã —É –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                    foreach (Renderer renderer in child.GetComponentsInChildren<Renderer>())
                    {
                        renderer.enabled = false;
                    }
                }
                Debug.Log("[ARManagerInitializer2] ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω—ã —Ä–µ–Ω–¥–µ—Ä–µ—Ä—ã –≤ Trackables");
            }
        }
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö AR –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ —Ä–∞–Ω—Ç–∞–π–º–µ
    private void DisableOtherARVisualizers()
    {
        // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å –æ—Ä–∞–Ω–∂–µ–≤—ã–º/–∂–µ–ª—Ç—ã–º —Ü–≤–µ—Ç–æ–º –∏ –∏–º–µ–Ω–∞–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ "Trackable", "Feature", "Point"
        var allRenderers = FindObjectsOfType<Renderer>();
        int disabledCount = 0;
        
        foreach (var renderer in allRenderers)
        {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—à–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            bool isOurPlane = false;
            foreach (var plane in generatedPlanes)
            {
                if (plane != null && renderer.gameObject == plane)
                {
                    isOurPlane = true;
                    break;
                }
            }
            
            if (isOurPlane)
                continue;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å AR Foundation
            string objName = renderer.gameObject.name.ToLower();
            if (objName.Contains("track") || objName.Contains("feature") || 
                objName.Contains("point") || objName.Contains("plane") ||
                objName.Contains("mesh") || objName.Contains("visualizer"))
            {
                renderer.enabled = false;
                disabledCount++;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ –∂–µ–ª—Ç—ã–π/–æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç
            if (renderer.sharedMaterial != null)
            {
                // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                Color color = renderer.sharedMaterial.color;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–≤–µ—Ç –∂–µ–ª—Ç—ã–º –∏–ª–∏ –æ—Ä–∞–Ω–∂–µ–≤—ã–º
                // (–∫—Ä–∞—Å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã—Å–æ–∫–∏–π, –∑–µ–ª–µ–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π, —Å–∏–Ω–∏–π –Ω–∏–∑–∫–∏–π)
                if (color.r > 0.6f && color.g > 0.4f && color.b < 0.3f)
                {
                    renderer.enabled = false;
                    disabledCount++;
                }
            }
        }
        
        if (disabledCount > 0)
        {
            Debug.Log($"[ARManagerInitializer2] üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ {disabledCount} —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö AR-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤");
        }
    }

    // –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ï–¢–û–î: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –±–∞–∑–æ–≤–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    private void CreateBasicPlaneInFrontOfUser()
    {
        if (xrOrigin == null || xrOrigin.Camera == null)
            return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –±–∞–∑–æ–≤–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å
        GameObject existingBasicPlane = generatedPlanes.FirstOrDefault(p => p != null && p.name == "BasicWallPlane");
        if (existingBasicPlane != null)
        {
            Debug.Log("[ARManagerInitializer2] ‚ö†Ô∏è –ë–∞–∑–æ–≤–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ù–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é.");
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã
        Camera arCamera = xrOrigin.Camera;
        Vector3 cameraPosition = arCamera.transform.position;
        Vector3 cameraForward = arCamera.transform.forward;
        Vector3 cameraRight = arCamera.transform.right;
        Vector3 cameraUp = arCamera.transform.up;
        
        // –†–∞–¥–∏–∫–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        float planeWidth = 0.5f;  // –°–∏–ª—å–Ω–æ —É–º–µ–Ω—å—à–µ–Ω–æ
        float planeHeight = 0.4f; // –°–∏–ª—å–Ω–æ —É–º–µ–Ω—å—à–µ–Ω–æ
        
        // –û–ü–¢–ò–ú–ê–õ–¨–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        // –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–Ω–æ, —á—Ç–æ –ø–ª–æ—Å–∫–æ—Å—Ç—å –≤—Å—ë –µ—â—ë —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ
        float distanceFromCamera = 2.5f; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª—å—à–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        
        // –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ú–ù–û–ì–û–¢–û–ß–ï–ß–ù–´–ô –†–ï–ô–ö–ê–°–¢: –ó–∞–ø—É—Å–∫–∞–µ–º –ª—É—á–∏ –≤ 9 —Ä–∞–∑–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞
        List<Vector3> raycastDirections = new List<Vector3> {
            cameraForward,
            cameraForward + cameraRight * 0.25f,
            cameraForward - cameraRight * 0.25f,
            cameraForward + cameraUp * 0.25f,
            cameraForward - cameraUp * 0.25f,
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ö–≤–∞—Ç–∞
            cameraForward + cameraRight * 0.2f + cameraUp * 0.2f,
            cameraForward - cameraRight * 0.2f + cameraUp * 0.2f,
            cameraForward + cameraRight * 0.2f - cameraUp * 0.2f,
            cameraForward - cameraRight * 0.2f - cameraUp * 0.2f
        };

        RaycastHit hit = new RaycastHit();
        bool didHit = false;
        float minDistance = float.MaxValue;
        Vector3 bestPosition = cameraPosition + cameraForward * distanceFromCamera;
        Vector3 bestNormal = -cameraForward;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –º–Ω–æ–≥–æ—Ç–æ—á–µ—á–Ω–æ–≥–æ —Ä–µ–π–∫–∞—Å—Ç–∞
        foreach (var direction in raycastDirections)
        {
            if (Physics.Raycast(cameraPosition, direction, out RaycastHit currentHit, 3.5f))
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (–Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –∫–∞–º–µ—Ä–µ)
                if (currentHit.distance > 1.8f && currentHit.distance < minDistance)
                {
                    hit = currentHit;
                    minDistance = currentHit.distance;
                    bestPosition = currentHit.point + currentHit.normal * 0.005f; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç —Å—Ç–µ–Ω—ã
                    bestNormal = currentHit.normal;
                    didHit = true;
                }
            }
        }
        
        Vector3 planePos;
        
        if (didHit)
        {
            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–æ—á–∫—É –ø–æ–ø–∞–¥–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
            planePos = bestPosition;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª—å –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            Debug.Log($"[ARManagerInitializer2] üéØ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏: {minDistance:F2}–º, –Ω–æ—Ä–º–∞–ª—å: {bestNormal}");
        }
        else
        {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏—á–µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            planePos = cameraPosition + cameraForward * distanceFromCamera;
            
            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏ –±–æ–ª—å—à–∏—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
            planePos.y -= 0.4f; // –°–∏–ª—å–Ω–µ–µ —Å–º–µ—â–∞–µ–º –≤–Ω–∏–∑
            // –ù–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ–º –∫ –∫–∞–º–µ—Ä–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
        }
        
        // –û—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –Ω–æ—Ä–º–∞–ª–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        Vector3 orientationNormal = didHit ? bestNormal : cameraForward;
        Vector3 horizontalNormal = new Vector3(orientationNormal.x, 0, orientationNormal.z).normalized;
        Quaternion planeRotation = Quaternion.LookRotation(-horizontalNormal);
        
        // –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º GameObject –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        GameObject planeObj = new GameObject("BasicWallPlane");
        planeObj.transform.position = planePos;
        planeObj.transform.rotation = planeRotation;
        // –°–∏–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –º–∞—Å—à—Ç–∞–± –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
        planeObj.transform.localScale = new Vector3(0.5f, 0.5f, 0.5f);
        
        // –í–∞–∂–Ω–æ: –æ—Ç—Å–æ–µ–¥–∏–Ω—è–µ–º –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–ª–æ—Å–∫–æ—Å—Ç—å –Ω–µ –¥–≤–∏–≥–∞–ª–∞—Å—å —Å –∫–∞–º–µ—Ä–æ–π
        planeObj.transform.SetParent(null);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        MeshFilter meshFilter = planeObj.AddComponent<MeshFilter>();
        MeshRenderer meshRenderer = planeObj.AddComponent<MeshRenderer>();
        
        // –°–æ–∑–¥–∞–µ–º –º–µ—à —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–µ–π
        meshFilter.mesh = CreatePlaneMesh(planeWidth, planeHeight);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–∞—Ç–µ—Ä–∏–∞–ª, —á—Ç–æ –∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π, –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        if (verticalPlaneMaterial != null)
        {
            meshRenderer.material = verticalPlaneMaterial;
        }
        else
        {
            // –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Å–ª—É—á–∞—è
            Material planeMaterial = new Material(Shader.Find("Universal Render Pipeline/Lit"));
            Color planeColor = Color.HSVToRGB(0.1f, 0.6f, 0.7f); // –ü—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π
            planeMaterial.color = planeColor;
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            planeMaterial.SetFloat("_Surface", 1); // 1 = –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
            planeMaterial.SetInt("_ZWrite", 0); // –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±—É—Ñ–µ—Ä –≥–ª—É–±–∏–Ω—ã –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            planeMaterial.SetInt("_SrcBlend", (int)UnityEngine.Rendering.BlendMode.SrcAlpha);
            planeMaterial.SetInt("_DstBlend", (int)UnityEngine.Rendering.BlendMode.OneMinusSrcAlpha);
            planeMaterial.EnableKeyword("_ALPHAPREMULTIPLY_ON");
            planeMaterial.EnableKeyword("_EMISSION");
            planeMaterial.SetColor("_EmissionColor", planeColor * 0.15f); // –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è —ç–º–∏—Å—Å–∏—è
            planeMaterial.SetFloat("_Smoothness", 0.2f);
            planeMaterial.SetFloat("_Metallic", 0.05f);
            planeMaterial.renderQueue = 3000; // –û—á–µ—Ä–µ–¥—å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            planeColor.a = 0.5f; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            planeMaterial.color = planeColor;
            
            meshRenderer.material = planeMaterial;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–ª–∞–π–¥–µ—Ä –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        MeshCollider meshCollider = planeObj.AddComponent<MeshCollider>();
        meshCollider.sharedMesh = meshFilter.sharedMesh;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        generatedPlanes.Add(planeObj);
        
        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Ä–∞–Ω–Ω–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        planeCreationTimes[planeObj] = Time.time;
        
        Debug.Log("[ARManagerInitializer2] ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –±–∞–∑–æ–≤–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ —Å—Ç–µ–Ω—ã
    private bool UpdateOrCreatePlaneForWallArea(Rect area, int textureWidth, int textureHeight, Dictionary<GameObject, bool> visitedPlanes)
    {
        if (xrOrigin == null || xrOrigin.Camera == null)
        {
            Debug.LogError("[ARManagerInitializer2] ‚ùå XROrigin –∏–ª–∏ –µ–≥–æ –∫–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            return false;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        float planeWidthInMeters = area.width / textureWidth * 5.0f;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        if (planeWidthInMeters < minPlaneSize)
        {
            return false;
        }
        
        float aspectRatio = 0.75f;
        float planeHeightInMeters = planeWidthInMeters * aspectRatio;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã
        Camera arCamera = xrOrigin.Camera;
        Vector3 cameraPosition = arCamera.transform.position;
        Vector3 cameraForward = arCamera.transform.forward;
        Vector3 cameraUp = arCamera.transform.up;
        Vector3 cameraRight = arCamera.transform.right;
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã
        float normalizedX = area.x / textureWidth;
        float normalizedY = area.y / textureHeight;
        
        // –°–º—è–≥—á–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫—Ä–∞—è–º –∏ —É–≥–ª–∞–º —ç–∫—Ä–∞–Ω–∞ - –ø–æ–∑–≤–æ–ª—è–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ –æ–±–ª–∞—Å—Ç–µ–π
        if (normalizedX < 0.05f || normalizedX > 0.95f || normalizedY < 0.05f || normalizedY > 0.95f)
        {
            return false; // –û—Ç—Å–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –∫—Ä–∞–π–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ (5% –æ—Ç –∫—Ä–∞–µ–≤)
        }
        
        // –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–≥–ª–æ–≤ - –ø–æ–∑–≤–æ–ª—è–µ–º –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –±–æ–ª—å—à–µ —Å—Ç–µ–Ω
        if ((normalizedX < 0.1f && normalizedY < 0.1f) || 
            (normalizedX > 0.9f && normalizedY < 0.1f) ||  
            (normalizedX < 0.1f && normalizedY > 0.9f) ||  
            (normalizedX > 0.9f && normalizedY > 0.9f))
        {
            return false; // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ —É–≥–ª–æ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏ (10%)
        }
        
        // –ù–µ–º–Ω–æ–≥–æ –º–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
        if (normalizedY < 0.08f) // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 0.15
        {
            return false; // –û—Ç—Å–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å
        }
        
        // –£–õ–£–ß–®–ï–ù–ù–û–ï –ü–†–û–ï–¶–ò–†–û–í–ê–ù–ò–ï: –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –∫–∞–º–µ—Ä—ã
        float horizontalFov = 2.0f * Mathf.Atan(Mathf.Tan(arCamera.fieldOfView * Mathf.Deg2Rad * 0.5f) * arCamera.aspect);
        float angleH = (normalizedX - 0.5f) * horizontalFov;
        float angleV = (normalizedY - 0.5f) * arCamera.fieldOfView * Mathf.Deg2Rad;
        
        // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ù–ï–õ–ò–ù–ï–ô–ù–ê–Ø –ö–û–†–†–ï–ö–¶–ò–Ø: –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–ª—É–±–∏–Ω—ã —Å—Ü–µ–Ω—ã
        float focalDepth = 2.5f; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –≥–ª—É–±–∏–Ω–∞ —Ñ–æ–∫—É—Å–∞
        float perspectiveStrength = 0.15f; // –°–∏–ª–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
        
        // –ë–æ–ª–µ–µ —Å–∏–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞–µ–≤—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π —Å —É—á–µ—Ç–æ–º –¥–∏—Å—Ç–æ—Ä—Å–∏–∏ –æ–±—ä–µ–∫—Ç–∏–≤–∞
        float distortionFactor = 1.5f; // –§–∞–∫—Ç–æ—Ä –¥–∏—Å—Ç–æ—Ä—Å–∏–∏ –æ–±—ä–µ–∫—Ç–∏–≤–∞ (–±–æ–ª—å—à–µ –¥–ª—è —à–∏—Ä–æ–∫–æ—É–≥–æ–ª—å–Ω—ã—Ö –∫–∞–º–µ—Ä)
        float correctionH = Mathf.Sign(angleH) * Mathf.Pow(Mathf.Abs(angleH) / (0.5f * horizontalFov), distortionFactor) * perspectiveStrength * focalDepth;
        float correctionV = Mathf.Sign(angleV) * Mathf.Pow(Mathf.Abs(angleV) / (0.5f * arCamera.fieldOfView * Mathf.Deg2Rad), distortionFactor) * perspectiveStrength * focalDepth;
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º –º–∏—Ä–æ–º
        if (Mathf.Abs(angleH) > horizontalFov * 0.3f)
        {
            // –£—Å–∏–ª–µ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –±–æ–∫–æ–≤—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π —ç–∫—Ä–∞–Ω–∞
            correctionH *= 1.2f;
        }
        
        if (Mathf.Abs(angleV) > arCamera.fieldOfView * Mathf.Deg2Rad * 0.3f)
        {
            // –£—Å–∏–ª–µ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –≤–µ—Ä—Ö–Ω–∏—Ö/–Ω–∏–∂–Ω–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π —ç–∫—Ä–∞–Ω–∞
            correctionV *= 1.2f;
        }
        
        angleH += correctionH;
        angleV += correctionV;
        
        Vector3 rayDirection = cameraForward +
                               cameraRight * Mathf.Tan(angleH) +
                               cameraUp * Mathf.Tan(angleV);
        rayDirection.Normalize();
        
        // –£–õ–£–ß–®–ï–ù–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –†–ê–°–°–¢–û–Ø–ù–ò–Ø: –ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Å—Ç–µ–Ω—ã
        float distanceFromCamera = 2.2f; // –£–º–µ—Ä–µ–Ω–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è —ç–∫—Ä–∞–Ω–∞
        
        // –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ù–û–ì–û–¢–û–ß–ï–ß–ù–´–ô –†–ï–ô–ö–ê–°–¢–ò–ù–ì: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –ª—É—á–µ–π –∏ –∞–Ω–∞–ª–∏–∑ –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        RaycastHit hit = new RaycastHit();
        int layerMask = ~0; // –í—Å–µ —Å–ª–æ–∏
        bool didHit = false;
        
        // –ú–∞—Å—Å–∏–≤ —Å–º–µ—â–µ–Ω–∏–π –¥–ª—è –ª—É—á–µ–π —Å –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–º –æ—Ö–≤–∞—Ç–æ–º –∏ —Ä–∞–∑–Ω–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é
        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∏–º–µ–µ—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫—É—é –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –ª—É—á–µ–π
        List<Vector3> rayOffsets = new List<Vector3>();
        
        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ª—É—á (—Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º)
        rayOffsets.Add(Vector3.zero);
        
        // –ë–ª–∏–∂–Ω–∏–µ –ª—É—á–∏ –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞ (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        float innerRadius = 0.08f; // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∞–¥–∏—É—Å –≤ –º–µ—Ç—Ä–∞—Ö
        rayOffsets.Add(cameraRight * innerRadius);                 // –ü—Ä–∞–≤—ã–π
        rayOffsets.Add(-cameraRight * innerRadius);                // –õ–µ–≤—ã–π
        rayOffsets.Add(cameraUp * innerRadius);                    // –í–µ—Ä—Ö–Ω–∏–π
        rayOffsets.Add(-cameraUp * innerRadius);                   // –ù–∏–∂–Ω–∏–π
        rayOffsets.Add(cameraRight * innerRadius * 0.7f + cameraUp * innerRadius * 0.7f);  // –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π
        rayOffsets.Add(cameraRight * innerRadius * 0.7f - cameraUp * innerRadius * 0.7f);  // –ü—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π
        rayOffsets.Add(-cameraRight * innerRadius * 0.7f + cameraUp * innerRadius * 0.7f); // –õ–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π
        rayOffsets.Add(-cameraRight * innerRadius * 0.7f - cameraUp * innerRadius * 0.7f); // –õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π
        
        // –î–∞–ª—å–Ω–∏–µ –ª—É—á–∏ (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        float outerRadius = 0.15f; // –í–Ω–µ—à–Ω–∏–π —Ä–∞–¥–∏—É—Å –≤ –º–µ—Ç—Ä–∞—Ö
        rayOffsets.Add(cameraRight * outerRadius);                 // –î–∞–ª—å–Ω–∏–π –ø—Ä–∞–≤—ã–π
        rayOffsets.Add(-cameraRight * outerRadius);                // –î–∞–ª—å–Ω–∏–π –ª–µ–≤—ã–π 
        rayOffsets.Add(cameraUp * outerRadius);                    // –î–∞–ª—å–Ω–∏–π –≤–µ—Ä—Ö–Ω–∏–π
        rayOffsets.Add(-cameraUp * outerRadius);                   // –î–∞–ª—å–Ω–∏–π –Ω–∏–∂–Ω–∏–π
        
        float bestDistance = float.MaxValue;
        Vector3 bestNormal = Vector3.zero;
        float bestConfidence = 0f;
        
        // –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø–∞–¥–∞–Ω–∏–π –ª—É—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        List<RaycastHit> successfulHits = new List<RaycastHit>();
        List<float> hitWeights = new List<float>();
        
        // –í–´–ü–û–õ–ù–Ø–ï–ú –°–ï–†–ò–Æ –†–ï–ô–ö–ê–°–¢–û–í —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–º–µ—â–µ–Ω–∏—è–º–∏ –∏ –≤–µ—Å–æ–≤—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
        for (int i = 0; i < rayOffsets.Count; i++)
        {
            Vector3 offsetPos = cameraPosition + rayOffsets[i];
            float rayWeight = 1.0f; // –ë–∞–∑–æ–≤—ã–π –≤–µ—Å
            
            // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –ª—É—á–∏ –∏–º–µ—é—Ç –±–æ–ª—å—à–∏–π –≤–µ—Å
            if (i == 0) rayWeight = 2.0f; // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ª—É—á
            else if (i < 5) rayWeight = 1.5f; // –ë–ª–∏–∂–Ω–∏–µ –∫ —Ü–µ–Ω—Ç—Ä—É
            
            if (Physics.Raycast(offsetPos, rayDirection, out hit, 10.0f, layerMask))
            {
                // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –ò—Å–∫–ª—é—á–∞–µ–º AR –æ–±—ä–µ–∫—Ç—ã, UI —ç–ª–µ–º–µ–Ω—Ç—ã, –¥—Ä—É–≥–∏–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
                bool isValidHit = true;
                
                // –ò–º—è –æ–±—ä–µ–∫—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ AR/UI —ç–ª–µ–º–µ–Ω—Ç—ã
                if (hit.collider.gameObject.name.Contains("AR") || 
                    hit.collider.gameObject.name.Contains("UI") ||
                    hit.collider.gameObject.name.Contains("XR") ||
                    hit.collider.gameObject.name.Contains("Plane"))
                {
                    isValidHit = false;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–π –æ–±—ä–µ–∫—Ç–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª–æ–µ–≤)
                // if (hit.collider.gameObject.layer == 8) isValidHit = false; // –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ—è
                
                if (isValidHit)
                {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø–∞–¥–∞–Ω–∏–∏
                    successfulHits.Add(hit);
                    hitWeights.Add(rayWeight);
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–µ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–∞ –ª—É—á–∞ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                    float combinedMetric = hit.distance / rayWeight;
                    
                    if (combinedMetric < bestDistance)
                    {
                        bestDistance = combinedMetric;
                        bestNormal = hit.normal;
                        bestConfidence = rayWeight;
                        didHit = true;
                    }
                }
            }
        }
        
        // –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í: –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ø–∞–¥–∞–Ω–∏–π –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–µ–Ω—ã
        if (successfulHits.Count > 3) // –ï—Å–ª–∏ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        {
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ –Ω–æ—Ä–º–∞–ª–∏
            var distanceClusters = new Dictionary<float, List<int>>();
            
            for (int i = 0; i < successfulHits.Count; i++)
            {
                float distance = successfulHits[i].distance;
                bool foundCluster = false;
                
                foreach (var clusterCenter in distanceClusters.Keys.ToList())
                {
                    if (Mathf.Abs(distance - clusterCenter) < 0.3f) // –ü–æ—Ä–æ–≥ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
                    {
                        distanceClusters[clusterCenter].Add(i);
                        foundCluster = true;
                        break;
                    }
                }
                
                if (!foundCluster)
                {
                    distanceClusters[distance] = new List<int> { i };
                }
            }
            
            // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –∑–Ω–∞—á–∏–º—ã–π –∫–ª–∞—Å—Ç–µ—Ä (—Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Å—É–º–º–∞—Ä–Ω—ã–º –≤–µ—Å–æ–º)
            float bestClusterWeight = 0f;
            float bestClusterDistance = 0f;
            Vector3 bestClusterNormal = Vector3.zero;
            
            foreach (var cluster in distanceClusters)
            {
                float clusterWeight = 0f;
                Vector3 clusterNormal = Vector3.zero;
                
                foreach (int index in cluster.Value)
                {
                    clusterWeight += hitWeights[index];
                    clusterNormal += successfulHits[index].normal * hitWeights[index];
                }
                
                if (clusterWeight > bestClusterWeight)
                {
                    bestClusterWeight = clusterWeight;
                    bestClusterDistance = cluster.Key;
                    bestClusterNormal.Normalize();
                    bestClusterNormal = clusterNormal / clusterWeight;
                }
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ª—É—á—à–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–Ω–∞—á–∏–º—ã–π
            if (bestClusterWeight > bestConfidence)
            {
                bestDistance = bestClusterDistance;
                bestNormal = bestClusterNormal.normalized;
                bestConfidence = bestClusterWeight;
            }
        }
        
        // –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –†–ê–°–°–¢–û–Ø–ù–ò–Ø: –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–æ–¥—Ö–æ–¥
        if (didHit)
        {
            // –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–π–∫–∞—Å—Ç–∏–Ω–≥–∞ –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Å –Ω–µ–±–æ–ª—å—à–∏–º –æ—Ç—Å—Ç—É–ø–æ–º
            // bestDistance —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (distance/weight), –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            float actualDistance = successfulHits.Count > 0 ? successfulHits[0].distance : bestDistance;
            for (int i = 0; i < successfulHits.Count; i++)
            {
                if (hitWeights[i] == bestConfidence)
                {
                    actualDistance = successfulHits[i].distance;
                    break;
                }
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏–π
            distanceFromCamera = actualDistance + 0.02f;
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
            distanceFromCamera = Mathf.Clamp(distanceFromCamera, 1.0f, 6.0f);
            Debug.Log($"[ARManagerInitializer2] üìè –ù–∞–π–¥–µ–Ω–∞ —Ä–µ–∞–ª—å–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ {distanceFromCamera:F2}–º (–¥–æ–≤–µ—Ä–∏–µ: {bestConfidence:F1})");
        }
        else
        {
            // –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —Ä–µ–π–∫–∞—Å—Ç–∏–Ω–≥ –Ω–µ –Ω–∞—à–µ–ª –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π
            
            // –®–∞–≥ 1: –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö AR –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
            bool foundARPlane = false;
            if (planeManager != null && planeManager.trackables.count > 0)
            {
                ARPlane bestMatchPlane = null;
                float bestMatchScore = 0f;
                float bestMatchDistance = 0f;
                
                foreach (var plane in planeManager.trackables)
                {
                    if (plane == null) continue;
                    
                    Vector3 planeCenter = plane.center;
                    Vector3 planeSurfaceNormal = plane.normal;
                    
                    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–¶–ï–ù–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –ü–õ–û–°–ö–û–°–¢–ò –õ–£–ß–£
                    // –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä –ø–ª–æ—Å–∫–æ—Å—Ç–∏
                    
                    // –§–∞–∫—Ç–æ—Ä –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ - –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞ –ª—É—á—É
                    float angleWithRay = Vector3.Angle(planeSurfaceNormal, -rayDirection);
                    float orientationFactor = Mathf.Cos(angleWithRay * Mathf.Deg2Rad);
                    if (orientationFactor < 0.3f) continue; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç–∏ —Å –ø–ª–æ—Ö–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π
                    
                    // –§–∞–∫—Ç–æ—Ä —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è - –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–ª–æ—Å–∫–æ—Å—Ç—å –±–ª–∏–∑–∫–æ –∫ –ø—Ä–æ–µ–∫—Ü–∏–∏ –ª—É—á–∞
                    Vector3 toCenterVector = planeCenter - cameraPosition;
                    float projectionLength = Vector3.Dot(toCenterVector, rayDirection);
                    
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –ø–æ–∑–∞–¥–∏ –∫–∞–º–µ—Ä—ã –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
                    if (projectionLength <= 0.5f || projectionLength > 8.0f) continue;
                    
                    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –ª—É—á–∞ –∫ —Ü–µ–Ω—Ç—Ä—É –ø–ª–æ—Å–∫–æ—Å—Ç–∏
                    Vector3 projectedPoint = cameraPosition + rayDirection * projectionLength;
                    float perpendicularDistance = Vector3.Distance(projectedPoint, planeCenter);
                    
                    // –§–∞–∫—Ç–æ—Ä –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è - –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–∫–∞ –ø—Ä–æ–µ–∫—Ü–∏–∏ –±–ª–∏–∑–∫–∞ –∫ —Ü–µ–Ω—Ç—Ä—É –ø–ª–æ—Å–∫–æ—Å—Ç–∏
                    // –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–ª–æ—Å–∫–æ—Å—Ç–∏ - –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –¥–æ–ø—É—Å–∫–∞–µ–º –±–æ–ª—å—à–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    float sizeCompensation = Mathf.Sqrt(plane.size.x * plane.size.y);
                    float maxPerpDistance = 0.5f + sizeCompensation * 0.5f;
                    
                    if (perpendicularDistance > maxPerpDistance) continue;
                    
                    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Å–∫–æ—Ä –¥–ª—è —ç—Ç–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
                    float perpDistanceFactor = 1.0f - (perpendicularDistance / maxPerpDistance);
                    float distanceFactor = 1.0f - Mathf.Clamp01((projectionLength - 1.0f) / 7.0f); // –ë–ª–∏–∂–µ –ª—É—á—à–µ
                    float sizeFactor = Mathf.Clamp01(sizeCompensation / 2.0f); // –ß–µ–º –±–æ–ª—å—à–µ –ø–ª–æ—Å–∫–æ—Å—Ç—å, —Ç–µ–º –ª—É—á—à–µ
                    
                    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
                    float planeScore = orientationFactor * 0.4f + perpDistanceFactor * 0.4f + distanceFactor * 0.1f + sizeFactor * 0.1f;
                    
                    if (planeScore > bestMatchScore)
                    {
                        bestMatchScore = planeScore;
                        bestMatchPlane = plane;
                        bestMatchDistance = projectionLength;
                    }
                }
                
                // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é AR –ø–ª–æ—Å–∫–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
                if (bestMatchPlane != null && bestMatchScore > 0.6f) // –¢—Ä–µ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–∏–π —Å–∫–æ—Ä
                {
                    // –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –æ—Ç –ø–ª–æ—Å–∫–æ—Å—Ç–∏
                    distanceFromCamera = bestMatchDistance - 0.05f;
                    
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    distanceFromCamera = Mathf.Clamp(distanceFromCamera, 1.0f, 5.0f);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
                    bool isVertical = Mathf.Abs(Vector3.Dot(bestMatchPlane.normal, Vector3.up)) < 0.3f;
                    
                    Debug.Log($"[ARManagerInitializer2] üìè –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è AR –ø–ª–æ—Å–∫–æ—Å—Ç—å: {distanceFromCamera:F2}–º (—Å–∫–æ—Ä: {bestMatchScore:F2}, {(isVertical ? "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è" : "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è")})");
                    foundARPlane = true;
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª—å –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –¥–ª—è bestNormal, –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–π–∫–∞—Å—Ç–∏–Ω–≥–∞
                    bestNormal = bestMatchPlane.normal;
                }
            }
            
            // –®–∞–≥ 2: –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ AR –ø–ª–æ—Å–∫–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥
            if (!foundARPlane)
            {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                
                // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
                float viewportY = normalizedY;
                float adaptiveBaseDistance;
                
                // –î–ª—è —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç–µ–π —ç–∫—Ä–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                if (viewportY < 0.3f)
                {
                    // –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞ - –æ–±—ã—á–Ω–æ –±–ª–∏–∑–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã
                    adaptiveBaseDistance = 1.8f;
                }
                else if (viewportY > 0.7f)
                {
                    // –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞ - –æ–±—ã—á–Ω–æ –¥–∞–ª—å–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã
                    adaptiveBaseDistance = 2.5f;
                }
                else
                {
                    // –°–µ—Ä–µ–¥–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞ - —Å—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                    adaptiveBaseDistance = 2.2f;
                }
                
                // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                float sizeAdjustment = planeWidthInMeters * 0.3f;
                float positionAdjustment = Mathf.Abs(normalizedX - 0.5f) * 0.5f; // –ë–æ–∫–æ–≤—ã–µ —á–∞—Å—Ç–∏ –Ω–µ–º–Ω–æ–≥–æ –¥–∞–ª—å—à–µ
                
                distanceFromCamera = adaptiveBaseDistance + sizeAdjustment + positionAdjustment;
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                distanceFromCamera = Mathf.Clamp(distanceFromCamera, 1.4f, 4.5f);
                
                Debug.Log($"[ARManagerInitializer2] ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distanceFromCamera:F2}–º");
                
                // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ –ª—É—á—É
                bestNormal = -rayDirection;
            }
        }
        
        // –ü–æ–∑–∏—Ü–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –≤ –º–∏—Ä–æ–≤–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        Vector3 planePos = cameraPosition + rayDirection * distanceFromCamera;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –ø–ª–æ—Å–∫–æ—Å—Ç–∏ (–Ω–æ—Ä–º–∞–ª—å)
        Vector3 planeNormal;
        Quaternion planeRotation;
        
        if (didHit && bestNormal != Vector3.zero) 
        {
            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ –Ω–æ—Ä–º–∞–ª—å
            planeNormal = bestNormal;
            // –°–æ–∑–¥–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç –æ—Ç –±–∞–∑–æ–≤–æ–π –æ—Å–∏ –≤–ø–µ—Ä–µ–¥ –∫ –Ω–æ—Ä–º–∞–ª–∏ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            planeRotation = Quaternion.FromToRotation(Vector3.forward, -planeNormal);
            Debug.Log($"[ARManagerInitializer2] üß≠ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª—å —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏: {planeNormal}");
        }
        else 
        {
            // –ò–Ω–∞—á–µ, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ –ª—É—á—É –æ—Ç –∫–∞–º–µ—Ä—ã
            planeNormal = -rayDirection;
            
            // –ù–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –ø–ª–æ—Å–∫–æ—Å—Ç—å –Ω–∞–∫–ª–æ–Ω–µ–Ω–∞ (–Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å "–ø–æ–ª–æ–º")
            float upDot = Vector3.Dot(planeNormal, Vector3.up);
            if (Mathf.Abs(upDot) > 0.7f) 
            {
                // –ï—Å–ª–∏ –ø–ª–æ—Å–∫–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ—ë –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
                // –î–µ–ª–∞–µ–º –µ—ë –±–æ–ª–µ–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π
                Vector3 horizontalDirection = rayDirection;
                horizontalDirection.y = 0;
                horizontalDirection.Normalize();
                
                // –ü–ª–∞–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª—É—á–∞ –∫ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
                planeNormal = Vector3.Lerp(-rayDirection, -horizontalDirection, Mathf.Abs(upDot) - 0.3f).normalized;
                Debug.Log($"[ARManagerInitializer2] üß≠ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å–ª–∏—à–∫–æ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏");
            }
            
            // –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ—Ä–º–∞–ª–∏
            planeRotation = Quaternion.FromToRotation(Vector3.forward, -planeNormal);
            Debug.Log($"[ARManagerInitializer2] üß≠ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª—É—á–∞: {planeNormal}");
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        // –ü–æ—Å–ª–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è planePos, –¥–æ–±–∞–≤–∏–º –±–æ–ª–µ–µ –∂–µ—Å—Ç–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        // –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –∫–∞–º–µ—Ä–æ–π
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ù–µ —Å–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å, –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –∫–∞–º–µ—Ä–µ –∏ –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –Ω–µ–π
        Vector3 directionToPosition = planePos - arCamera.transform.position;
        float distanceToCam = directionToPosition.magnitude;
        float alignmentWithCamera = Vector3.Dot(arCamera.transform.forward.normalized, directionToPosition.normalized);
        
        // –ò–ó–ú–ï–ù–ï–ù–û: –°–º—è–≥—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∫–∞–º–µ—Ä–µ
        if (distanceToCam < 1.0f && alignmentWithCamera > 0.85f)
        {
            Debug.Log($"[ARManagerInitializer2] ‚ö†Ô∏è –ü–ª–æ—Å–∫–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –∫–∞–º–µ—Ä–µ ({distanceToCam:F2}–º), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
            return false;
        }
        
        // –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        bool tooClose = false;
        int similarOrientationCount = 0;
        GameObject closestExistingPlane = null;
        float closestDuplDistance = float.MaxValue;
        
        foreach (GameObject existingPlane in generatedPlanes)
        {
            if (existingPlane == null) continue;
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–ª–æ—Å–∫–æ—Å—Ç—è–º–∏
            float distanceBetweenPlanes = Vector3.Distance(existingPlane.transform.position, planePos);
            
                         // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–∏–∂–∞–π—à—É—é –ø–ª–æ—Å–∫–æ—Å—Ç—å –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –∑–∞–º–µ–Ω—ã
             if (distanceBetweenPlanes < closestDuplDistance)
             {
                 closestDuplDistance = distanceBetweenPlanes;
                 closestExistingPlane = existingPlane;
             }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä—è–º–æ–π –¥—É–±–ª–∏–∫–∞—Ç (–æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ)
            if (distanceBetweenPlanes < 0.35f)
            {
                tooClose = true;
                Debug.Log($"[ARManagerInitializer2] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–ª–∏–∑–∫–∏–π –¥—É–±–ª–∏–∫–∞—Ç –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ {distanceBetweenPlanes:F2}–º");
                break;
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ —Å –ø–æ—Ö–æ–∂–µ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π –≤ —Å—Ä–µ–¥–Ω–µ–π –±–ª–∏–∑–æ—Å—Ç–∏
            if (distanceBetweenPlanes < 1.0f)
            {
                                 // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ—Ä–º–∞–ª–µ–π –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
                 float dotProduct = Vector3.Dot(existingPlane.transform.forward, -rayDirection);
                
                if (Mathf.Abs(dotProduct) > 0.9f) // –û—á–µ–Ω—å –ø–æ—Ö–æ–∂–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
                {
                    tooClose = true;
                    Debug.Log($"[ARManagerInitializer2] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç—å —Å –ø–æ—Ö–æ–∂–µ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ {distanceBetweenPlanes:F2}–º");
                    break;
                }
                else if (Mathf.Abs(dotProduct) > 0.7f) // –£–º–µ—Ä–µ–Ω–Ω–æ –ø–æ—Ö–æ–∂–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
                {
                    similarOrientationCount++;
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            if (distanceBetweenPlanes < 2.0f)
            {
                                 float dotProduct = Vector3.Dot(existingPlane.transform.forward, -rayDirection);
                if (Mathf.Abs(dotProduct) > 0.6f)
                {
                    similarOrientationCount++;
                }
            }
        }
        
        // –ï—Å–ª–∏ —É–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π —Å–º–æ—Ç—Ä—è—Ç –≤ –ø–æ—Ö–æ–∂–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π
        if (similarOrientationCount >= 3)
        {
            Debug.Log($"[ARManagerInitializer2] ‚ö†Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {similarOrientationCount} –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –≤ –ø–æ—Ö–æ–∂–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏");
            return false;
        }
        
                 // –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –∑–∞–º–µ–Ω—ã –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –≤–º–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö
         if (tooClose && generatedPlanes.Count > 4 && closestExistingPlane != null && closestDuplDistance < 1.0f)
        {
            // –ï—Å–ª–∏ –º—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç, –∏ —É –Ω–∞—Å —É–∂–µ –º–Ω–æ–≥–æ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π, 
            // —Ç–æ –∑–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–ª–æ—Å–∫–æ—Å—Ç—å –≤–º–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π
            Debug.Log($"[ARManagerInitializer2] üîÑ –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–ª–æ—Å–∫–æ—Å—Ç—å –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–∞");
            generatedPlanes.Remove(closestExistingPlane);
            Destroy(closestExistingPlane);
            tooClose = false; // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        }
        else if (tooClose)
        {
            Debug.Log($"[ARManagerInitializer2] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ");
            return false;
        }
        
        // –ü–†–û–í–ï–†–ö–ê 3: –û—Ç—Å–µ–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É–≥–ª–∞—Ö –æ–±–∑–æ—Ä–∞
        // –ò–ó–ú–ï–ù–ï–ù–û: –°–ª–µ–≥–∫–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–π —É–≥–æ–ª –æ–±–∑–æ—Ä–∞ –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        if (Mathf.Abs(angleH) > 0.45f || Mathf.Abs(angleV) > 0.35f)
        {
            Debug.Log($"[ARManagerInitializer2] ‚ö†Ô∏è –ü–ª–æ—Å–∫–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–º —É–≥–ª–µ –æ–±–∑–æ—Ä–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
            return false;
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º GameObject –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        GameObject planeObj = new GameObject($"WallPlane_{generatedPlanes.Count}");
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø–æ–¥–∞–ª—å—à–µ –æ—Ç –∫–∞–º–µ—Ä—ã, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–ª–∞—Å—å
        planeObj.transform.position = planePos;
        
        // –ê–î–ê–ü–¢–ò–í–ù–´–ô –†–ê–ó–ú–ï–†: –†–µ–≥—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –∫–∞–º–µ—Ä—ã
        // –ß–µ–º –¥–∞–ª—å—à–µ –ø–ª–æ—Å–∫–æ—Å—Ç—å, —Ç–µ–º –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ
        float distanceScale = Mathf.Clamp(distanceFromCamera / 2.0f, 0.8f, 1.5f);
        
        // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–†–ò–ï–ù–¢–ê–¶–ò–Ø: –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π —Å —É—á–µ—Ç–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π
        // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é planeRotation
        
        if (didHit)
        {
            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Ä–µ–π–∫–∞—Å—Ç–∏–Ω–≥
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –Ω–æ—Ä–º–∞–ª—å –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏, –Ω–æ —Å –∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            Vector3 orientNormal = bestNormal;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π
            float verticalDot = Vector3.Dot(orientNormal, Vector3.up);
            bool isApproximatelyVertical = Mathf.Abs(verticalDot) < 0.3f; // –ï—Å–ª–∏ –±–ª–∏–∑–∫–æ –∫ 0, —Ç–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è
            
            if (isApproximatelyVertical)
            {
                // –î–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Ç–æ—á–Ω—É—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
                // –ü—Ä–æ–µ—Ü–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª—å –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ø–ª–æ—Å–∫–æ—Å—Ç—å
                Vector3 horizontalComponent = orientNormal - Vector3.up * verticalDot;
                if (horizontalComponent.magnitude > 0.01f)
                {
                    horizontalComponent.Normalize();
                    orientNormal = horizontalComponent;
                }
            }
            
            planeRotation = Quaternion.LookRotation(-orientNormal);
        }
        else if (planeManager != null && planeManager.trackables.count > 0)
        {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ —Ä–µ–π–∫–∞—Å—Ç, –Ω–æ –µ—Å—Ç—å AR –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            ARPlane closestVerticalPlane = null;
            float minDistance = float.MaxValue;
            
            // –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ø–ª–æ—Å–∫–æ—Å—Ç—å
            foreach (var plane in planeManager.trackables)
            {
                if (plane == null) continue;
                
                if (plane.alignment == PlaneAlignment.Vertical)
                {
                    float dist = Vector3.Distance(plane.center, planePos);
                    if (dist < minDistance && dist < 2.0f)
                    {
                        minDistance = dist;
                        closestVerticalPlane = plane;
                    }
                }
            }
            
            if (closestVerticalPlane != null)
            {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –±–ª–∏–∂–∞–π—à–µ–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π AR –ø–ª–æ—Å–∫–æ—Å—Ç–∏
                planeRotation = Quaternion.LookRotation(-closestVerticalPlane.normal);
            }
            else
            {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ –ª—É—á—É, –Ω–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
                Vector3 adjustedDirection = -rayDirection;
                float upDot = Vector3.Dot(adjustedDirection, Vector3.up);
                
                // –£–¥–∞–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
                if (Mathf.Abs(upDot) > 0.1f)
                {
                    adjustedDirection -= Vector3.up * upDot;
                    adjustedDirection.Normalize();
                }
                
                planeRotation = Quaternion.LookRotation(adjustedDirection);
            }
        }
        else
        {
            // –ï—Å–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            planeRotation = Quaternion.LookRotation(-rayDirection);
        }
        
        planeObj.transform.rotation = planeRotation;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –º–∞—Å—à—Ç–∞–± –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        planeObj.transform.localScale = new Vector3(distanceScale, distanceScale, 1.0f);
        
        // –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–º–µ—Å—Ç–æ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ XR Origin, —Å–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å –≤ –∫–æ—Ä–Ω–µ —Å—Ü–µ–Ω—ã
        // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –≤–º–µ—Å—Ç–µ —Å –∫–∞–º–µ—Ä–æ–π
        planeObj.transform.SetParent(null, true);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–π "Default" –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ AR —Å—Ü–µ–Ω—É
        planeObj.layer = LayerMask.NameToLayer("Default");
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        MeshFilter meshFilter = planeObj.AddComponent<MeshFilter>();
        MeshRenderer meshRenderer = planeObj.AddComponent<MeshRenderer>();
        
        // –°–æ–∑–¥–∞–µ–º –º–µ—à –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        meshFilter.mesh = CreatePlaneMesh(planeWidthInMeters, planeHeightInMeters);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Å—Ç–µ–Ω—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è AR
        Material planeMaterial = new Material(Shader.Find("Universal Render Pipeline/Lit"));
        
        // –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ AR - –±–æ–ª–µ–µ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω–∞—è –¥–ª—è –ª—É—á—à–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –û–î–ò–ù –°–¢–ê–ë–ò–õ–¨–ù–´–ô –¶–í–ï–¢ –≤–º–µ—Å—Ç–æ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–≥–æ –≤–∏–¥–∞
        Color planeColor = Color.HSVToRGB(0.1f, 0.6f, 0.7f); // –ü—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π
        planeMaterial.color = planeColor;
        
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–ª—è AR-–ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        planeMaterial.SetFloat("_Surface", 0); // 0 = –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
        planeMaterial.SetInt("_ZWrite", 1); // –í–∫–ª—é—á–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±—É—Ñ–µ—Ä –≥–ª—É–±–∏–Ω—ã
        planeMaterial.SetInt("_SrcBlend", (int)UnityEngine.Rendering.BlendMode.One);
        planeMaterial.SetInt("_DstBlend", (int)UnityEngine.Rendering.BlendMode.Zero);
        planeMaterial.DisableKeyword("_ALPHAPREMULTIPLY_ON");
        
        // –í–∫–ª—é—á–∞–µ–º —ç–º–∏—Å—Å–∏—é –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏, –Ω–æ —Å –û–ß–ï–ù–¨ —É–º–µ—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é
        planeMaterial.EnableKeyword("_EMISSION");
        planeMaterial.SetColor("_EmissionColor", planeColor * 0.2f); // –°–Ω–∏–∂–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–≤–µ—á–µ–Ω–∏—è –µ—â–µ –±–æ–ª—å—à–µ
        
        // –£–º–µ—Ä–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –º–µ—Ç–∞–ª–ª–∏–∫/–≥–ª–∞–¥–∫–æ—Å—Ç—å –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞
        planeMaterial.SetFloat("_Smoothness", 0.3f);
        planeMaterial.SetFloat("_Metallic", 0.1f);
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–ª—è AR-–æ–±—ä–µ–∫—Ç–æ–≤
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª –±—É–¥–µ—Ç –≤–∏–¥–∏–º—ã–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –≥–ª—É–±–∏–Ω–æ–π
        planeMaterial.renderQueue = 2000; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        
        meshRenderer.material = planeMaterial;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö
        generatedPlanes.Add(planeObj);
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±—ã—Å—Ç—Ä–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        planeCreationTimes[planeObj] = Time.time;
        
        Debug.Log($"[ARManagerInitializer2] ‚úì –°–æ–∑–¥–∞–Ω–∞ AR-–ø–ª–æ—Å–∫–æ—Å—Ç—å #{generatedPlanes.Count-1} –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ {distanceToCam:F2}–º");
        
        return true;
    }

    // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –µ—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
    private void CleanupOldPlanes()
    {
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        int maxPlanes = 8;
        
        // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (generatedPlanes.Count <= maxPlanes)
        {
            return;
        }
        
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç null-—Å—Å—ã–ª–æ–∫
        generatedPlanes.RemoveAll(p => p == null);
        
        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –≤—ã—Ö–æ–¥–∏–º
        if (generatedPlanes.Count <= maxPlanes)
        {
            return;
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        List<GameObject> sortedPlanes = new List<GameObject>(generatedPlanes);
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        sortedPlanes.Sort((a, b) => {
            float timeA = planeCreationTimes.ContainsKey(a) ? planeCreationTimes[a] : 0;
            float timeB = planeCreationTimes.ContainsKey(b) ? planeCreationTimes[b] : 0;
            return timeA.CompareTo(timeB); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
        });
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—É–¥–∞–ª—è–µ–º –ø–æ–ª–æ–≤–∏–Ω—É –ª–∏—à–Ω–∏—Ö)
        int planesToRemove = Mathf.CeilToInt((generatedPlanes.Count - maxPlanes) / 2f);
        planesToRemove = Mathf.Min(planesToRemove, generatedPlanes.Count - 2); // –û—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º—É–º 2 –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        
        Debug.Log($"[ARManagerInitializer2] üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π: {generatedPlanes.Count} ‚Üí {generatedPlanes.Count - planesToRemove}");
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–ª–æ—Å–∫–æ—Å—Ç—è–º –∏ —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ
        for (int i = 0; i < planesToRemove; i++)
        {
            if (i >= sortedPlanes.Count) break;
            
            GameObject plane = sortedPlanes[i];
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω—É–ª–µ–≤—ã–µ —Å—Å—ã–ª–∫–∏
            if (plane == null) continue;
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
            if (planeCreationTimes.ContainsKey(plane))
            {
                planeCreationTimes.Remove(plane);
            }
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
            generatedPlanes.Remove(plane);
            
            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –æ–±—ä–µ–∫—Ç
            Destroy(plane);
        }
        
        Debug.Log($"[ARManagerInitializer2] üßπ –£–¥–∞–ª–µ–Ω–æ {planesToRemove} —Å—Ç–∞—Ä—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π. –û—Å—Ç–∞–ª–æ—Å—å {generatedPlanes.Count}");
    }
}