using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ cullingMask —É –≤—Å–µ—Ö –∫–∞–º–µ—Ä –≤ —Å—Ü–µ–Ω–µ.
/// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç cullingMask –≤ -1 (Everything) –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ARPlane.
/// </summary>
public class CameraCullingMaskFixer : MonoBehaviour
{
    private HashSet<int> processedCameraIds = new HashSet<int>();
    private int lastCameraCount = 0;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è cullingMask –≤ –∏–º–µ–Ω–∞ —Å–ª–æ–µ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    private static string FormatCullingMask(int mask)
    {
        if (mask == -1) return "Everything (-1)";
        if (mask == 0) return "Nothing (0)";
        
        List<string> layers = new List<string>();
        for (int i = 0; i < 32; i++)
        {
            int layerBit = 1 << i;
            if ((mask & layerBit) != 0)
            {
                string layerName = LayerMask.LayerToName(i);
                if (!string.IsNullOrEmpty(layerName))
                {
                    layers.Add(layerName);
                }
                else
                {
                    layers.Add($"Layer{i}");
                }
            }
        }
        
        return $"{mask} [{string.Join(", ", layers)}]";
    }

    // –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç —Å—Ç–∞—Ä—Ç–∞
    void Start()
    {
        Debug.Log("[CameraCullingMaskFixer] üî• –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω");
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cullingMask –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–º–µ—Ä
        SetAllCamerasToEverything();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–º–µ—Ä
        StartCoroutine(CheckCamerasRoutine());
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∏—Å–∫–∞ –∫–∞–º–µ—Ä –ø–æ –∏–º–µ–Ω–∏
        StartCoroutine(FindCamerasByNameRoutine());
    }

    // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã–µ –∫–∞–º–µ—Ä—ã
    void Update()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–µ—Ä
        int currentCameraCount = Camera.allCameras.Length;
        if (currentCameraCount != lastCameraCount)
        {
            Debug.Log($"[CameraCullingMaskFixer] üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–º–µ—Ä: {lastCameraCount} ‚Üí {currentCameraCount}");
            lastCameraCount = currentCameraCount;
            SetAllCamerasToEverything();
        }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç cullingMask –≤ -1 (Everything) –¥–ª—è –≤—Å–µ—Ö –∫–∞–º–µ—Ä
    private void SetAllCamerasToEverything()
    {
        Camera[] allCameras = Camera.allCameras;
        bool shouldLog = Time.frameCount % 300 == 0 || Time.frameCount < 10;
        
        bool anyChanges = false;
        int fixedCount = 0;
        
        int arPlanesLayer = LayerMask.NameToLayer("ARPlanes");

        foreach (Camera camera in allCameras)
        {
            int targetMask;
            string targetMaskDescription;

            if (camera.CompareTag("MainCamera") || camera.name == "Main Camera")
            {
                targetMask = -1; // Everything
                if (arPlanesLayer != -1)
                {
                    targetMask &= ~(1 << arPlanesLayer); // Exclude ARPlanes layer
                }
                targetMaskDescription = $"Everything except ARPlanes ({FormatCullingMask(targetMask)})";
            }
            else
            {
                targetMask = -1; // Everything
                targetMaskDescription = "Everything (-1)";
            }

            // –ï—Å–ª–∏ —ç—Ç–∞ –∫–∞–º–µ—Ä–∞ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
            if (!processedCameraIds.Contains(camera.GetInstanceID()))
            {
                // –ï—Å–ª–∏ cullingMask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ü–µ–ª–µ–≤—É—é –º–∞—Å–∫—É
                if (camera.cullingMask != targetMask)
                {
                    string oldMask = FormatCullingMask(camera.cullingMask);
                    string oldName = camera.name;
                    
                    camera.cullingMask = targetMask;
                    anyChanges = true;
                    fixedCount++;
                    
                    Debug.LogWarning($"[CameraCullingMaskFixer] üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω cullingMask –¥–ª—è –∫–∞–º–µ—Ä—ã '{oldName}': {oldMask} ‚Üí {targetMaskDescription}");
                }
                
                // –ü–æ–º–µ—á–∞–µ–º –∫–∞–º–µ—Ä—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
                processedCameraIds.Add(camera.GetInstanceID());
            }
            else
            {
                // –î–ª—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ cullingMask –Ω–∞ –Ω–µ—Ü–µ–ª–µ–≤–æ–π
                if (camera.cullingMask != targetMask)
                {
                    string oldMask = FormatCullingMask(camera.cullingMask);
                    
                    camera.cullingMask = targetMask;
                    anyChanges = true;
                    fixedCount++;
                    
                    Debug.LogWarning($"[CameraCullingMaskFixer] üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω cullingMask –¥–ª—è –∫–∞–º–µ—Ä—ã '{camera.name}': {oldMask} ‚Üí {targetMaskDescription}");
                }
            }
        }
        
        if (anyChanges)
        {
            Debug.Log($"[CameraCullingMaskFixer] ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixedCount} –∫–∞–º–µ—Ä –∏–∑ {allCameras.Length}");
        }
        else if (allCameras.Length > 0 && shouldLog)
        {
            Debug.Log($"[CameraCullingMaskFixer] ‚úì –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {allCameras.Length} –∫–∞–º–µ—Ä, –≤—Å–µ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–º–µ—Ä
    private IEnumerator CheckCamerasRoutine()
    {
        yield return new WaitForSeconds(2f); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        
        int checkCount = 0;
        while (true)
        {
            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 10 –ø—Ä–æ–≤–µ—Ä–æ–∫
            if (checkCount % 10 == 0)
            {
                Debug.Log("[CameraCullingMaskFixer] üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–∞–º–µ—Ä...");
            }
            
            SetAllCamerasToEverything();
            checkCount++;
            
            yield return new WaitForSeconds(15f); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
        }
    }
    
    // –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–º–µ—Ä –ø–æ –∏–º–µ–Ω–∏
    private IEnumerator FindCamerasByNameRoutine()
    {
        string[] cameraNames = new string[] { "AR Camera", "SimulationCamera", "Main Camera", "ARCamera", "XR Origin" };
        
        yield return new WaitForSeconds(2f); // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        
        Debug.Log("[CameraCullingMaskFixer] üîç –ù–∞—á–∞—Ç –ø–æ–∏—Å–∫ –∫–∞–º–µ—Ä –ø–æ –∏–º–µ–Ω–∞–º...");
        int arPlanesLayer = LayerMask.NameToLayer("ARPlanes");
        
        for (int i = 0; i < 3; i++) // —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        {
            bool foundAny = false;
            bool shouldLog = i == 0; // –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ
            
            foreach (string cameraNameInList in cameraNames)
            {
                GameObject cameraObj = GameObject.Find(cameraNameInList);
                if (cameraObj != null)
                {
                    Camera camera = cameraObj.GetComponent<Camera>();
                    if (camera != null)
                    {
                        foundAny = true;
                        
                        int targetMask;
                        string targetMaskDescription;

                        if (camera.CompareTag("MainCamera") || camera.name == "Main Camera")
                        {
                            targetMask = -1; // Everything
                            if (arPlanesLayer != -1)
                            {
                                targetMask &= ~(1 << arPlanesLayer); // Exclude ARPlanes layer
                            }
                            targetMaskDescription = $"Everything except ARPlanes ({FormatCullingMask(targetMask)})";
                        }
                        else
                        {
                            targetMask = -1; // Everything
                            targetMaskDescription = "Everything (-1)";
                        }

                        // –§–∏–∫—Å–∏—Ä—É–µ–º cullingMask, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if (camera.cullingMask != targetMask)
                        {
                            string oldMask = FormatCullingMask(camera.cullingMask);
                            camera.cullingMask = targetMask;
                            
                            Debug.LogWarning($"[CameraCullingMaskFixer] üîß –ù–∞–π–¥–µ–Ω–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–º–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏ '{cameraNameInList}': {oldMask} ‚Üí {targetMaskDescription}");
                        }
                        else if (shouldLog)
                        {
                            Debug.Log($"[CameraCullingMaskFixer] ‚úì –ù–∞–π–¥–µ–Ω–∞ –∫–∞–º–µ—Ä–∞ '{cameraNameInList}', cullingMask —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {targetMaskDescription}");
                        }
                    }
                }
            }
            
            if (!foundAny && shouldLog)
            {
                Debug.Log("[CameraCullingMaskFixer] üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–∞–º");
            }
            
            yield return new WaitForSeconds(5f); // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω—ã)
    public void ForceFixAllCameras()
    {
        Debug.Log("[CameraCullingMaskFixer] üîÑ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞–º–µ—Ä");
        processedCameraIds.Clear(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä
        SetAllCamerasToEverything();
    }
} 


